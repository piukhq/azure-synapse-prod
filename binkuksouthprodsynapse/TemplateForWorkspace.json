{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "binkuksouthprodsynapse"
		},
		"DWHSQLPool_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWHSQLPool'"
		},
		"Harmonia_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Harmonia'"
		},
		"binkuksouthprodsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'binkuksouthprodsynapse-WorkspaceDefaultSqlServer'"
		},
		"ls_Syn_DataWarehouse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_Syn_DataWarehouse'"
		},
		"ls_pg_harmonia_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_pg_harmonia'"
		},
		"ls_pg_hermes_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_pg_hermes'"
		},
		"DataLakeProd_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://binkuksouthproddwh.dfs.core.windows.net"
		},
		"KeyVaultProd_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://bink-uksouth-prod-inf.vault.azure.net/"
		},
		"binkuksouthprodsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://binkuksouthproddwh.dfs.core.windows.net"
		},
		"ls_adls_dwlanding_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://binkuksouthproddwh.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Build Data Warehouse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Master Pipeline to refresh Data Warehouse",
				"activities": [
					{
						"name": "Load Source data to ADLS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load Source data to ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create External Objects",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Source data to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create External Objects",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Build Dimensions",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create External Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Build Dimensions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Load Source data to ADLS",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Create External Objects",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Build Dimensions",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Build Facts",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"','','type\": \"MessageCard\",\n    \"','','context\": \"https://schema.org/extensions\",\n    \"summary\": \"Issue 176715375\",\n    \"themeColor\": \"eb3434\",\n    \"title\": \"Azure Synapse notification alert!\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Pipeline failed\",\n            \"activitySubtitle\": \"UTC: ', utcnow() ,'\",\n            \"activityImage\": \"https://azurebloggingresources.blob.core.windows.net/images/error-red-cross.png\",\n            \"facts\": [\n                {\n                    \"name\": \"Azure Synpase Analytics:\",\n                    \"value\": \"**', pipeline().DataFactory,'**\"\n                },\n                {\n                    \"name\": \"Pipeline\",\n                    \"value\": \"**',pipeline().Pipeline,'**\"\n                },\n                {\n                    \"name\": \"Run ID\",\n                    \"value\": \"**',pipeline().RunId,'**\"\n                }\n            ],\n            \"text\": \"Error in inner pipeline: \"\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"type\": \"OpenUri\",\n            \"name\": \"Go to Pipeline Run\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \" https://web.azuresynapse.net\"\n                }\n            ]\n        }\n    ]\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Build Facts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Dimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Build Facts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load Source data to ADLS')]",
				"[concat(variables('workspaceId'), '/pipelines/Create External Objects')]",
				"[concat(variables('workspaceId'), '/pipelines/Build Dimensions')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/pipelines/Build Facts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Build Data Warehouse_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Master Pipeline to refresh Data Warehouse",
				"activities": [
					{
						"name": "Load Source data to ADLS_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load Source data to ADLS_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create External Objects",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Source data to ADLS_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create External Objects",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Build Dimensions_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Truncate Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Build Dimensions_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Truncate Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create External Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_TruncateTable]"
						},
						"linkedServiceName": {
							"referenceName": "ls_Syn_DataWarehouse",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Build Facts_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Dimensions_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Build Facts_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load Source data to ADLS_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Create External Objects')]",
				"[concat(variables('workspaceId'), '/pipelines/Build Dimensions_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]",
				"[concat(variables('workspaceId'), '/pipelines/Build Facts_FullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Build Dimensions')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load DimPaymentCard",
						"description": "Pipeline to trigger the \"Load DimPaymentCard\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimPaymentCard",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimUser",
						"description": "Pipeline to trigger the \"Load DimUser\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimUser",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimLoyaltyCard",
						"description": "Pipeline to trigger the \"Load DimLoyaltyCard\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimLoyaltyCard",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimLCVoucher",
						"description": "Pipeline to trigger the \"Load DimLCVoucher\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load DimLoyaltyCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimLCVoucher",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimUser')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimLCVoucher')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Build Dimensions_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load DimPaymentCard_FullLoad",
						"description": "Pipeline to trigger the \"Load DimPaymentCard\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimPaymentCard_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimUser_FullLoad",
						"description": "Pipeline to trigger the \"Load DimUser\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimUser_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimLoyaltyCard_FullLoad",
						"description": "Pipeline to trigger the \"Load DimLoyaltyCard_FullLoad\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimLoyaltyCard_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load DimLCVoucher_FullLoad",
						"description": "Pipeline to trigger the \"Load DimLCVoucher_FullLoad\" Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load DimLoyaltyCard_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimLCVoucher_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load DimPaymentCard_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimUser_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimLoyaltyCard_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimLCVoucher_FullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Build Facts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Load FactUserLC",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactUserLC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactUserPC",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactUserPC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactLoyaltyCardPaymentCard",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactLoyaltyCardPaymentCard",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactMatchedTransaction",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactMatchedTransaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load FactUserLC')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactUserPC')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactLoyaltyCardPaymentCard')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactMatchedTransaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Build Facts_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Load FactUserLC_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactUserLC_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactUserPC_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactUserPC_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactMatchedTransaction_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactMatchedTransaction_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Load FactLoyaltyCardPaymentCard_FullLoad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load FactLoyaltyCardPaymentCard_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Load FactUserLC_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactUserPC_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactMatchedTransaction_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Load FactLoyaltyCardPaymentCard_FullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create External Objects')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to create all required external tables dynamically",
				"activities": [
					{
						"name": "Create External DS File Types and Tables",
						"description": "To execute the Stored Procedure dwhpool.dbo.usp_CreateExternalTable",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dwhpool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_CreateExternalObjects]",
							"storedProcedureParameters": {
								"Yr": {
									"value": {
										"value": "@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Mt": {
									"value": {
										"value": "@{formatDateTime(adddays(utcnow(),-1), 'MM')}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Dy": {
									"value": {
										"value": "@{formatDateTime(adddays(utcnow(),-1), 'dd')}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create External DS File Types and Tables",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Create External DS Objects"
									}
								]
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Harmonia to ADLS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to move data from all tables in Harmonia to Synapse data lake in Parquet files. Hermes/tablename/year=YYYY/month=MM/day=DD/somerandomeid.parquet",
				"activities": [
					{
						"name": "GetTableList",
						"description": "Get the list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "SELECT DISTINCT table_schema, table_name\nFROM information_schema.columns\nWHERE table_schema = 'public' AND 1=2",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "ds_pg_harmonia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "Perform activity for each of the table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExportToParquet",
									"description": "Export Harmonia data to parquet files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "@concat('select * from ',item().table_schema,'.',item().table_name)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_pg_harmonia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_harmonia",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().Table_Schema,'_',item().Table_Name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_matched_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_payment_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_scheme_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_user_identity_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Harmonia data to ADLS"
									}
								]
							}
						}
					},
					{
						"name": "Harmonia to ADLS_matched_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_matched_transaction",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcMatchedTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_payment_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_matched_transaction_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcMatchedTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_scheme_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_scheme_transaction",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcSchemeTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_user_identity_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_user_identity",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcUserIdentity": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_harmonia')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_matched_transaction')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_matched_transaction_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_scheme_transaction')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_user_identity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Harmonia to ADLS_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to move data from all tables in Harmonia to Synapse data lake in Parquet files. Hermes/tablename/year=YYYY/month=MM/day=DD/somerandomeid.parquet",
				"activities": [
					{
						"name": "GetTableList",
						"description": "Get the list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "SELECT DISTINCT table_schema, table_name\nFROM information_schema.columns\nWHERE table_schema = 'public' AND 1=2",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "ds_pg_harmonia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "Perform activity for each of the table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExportToParquet",
									"description": "Export Harmonia data to parquet files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "@concat('select * from ',item().table_schema,'.',item().table_name)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_pg_harmonia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_harmonia",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().Table_Schema,'_',item().Table_Name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_matched_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_payment_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_scheme_transaction_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Harmonia to ADLS_user_identity_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Harmonia data to ADLS"
									}
								]
							}
						}
					},
					{
						"name": "Harmonia to ADLS_matched_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_matched_transaction_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcMatchedTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_payment_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_payment_transaction_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcPaymentTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_scheme_transaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_scheme_transaction_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcSchemeTransaction": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Harmonia to ADLS_user_identity_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Harmonia to ADLS_user_identity_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcUserIdentity": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_harmonia')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_matched_transaction_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_payment_transaction_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_scheme_transaction_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Harmonia to ADLS_user_identity_FullLoad')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to move data from all tables in Hermes to Synapse data lake in Parquet files. Hermes/tablename/year=YYYY/month=MM/day=DD/somerandomeid.parquet",
				"activities": [
					{
						"name": "GetTableList",
						"description": "Get the list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "SELECT DISTINCT table_schema, table_name\nFROM information_schema.columns\nWHERE table_schema = 'public' and table_name IN ('payment_card_paymentcard', 'payment_card_issuer', 'user_clientapplication', 'user_clientapplicationbundle', 'user_organisation', 'user_userdetail', 'scheme_scheme', 'scheme_category', 'ubiquity_schemeaccountentry', 'ubiquity_paymentcardaccountentry', 'ubiquity_paymentcardschemeentry')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "ds_pg_hermes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "Perform activity for each of the table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExportToParquet",
									"description": "Export Hermes data to parquet files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "@concat('select * from ',item().table_schema,'.',item().table_name)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_pg_hermes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_hermes",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().Table_Schema,'_',item().Table_Name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_payment_card_paymentcardaccount",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalpaymentcardaccount",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_User",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalcustomuser",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_scheme_schemeaccount",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalschemeaccount",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalschemeaccountentry",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_historicalpaymentcardaccountentry",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_History_HistoricalPaymentcardSchemeEntry",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Source data to ADLS"
									}
								]
							}
						}
					},
					{
						"name": "Hermes to ADLS_payment_card_paymentcardaccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_payment_card_paymentcardaccount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcPaymentCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalpaymentcardaccount",
						"description": "history_historicalpaymentcardaccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardaccount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoricalPaymentCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_User",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_user",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcUser": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalcustomuser",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalcustomuser",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalCustomUser": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_scheme_schemeaccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_scheme_schemeaccount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcLoyaltyCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalschemeaccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalschemeaccount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalSchemeAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalschemeaccountentry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalschemeaccountentry",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalSchemeAccountEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_historicalpaymentcardaccountentry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardaccountentry",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalPaymentCardAccountEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_History_HistoricalPaymentcardSchemeEntry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardschemeentry",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalPaymentcardSchemeEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_payment_card_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_user')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalcustomuser')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalschemeaccount')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalschemeaccountentry')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardaccountentry')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardschemeentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to move data from all tables in Hermes to Synapse data lake in Parquet files. Hermes/tablename/year=YYYY/month=MM/day=DD/somerandomeid.parquet",
				"activities": [
					{
						"name": "GetTableList",
						"description": "Get the list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "SELECT DISTINCT table_schema, table_name\nFROM information_schema.columns\nWHERE table_schema = 'public' and table_name IN ('payment_card_paymentcard', 'payment_card_issuer', 'user_clientapplication', 'user_clientapplicationbundle', 'user_organisation', 'user_userdetail', 'scheme_scheme', 'scheme_category', 'ubiquity_schemeaccountentry', 'ubiquity_paymentcardaccountentry', 'ubiquity_paymentcardschemeentry')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "ds_pg_hermes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "Perform activity for each of the table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExportToParquet",
									"description": "Export Hermes data to parquet files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "@concat('select * from ',item().table_schema,'.',item().table_name)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_pg_hermes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_hermes",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().Table_Schema,'_',item().Table_Name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Hermes to ADLS_payment_card_paymentcardaccount_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_payment_card_paymentcardaccount_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcPaymentCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalpaymentcardaccount_Ful",
						"description": "history_historicalpaymentcardaccount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardaccount_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoricalPaymentCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_User_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_user_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcUser": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalcustomuser_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalcustomuser_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalCustomUser": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_payment_card_paymentcardaccount_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalpaymentcardaccount_Ful",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_User_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalcustomuser_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_scheme_schemeaccount_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalschemeaccount_FullLoad",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_history_historicalschemeaccountentry_FL",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_historicalpaymentcardaccountentry_FL",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Hermes to ADLS_HistoricalPaymentCardSchemeEntry_FL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Source data to ADLS"
									}
								]
							}
						}
					},
					{
						"name": "Hermes to ADLS_scheme_schemeaccount_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_scheme_schemeaccount_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcLoyaltyCardAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalschemeaccount_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalschemeaccount_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalSchemeAccount": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_history_historicalschemeaccountentry_FL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalschemeaccountentry_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalSchemeAccountEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_historicalpaymentcardaccountentry_FL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardaccountentry_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalPaymentCardAccountEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Hermes to ADLS_HistoricalPaymentCardSchemeEntry_FL",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Hermes to ADLS_history_historicalpaymentcardschemeentry_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcHistoryHistoricalPaymentcardSchemeEntry": {},
									"DstDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_payment_card_paymentcardaccount_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardaccount_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_user_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalcustomuser_FullLoad')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_scheme_schemeaccount_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalschemeaccount_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalschemeaccountentry_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardaccountentry_FullLoad')]",
				"[concat(variables('workspaceId'), '/dataflows/df_Hermes to ADLS_history_historicalpaymentcardschemeentry_FullLoad')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load LCVoucher Dimension",
				"activities": [
					{
						"name": "df_LoadLCVoucher",
						"description": "Data flow to load LoyaltyCard Voucher Dimension",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimLCVoucher",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcVwSchemeSchemeaccountVoucher": {},
									"srcSchemeAccount": {},
									"srcDimLCVoucher": {},
									"scrMaxDimLCVoucherID": {},
									"srcDimLoyaltyCard": {},
									"snkDimLCVoucher": {},
									"snkDimLCVoucherEA": {},
									"snkDimLCVoucherEI": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update dimLCVoucher",
						"description": "Update dimLCVoucher",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadLCVoucher",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dwhpool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_UpdateDimLCVoucher]"
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "df_LoadLCVoucher",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Payment Dimension"
									}
								]
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimLCVoucher')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimLCVoucher_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load LCVoucher Dimension",
				"activities": [
					{
						"name": "df_LoadLCVoucher_FullLoad",
						"description": "Data flow to load LCVoucher dimension",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimLCVoucher_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcVwSchemeSchemeaccountVoucher": {},
									"srcSchemeAccount": {},
									"srcDimLCVoucher": {},
									"scrMaxDimLCVoucherID": {},
									"srcDimLoyaltyCard": {},
									"snkDimLCVoucher": {},
									"snkDimLCVoucherEA": {},
									"snkDimLCVoucherEI": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update dimLCVoucher",
						"description": "Update dimLCVoucher",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadLCVoucher_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dwhpool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_UpdateDimLCVoucher]"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimLCVoucher_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load Loyalty Card Dimension",
				"activities": [
					{
						"name": "df_LoadLoyaltyCard",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimLoyaltyCard",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcSchemeAccount": {},
									"srcScheme": {},
									"scrSchemeCategory": {},
									"srcRefLoyaltyCardStatus": {},
									"srcDimLoyaltyCard": {},
									"MaxDimLCID": {},
									"srcVwSchemeSchemeaccountBalance": {},
									"snkDimLoyaltyCard": {},
									"snkDimLoyaltyCardEA": {},
									"snkDimLoyaltyCardEI": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimLoyaltyCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load Loyalty Card Dimension",
				"activities": [
					{
						"name": "df_LoadLoyaltyCard_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimLoyaltyCard_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcSchemeAccount": {},
									"srcScheme": {},
									"scrSchemeCategory": {},
									"srcRefLoyaltyCardStatus": {},
									"srcDimLoyaltyCard": {},
									"MaxDimLCID": {},
									"srcVwSchemeSchemeaccountBalance": {},
									"snkDimLoyaltyCard": {},
									"snkDimLoyaltyCardEI": {},
									"snkDimLoyaltyCardEU": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimLoyaltyCard_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load Payment Card Dimension",
				"activities": [
					{
						"name": "df_LoadDimPaymentCard",
						"description": "Data flow to load Payment Card Dimension",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimPaymentCard",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcVwHistoryHistoricalPaymentCardAccount": {},
									"srcPaymentCard": {},
									"scrPaymentCardIssuer": {},
									"srcRefPaymentCardStatus": {},
									"srcDimPaymentCard": {},
									"MaxDimPCID": {},
									"srcRefPaymentType": {},
									"snkDimPaymentCard": {},
									"snkDimPaymentCardEI": {},
									"snkDimPaymentCardEU": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update dimPaymentCard",
						"description": "Update dimPaymentCard",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadDimPaymentCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dwhpool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_UpdateDimPaymentCard]"
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "df_LoadDimPaymentCard",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Update dimPaymentCard",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load Payment Dimension"
									}
								]
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimPaymentCard')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimPaymentCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load Payment Card Dimension",
				"activities": [
					{
						"name": "df_LoadDimPaymentCard_FullLoad",
						"description": "Data flow to load Payment Card Dimension",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimPaymentCard_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcPaymentCardAccount": {},
									"srcPaymentCard": {},
									"scrPaymentCardIssuer": {},
									"srcRefPaymentCardStatus": {},
									"srcDimPaymentCard": {},
									"MaxDimPCID": {},
									"srcPaymentType": {},
									"snkDimPaymentCard": {},
									"snkDimPaymentCardEI": {},
									"snkDimPaymentCardEU": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Build DimPaymentCard",
						"description": "Execute Build DimPaymentCard",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_LoadDimPaymentCard_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimPaymentCard",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimPaymentCard_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimUser')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load user Dimension",
				"activities": [
					{
						"name": "df_LoadDimUser",
						"description": "Data flow to load Payment Card",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimUser",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcVwHistoryHistoricalCustomUser": {},
									"srcUserUserDetail": {},
									"scrUserClientapplication": {},
									"scrUserClientapplicationBundle": {},
									"srcUserOrganisation": {},
									"scrDimUser": {},
									"MaxDimUserID": {},
									"snkDimUser": {},
									"snkDimUserEI": {},
									"snkDimUserEU": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update DimUser",
						"description": "Update DimUser",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadDimUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dwhpool",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_UpdateDimUser]"
						}
					},
					{
						"name": "FailureNotification",
						"description": "Any failure is notified in Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "df_LoadDimUser",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Update DimUser",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/620d8f69096e4967b9826ca4ea07b42e/f7c46488-2054-46de-9673-e0c6e94b232c",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Data Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Load User Dimension"
									}
								]
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimUser')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load DimUser_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load User Dimension",
				"activities": [
					{
						"name": "df_LoadUser_FullLoad",
						"description": "Data flow to load User",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimUser_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcUser": {},
									"srcUserUserDetail": {},
									"scrUserClientapplication": {},
									"scrUserClientapplicationBundle": {},
									"srcUserOrganisation": {},
									"scrDimUser": {},
									"MaxDimUserID": {},
									"snkDimUser": {},
									"snkDimUserEI": {},
									"snkDimUserEU": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Build DimUser",
						"description": "Execute Build DimUser",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_LoadUser_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load DimUser",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadDimUser_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/pipelines/Load DimUser')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactLoyaltyCardPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load LoyaltyCardPaymentCard fact table",
				"activities": [
					{
						"name": "df_LoadFactLoyaltyCardPaymentCard",
						"description": "Data Flow to load fact.LoyaltyCardPaymentCard",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactLoyaltyCardPaymentCard",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalPaymentCardSchemeEntry": {},
									"srcDimLoyaltyCard": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactLoyaltyCardPaymentCard')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactLoyaltyCardPaymentCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to laod LoyaltyCardPaymentCard fact table",
				"activities": [
					{
						"name": "df_LoadFactLoyaltyCardPaymentCard_FullLoad",
						"description": "Data Flow to load fact.LoyaltyCardPaymentCard",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactLoyaltyCardPaymentCard_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcUbiquityPaymentCardSchemeEntry": {},
									"srcDimLoyaltyCard": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_LoadFactLoyaltyCardPaymentCard",
						"description": "Data Flow to load fact.LoyaltyCardPaymentCard",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_LoadFactLoyaltyCardPaymentCard_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactLoyaltyCardPaymentCard",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalPaymentCardSchemeEntry": {},
									"srcDimLoyaltyCard": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactLoyaltyCardPaymentCard_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactLoyaltyCardPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactMatchedTransaction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load FactMatchedTransaction",
				"activities": [
					{
						"name": "CheckFileExists",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_harmonia_matched_transaction",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "IfFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFileExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('CheckFileExists').output.exists,'True')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "df_LoadFactMatchedTransaction",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_LoadFactMatchedTransaction",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"srcMatchedTransaction": {},
												"srcPaymentTransaction": {},
												"srcSchemeTransaction": {},
												"srcUserIdentity": {},
												"srcDimUser": {},
												"srcDimLoyaltyCard": {},
												"srcFactMatchedTransaction": {},
												"srcMaxID": {},
												"snkMatchedTransaction": {},
												"snkMatchedTransactionE": {}
											}
										},
										"staging": {
											"linkedService": {
												"referenceName": "ls_adls_dwlanding",
												"type": "LinkedServiceReference"
											},
											"folderPath": "staging/PolyBase"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_matched_transaction')]",
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactMatchedTransaction')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactMatchedTransaction_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load FactMatchedTransaction_FullLoad",
				"activities": [
					{
						"name": "df_LoadFactMatchedTransaction_FullLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactMatchedTransaction",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcMatchedTransaction": {},
									"srcPaymentTransaction": {},
									"srcSchemeTransaction": {},
									"srcUserIdentity": {},
									"srcDimUser": {},
									"srcDimLoyaltyCard": {},
									"srcFactMatchedTransaction": {},
									"srcMaxID": {},
									"snkMatchedTransaction": {},
									"snkMatchedTransactionE": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactMatchedTransaction')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactUserLC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load UserLC fact table",
				"activities": [
					{
						"name": "df_LoadFactUserLC",
						"description": "Data Flow to load fact.UserLC",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserLC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalSchemeAccountEntry": {},
									"srcSchemeSchemeAccount": {},
									"srcDimUser": {},
									"srcDimLC": {},
									"snkFactUserLC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserLC')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactUserLC_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load UserLC fact table",
				"activities": [
					{
						"name": "df_LoadFactUserLC_FullLoad",
						"description": "Data Flow to load fact.UserLC",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserLC_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcUbiquitySchemeAccountEntry": {},
									"srcSchemeSchemeAccount": {},
									"srcDimUser": {},
									"srcDimLC": {},
									"snkFactUserLC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_LoadFactUserLC",
						"description": "Data Flow to load fact.UserLC",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_LoadFactUserLC_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserLC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalSchemeAccountEntry": {},
									"srcSchemeSchemeAccount": {},
									"srcDimUser": {},
									"srcDimLC": {},
									"snkFactUserLC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserLC_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserLC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactUserPC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load UserPC fact table",
				"activities": [
					{
						"name": "df_LoadFactUserPC",
						"description": "Data Flow to load fact.UserPC",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserPC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalPaymentCardAccountEntry": {},
									"srcPaymentCardAccount": {},
									"srcDimUser": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserPC')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load FactUserPC_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to load UserPC fact table",
				"activities": [
					{
						"name": "df_LoadFactUserPC_FullLoad",
						"description": "Data Flow to load fact.UserPC",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserPC_FullLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcUbiquityPaymentCardAccountEntry": {},
									"srcPaymentCardAccount": {},
									"srcDimUser": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_LoadFactUserPC",
						"description": "Data Flow to load fact.UserPC",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_LoadFactUserPC_FullLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactUserPC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcHistoryHistoricalPaymentCardAccountEntry": {},
									"srcPaymentCardAccount": {},
									"srcDimUser": {},
									"srcDimPC": {},
									"snkFactUserPC": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_adls_dwlanding",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/PolyBase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserPC_FullLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]",
				"[concat(variables('workspaceId'), '/dataflows/df_LoadFactUserPC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load Source data to ADLS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy data from all sources into Data Lake",
				"activities": [
					{
						"name": "Hermes",
						"description": "Execute Hermes to ADLS pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Hermes to ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Harmonia",
						"description": "Execute Harmonia to ADLS pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Harmonia to ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Hermes to ADLS')]",
				"[concat(variables('workspaceId'), '/pipelines/Harmonia to ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load Source data to ADLS_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy data from all sources into Data Lake",
				"activities": [
					{
						"name": "Hermes_FullLoad",
						"description": "Execute Hermes to ADLS pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Hermes to ADLS_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Harmonia_FullLoad",
						"description": "Execute Harmonia to ADLS pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Harmonia to ADLS_FullLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Hermes to ADLS_FullLoad')]",
				"[concat(variables('workspaceId'), '/pipelines/Harmonia to ADLS_FullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/harmonia_daily_dump_parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "HarmoniaDailyExport",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HarmoniaDailyDumpToParquet",
								"type": "DataFlowReference",
								"parameters": {
									"recordsBefore": {
										"value": "'20210127'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PGHarmoniaImportTransaction": {},
									"PGHarmoniaMerchantIdentifier": {},
									"PGHarmoniaLoyaltyScheme": {},
									"PGHarmoniaPaymentProvider": {},
									"DLHarmoniaDailyImportTransaction": {},
									"DLHarmoniaDailyMerchantIdentifier": {},
									"DLHarmoniaDailyLoyaltyScheme": {},
									"DLHarmoniaDailyPaymentProvider": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "HarmoniaDailyImport",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "HarmoniaDailyExport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadDailyHarmoniaImportTransactionToDWH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLHarmoniaImportTransaction": {},
									"DLHarmoniaMerchantIdentifier": {},
									"DLHarmoniaLoyaltyScheme": {},
									"DLHarmoniaPaymentProvider": {},
									"DWHImportTransaction": {},
									"DWHMerchantIdentifier": {},
									"DWHLoyaltyScheme": {},
									"DWHPaymentProvider": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "DataLakeProd",
									"type": "LinkedServiceReference"
								},
								"folderPath": "binkuksouthprod-datalake/temp/synapse/harmoniaimport"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continueOnError": true
						}
					},
					{
						"name": "TeamsFailure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "HarmoniaDailyImport",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "HarmoniaDailyExport",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/5284ca0f02cc40de8b85ecd18bf0ec55/f7c46488-2054-46de-9673-e0c6e94b232c",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"@@type": "MessageCard",
								"@@context": "http://schema.org/extensions",
								"themeColor": "d70000",
								"summary": "Pipeline failed",
								"sections": [
									{
										"activityTitle": "Pipeline failed",
										"activitySubtitle": "Harmonia import transactions"
									}
								]
							}
						}
					}
				],
				"folder": {
					"name": "Harmonia"
				},
				"annotations": [],
				"lastPublishTime": "2021-03-02T10:08:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/HarmoniaDailyDumpToParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/LoadDailyHarmoniaImportTransactionToDWH')]",
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dl_harmonia__daily__import_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('temp/harmonia/import_transaction/date=', getPastTime(1, 'Day', 'yyyy-MM-dd'), '/')",
							"type": "Expression"
						},
						"fileSystem": "binkuksouthprod-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dl_harmonia__daily__loyalty_scheme')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('temp/harmonia/loyalty_scheme/date=', getPastTime(1, 'Day', 'yyyy-MM-dd'), '/')",
							"type": "Expression"
						},
						"fileSystem": "binkuksouthprod-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dl_harmonia__daily__merchant_identifier')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('temp/harmonia/merchant_identifier/date=', getPastTime(1, 'Day', 'yyyy-MM-dd'), '/')",
							"type": "Expression"
						},
						"fileSystem": "binkuksouthprod-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dl_harmonia__daily__payment_provider')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('temp/harmonia/payment_provider/date=', getPastTime(1, 'Day', 'yyyy-MM-dd'), '/')",
							"type": "Expression"
						},
						"fileSystem": "binkuksouthprod-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set using Linked Service ls_Syn_DataWarehouse to connect to Dim.LCVoucher",
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoyaltyCardID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VoucherCode",
						"type": "varchar"
					},
					{
						"name": "BurnType",
						"type": "varchar"
					},
					{
						"name": "BurnValue",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "BurnPrefix",
						"type": "varchar"
					},
					{
						"name": "BurnSuffix",
						"type": "varchar"
					},
					{
						"name": "BurnCurrency",
						"type": "varchar"
					},
					{
						"name": "EarnType",
						"type": "varchar"
					},
					{
						"name": "EarnValue",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "EarnPrefix",
						"type": "varchar"
					},
					{
						"name": "EarnSuffix",
						"type": "varchar"
					},
					{
						"name": "EarnCurrency",
						"type": "varchar"
					},
					{
						"name": "EarnTargetValue",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "VoucherState",
						"type": "varchar"
					},
					{
						"name": "Subtext",
						"type": "varchar"
					},
					{
						"name": "Headline",
						"type": "varchar"
					},
					{
						"name": "BodyText",
						"type": "varchar"
					},
					{
						"name": "IssueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RedeemDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ExpiryDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BarcodeType",
						"type": "varchar"
					},
					{
						"name": "TCUrl",
						"type": "varchar"
					},
					{
						"name": "EffFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "Dim",
					"table": "LCVoucher"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set using Linked Service ls_Syn_DataWarehouse to connect to Dim.LoyaltyCard",
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CardNumber",
						"type": "varchar"
					},
					{
						"name": "PlanName",
						"type": "varchar"
					},
					{
						"name": "PlanDescription",
						"type": "varchar"
					},
					{
						"name": "LCStatus",
						"type": "varchar"
					},
					{
						"name": "Merchant",
						"type": "varchar"
					},
					{
						"name": "Category",
						"type": "varchar"
					},
					{
						"name": "BonusName",
						"type": "varchar"
					},
					{
						"name": "BalanceValue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalancePoints",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Balance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceIsStale",
						"type": "bit"
					},
					{
						"name": "BalanceUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BalanceRewardTier",
						"type": "varchar"
					},
					{
						"name": "BalanceValueLabel",
						"type": "varchar"
					},
					{
						"name": "BalancePointsLabel",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "LCCreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AddDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "JoinDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "SourceLCKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RestrictionKey",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dim",
					"table": "LoyaltyCard"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_DimUser')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set using Linked Service ls_Syn_DataWarehouse to connect to Dim.User",
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "Facebook",
						"type": "varchar"
					},
					{
						"name": "Twitter",
						"type": "varchar"
					},
					{
						"name": "AddressLine1",
						"type": "varchar"
					},
					{
						"name": "AddressLine2",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Region",
						"type": "varchar"
					},
					{
						"name": "Postcode",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Channel",
						"type": "varchar"
					},
					{
						"name": "Organisation",
						"type": "varchar"
					},
					{
						"name": "Client",
						"type": "varchar"
					},
					{
						"name": "ExternalID",
						"type": "varchar"
					},
					{
						"name": "UserCreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UserUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "DeleteToken",
						"type": "varchar"
					},
					{
						"name": "EffFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsStaff",
						"type": "bit"
					},
					{
						"name": "IsTester",
						"type": "bit"
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "SourceUserKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RestrictionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsRTBF",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "Dim",
					"table": "User"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_FactLoyaltyCardPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoyaltyCardID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCardID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "IsActiveLink",
						"type": "bit"
					},
					{
						"name": "Change",
						"type": "char"
					},
					{
						"name": "CreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "LoyaltyCardPaymentCard"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_FactMatchedTransaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MerchantIdentifierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TransactionID",
						"type": "char"
					},
					{
						"name": "PaymentTransactionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SchemeTransactionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "spend_amount",
						"type": "decimal",
						"precision": 18,
						"scale": 4
					},
					{
						"name": "spend_multiplier",
						"type": "decimal",
						"precision": 18,
						"scale": 4
					},
					{
						"name": "spend_currency",
						"type": "char"
					},
					{
						"name": "card_token",
						"type": "varchar"
					},
					{
						"name": "MatchingType",
						"type": "char"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ExportDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsMTExported",
						"type": "bit"
					},
					{
						"name": "SourceMTKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DimUserID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DimLoyaltyCardID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "MatchedTransaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_FactUserLC')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoyaltyCardID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LCJoinDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LCAddDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsCreated",
						"type": "bit"
					},
					{
						"name": "CreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "UserLC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_FactUserPC')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCardID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "IsCreated",
						"type": "bit"
					},
					{
						"name": "CreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "UserPC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_Syn_DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set using Linked Service ls_Syn_DataWarehouse to connect to Dim.PaymentCard",
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "NameOnCard",
						"type": "varchar"
					},
					{
						"name": "PANTruncation",
						"type": "varchar"
					},
					{
						"name": "ValidFrom",
						"type": "date"
					},
					{
						"name": "ValidTo",
						"type": "date"
					},
					{
						"name": "Token",
						"type": "varchar"
					},
					{
						"name": "Fingerprint",
						"type": "varchar"
					},
					{
						"name": "Issuer",
						"type": "varchar"
					},
					{
						"name": "CardProvider",
						"type": "varchar"
					},
					{
						"name": "Slug",
						"type": "varchar"
					},
					{
						"name": "CardType",
						"type": "varchar"
					},
					{
						"name": "CardStatus",
						"type": "varchar"
					},
					{
						"name": "IsDeleted",
						"type": "bit"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CCYCode",
						"type": "varchar"
					},
					{
						"name": "CardCreateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CardUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EffToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProcessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "SourcePCKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RestrictionKey",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dim",
					"table": "PaymentCard"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_harmonia')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Harmonia",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Harmonia/@{dataset().FileName}/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_harmonia_matched_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Harmonia public.matched_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Harmonia/public_matched_transaction/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_harmonia_payment_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Harmonia public.payment_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Harmonia/public_payment_transaction/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_harmonia_scheme_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Harmonia public.scheme_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Harmonia/public_scheme_transaction/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_harmonia_user_identity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Harmonia public.user_identity table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Harmonia/public_user_identity/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/@{dataset().FileName}/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalcustomuser/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes history_historicalpaymentcardaccount table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalpaymentcardaccount/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "created",
						"type": "INT96"
					},
					{
						"name": "change_type",
						"type": "UTF8"
					},
					{
						"name": "instance_id",
						"type": "UTF8"
					},
					{
						"name": "channel",
						"type": "UTF8"
					},
					{
						"name": "user_id",
						"type": "INT32"
					},
					{
						"name": "body",
						"type": "UTF8"
					},
					{
						"name": "change_details",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalpaymentcardaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.history_historicalpaymentcardaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalpaymentcardaccountentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalpaymentcardschemeentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalpaymentcardschemeentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "created",
						"type": "INT96"
					},
					{
						"name": "change_type",
						"type": "UTF8"
					},
					{
						"name": "instance_id",
						"type": "UTF8"
					},
					{
						"name": "channel",
						"type": "UTF8"
					},
					{
						"name": "change_details",
						"type": "UTF8"
					},
					{
						"name": "user_id",
						"type": "INT32"
					},
					{
						"name": "scheme_account_id",
						"type": "INT32"
					},
					{
						"name": "payment_card_account_id",
						"type": "INT32"
					},
					{
						"name": "active_link",
						"type": "BOOLEAN"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.history_historicalschemeaccount table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalschemeaccount/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_history_historicalschemeaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.history_historicalschemeaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_history_historicalschemeaccountentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "created",
						"type": "INT96"
					},
					{
						"name": "change_type",
						"type": "UTF8"
					},
					{
						"name": "instance_id",
						"type": "UTF8"
					},
					{
						"name": "channel",
						"type": "UTF8"
					},
					{
						"name": "user_id",
						"type": "INT32"
					},
					{
						"name": "scheme_account_id",
						"type": "INT32"
					},
					{
						"name": "change_details",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_paymentcard')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.payment_card_paymentcard table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_payment_card_paymentcard/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_paymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.payment_card_paymentcardaccount table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_payment_card_paymentcardaccount/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "name_on_card",
						"type": "UTF8"
					},
					{
						"name": "start_month",
						"type": "INT32"
					},
					{
						"name": "start_year",
						"type": "INT32"
					},
					{
						"name": "expiry_month",
						"type": "INT32"
					},
					{
						"name": "expiry_year",
						"type": "INT32"
					},
					{
						"name": "status",
						"type": "INT32"
					},
					{
						"name": "order",
						"type": "INT32"
					},
					{
						"name": "created",
						"type": "INT96"
					},
					{
						"name": "updated",
						"type": "INT96"
					},
					{
						"name": "issuer_id",
						"type": "INT32"
					},
					{
						"name": "payment_card_id",
						"type": "INT32"
					},
					{
						"name": "token",
						"type": "UTF8"
					},
					{
						"name": "country",
						"type": "UTF8"
					},
					{
						"name": "currency_code",
						"type": "UTF8"
					},
					{
						"name": "pan_end",
						"type": "UTF8"
					},
					{
						"name": "pan_start",
						"type": "UTF8"
					},
					{
						"name": "is_deleted",
						"type": "BOOLEAN"
					},
					{
						"name": "fingerprint",
						"type": "UTF8"
					},
					{
						"name": "psp_token",
						"type": "UTF8"
					},
					{
						"name": "consents",
						"type": "UTF8"
					},
					{
						"name": "hash",
						"type": "UTF8"
					},
					{
						"name": "formatted_images",
						"type": "UTF8"
					},
					{
						"name": "pll_links",
						"type": "UTF8"
					},
					{
						"name": "agent_data",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_paymentcardissuer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.payment_card_issuer table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_payment_card_issuer/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_scheme_category')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.scheme_category table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_scheme_category/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_scheme_scheme')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.scheme_scheme table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_scheme_scheme/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_scheme_schemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.scheme_schemeaccount table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_scheme_schemeaccount/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_ubiquity_paymentcardaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.ubiquity_paymentcardaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_ubiquity_paymentcardaccountentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "payment_card_account_id",
						"type": "INT32"
					},
					{
						"name": "user_id",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_ubiquity_paymentcardschemeentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_ubiquity_paymentcardschemeentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "active_link",
						"type": "BOOLEAN"
					},
					{
						"name": "payment_card_account_id",
						"type": "INT32"
					},
					{
						"name": "scheme_account_id",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_ubiquity_schemeaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.ubiquity_schemeaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_ubiquity_schemeaccountentry/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "scheme_account_id",
						"type": "INT32"
					},
					{
						"name": "user_id",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_user')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_user/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_user_clientapplication')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user_clientapplication table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_user_clientapplication/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_user_clientapplicationbundle')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user_clientapplicationbundle table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_user_clientapplicationbundle/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_user_organisation')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user_organisation table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_user_organisation/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_user_userdetail')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes public.user_userdetail table",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Hermes/public_user_userdetail/@{formatDateTime(adddays(utcnow(),-1), 'yyyy')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMM')}/@{formatDateTime(adddays(utcnow(),-1), 'yyyyMMdd')}",
							"type": "Expression"
						},
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_hermes_vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Hermes external table  vw_history_historicalpaymentcardaccount table",
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name_on_card",
						"type": "varchar"
					},
					{
						"name": "start_month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "start_year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "expiry_month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "expiry_year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created",
						"type": "varchar"
					},
					{
						"name": "updated",
						"type": "varchar"
					},
					{
						"name": "issuer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "payment_card_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "token",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "currency_code",
						"type": "varchar"
					},
					{
						"name": "pan_end",
						"type": "varchar"
					},
					{
						"name": "pan_start",
						"type": "varchar"
					},
					{
						"name": "is_deleted",
						"type": "bit"
					},
					{
						"name": "fingerprint",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_history_historicalpaymentcardaccount"
				},
				"sqlPool": {
					"referenceName": "dwhpool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dwhpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_LoyaltyCardStatus')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Reference Loyalty Card Status.csv",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Loyalty Card Status.csv",
						"folderPath": "Reference",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_PaymentCardStatus')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Reference Payment Card Status.csv",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Payment Card Status.csv",
						"folderPath": "Reference",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_PaymentCardType')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Landing/Data Lake Reference Payment Card Type.csv",
				"linkedServiceName": {
					"referenceName": "ls_adls_dwlanding",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Payment Card Type.csv",
						"folderPath": "Reference",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BIN",
						"type": "String"
					},
					{
						"name": "CardType",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_dwlanding')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_Harmonia_matched_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Harmonia matched_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_pg_harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "merchant_identifier_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_date",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_amount",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_multiplier",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_currency",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "card_token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "matching_type",
						"type": "USER-DEFINED",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "USER-DEFINED",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_transaction_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "scheme_transaction_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra_fields",
						"type": "json",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "matched_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_Harmonia_payment_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Harmonia payment_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_pg_harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "merchant_identifier_ids",
						"type": "ARRAY",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_date",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_amount",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_multiplier",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_currency",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "card_token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "USER-DEFINED",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_identity_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra_fields",
						"type": "json",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "settlement_key",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provider_slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auth_code",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "has_time",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "match_group",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "first_six",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_four",
						"type": "text",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "payment_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_Harmonia_scheme_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Harmonia scheme_transaction table",
				"linkedServiceName": {
					"referenceName": "ls_pg_harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "merchant_identifier_ids",
						"type": "ARRAY",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_date",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_amount",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_multiplier",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "spend_currency",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "USER-DEFINED",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra_fields",
						"type": "json",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provider_slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_provider_slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auth_code",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "has_time",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "match_group",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "first_six",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_four",
						"type": "text",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "scheme_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_Harmonia_user_identity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Harmonia user_identity table",
				"linkedServiceName": {
					"referenceName": "ls_pg_harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "loyalty_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "scheme_account_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "credentials",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "first_six",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_four",
						"type": "text",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "user_identity"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_harmonia')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Harmonia",
				"linkedServiceName": {
					"referenceName": "ls_pg_harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes history_historicalcustomuser table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "body",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "email",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "external_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalcustomuser"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes history_historicalpaymentcardaccount table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "body",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalpaymentcardaccount"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalpaymentcardaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes history_historicalpaymentcardaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_card_account_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalpaymentcardaccountentry"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalpaymentcardschemeentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "scheme_account_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_card_account_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "active_link",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalpaymentcardschemeentry"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes history_historicalschemeaccount table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "body",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "journey",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalschemeaccount"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_history_historicalschemeaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes history_historicalschemeaccountentry table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "instance_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "channel",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "scheme_account_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "change_details",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "history_historicalschemeaccountentry"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_payment_card_paymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes payment_card_paymentcardaccount table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "name_on_card",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_month",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_year",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "expiry_month",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "expiry_year",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "order",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "issuer_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_card_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "country",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "currency_code",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pan_end",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pan_start",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_deleted",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "fingerprint",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "psp_token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "consents",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "hash",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "formatted_images",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pll_links",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "agent_data",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "payment_card_paymentcardaccount"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_scheme_schemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes scheme_schemeaccount table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "order",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "scheme_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_deleted",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "link_date",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "join_date",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "balances",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "vouchers",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "barcode",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "card_number",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transactions",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "main_answer",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pll_links",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "formatted_images",
						"type": "jsonb",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "scheme_schemeaccount"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_user')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes user table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "password",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_login",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_superuser",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "email",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_active",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "date_joined",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_staff",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "uid",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "facebook",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "twitter",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "reset_token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "marketing_code_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "client_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "salt",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "external_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_tester",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "apple",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "delete_token",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "magic_link_verified",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "user"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_pg_hermes_user_userdetail')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Set (Integration) for Source/PostgreSQL Hermes user_userdetail table",
				"linkedServiceName": {
					"referenceName": "ls_pg_hermes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "first_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "date_of_birth",
						"type": "date",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "phone",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "address_line_1",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "address_line_2",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "city",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "region",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "postcode",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "country",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "notifications",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pass_code",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "currency",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "user_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "gender",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "user_userdetail"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_pg_hermes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_syn_dwhpool_vw_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "instance_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "client_id",
						"type": "varchar"
					},
					{
						"name": "twitter",
						"type": "varchar"
					},
					{
						"name": "facebook",
						"type": "varchar"
					},
					{
						"name": "is_staff",
						"type": "bit"
					},
					{
						"name": "is_active",
						"type": "bit"
					},
					{
						"name": "is_tester",
						"type": "bit"
					},
					{
						"name": "date_joined",
						"type": "varchar"
					},
					{
						"name": "external_id",
						"type": "varchar"
					},
					{
						"name": "delete_token",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_history_historicalcustomuser"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_syn_dwhpool_vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name_on_card",
						"type": "varchar"
					},
					{
						"name": "start_month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "start_year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "expiry_month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "expiry_year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created",
						"type": "varchar"
					},
					{
						"name": "updated",
						"type": "varchar"
					},
					{
						"name": "issuer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "payment_card_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "token",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "currency_code",
						"type": "varchar"
					},
					{
						"name": "pan_end",
						"type": "varchar"
					},
					{
						"name": "pan_start",
						"type": "varchar"
					},
					{
						"name": "is_deleted",
						"type": "bit"
					},
					{
						"name": "fingerprint",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_history_historicalpaymentcardaccount"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_syn_dwhpool_vw_scheme_schemeaccount_balance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SAID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SACreated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SAUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BalanceValue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalancePoints",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Balance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceIsStale",
						"type": "bit"
					},
					{
						"name": "BalanceUserSet",
						"type": "varchar"
					},
					{
						"name": "BalanceSchemeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BalanceUpdateDate",
						"type": "varchar"
					},
					{
						"name": "BalanceRewardTeir",
						"type": "varchar"
					},
					{
						"name": "BalanceValueLabel",
						"type": "varchar"
					},
					{
						"name": "BalancePointsLabel",
						"type": "varchar"
					},
					{
						"name": "BalanceSAID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_scheme_schemeaccount_balance"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_syn_dwhpool_vw_scheme_schemeaccount_voucher')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Syn_DataWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SAID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SACreated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SAUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VoucherCode",
						"type": "varchar"
					},
					{
						"name": "BurnType",
						"type": "varchar"
					},
					{
						"name": "BurnValue",
						"type": "varchar"
					},
					{
						"name": "BurnPrefix",
						"type": "varchar"
					},
					{
						"name": "BurnSuffix",
						"type": "varchar"
					},
					{
						"name": "BurnCurrency",
						"type": "varchar"
					},
					{
						"name": "EarnType",
						"type": "varchar"
					},
					{
						"name": "EarnValue",
						"type": "varchar"
					},
					{
						"name": "EarnPrefix",
						"type": "varchar"
					},
					{
						"name": "EarnSuffix",
						"type": "varchar"
					},
					{
						"name": "EarnCurrency",
						"type": "varchar"
					},
					{
						"name": "EarnTargetValue",
						"type": "varchar"
					},
					{
						"name": "VoucherState",
						"type": "varchar"
					},
					{
						"name": "SubText",
						"type": "varchar"
					},
					{
						"name": "Headline",
						"type": "varchar"
					},
					{
						"name": "BodyText",
						"type": "varchar"
					},
					{
						"name": "IssueDate",
						"type": "varchar"
					},
					{
						"name": "ExpiryDate",
						"type": "varchar"
					},
					{
						"name": "RedeemDate",
						"type": "varchar"
					},
					{
						"name": "BarcodeType",
						"type": "varchar"
					},
					{
						"name": "TCUrl",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_scheme_schemeaccount_voucher"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Syn_DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhsql_harmonia__import_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWHSQLPool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "harmonia",
					"table": "import_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWHSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhsql_harmonia__loyalty_scheme')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWHSQLPool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "updated_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "slug",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "harmonia",
					"table": "loyalty_scheme"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWHSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhsql_harmonia__merchant_identifier')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWHSQLPool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "harmonia",
					"table": "merchant_identifier"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWHSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhsql_harmonia__payment_provider')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWHSQLPool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "updated_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "slug",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "harmonia",
					"table": "payment_provider"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWHSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pg_harmonia__import_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provider_slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "identified",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "data",
						"type": "json",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "match_group",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "import_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pg_harmonia__loyalty_scheme')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "loyalty_scheme"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pg_harmonia__merchant_identifier')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "mid",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "loyalty_scheme_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "payment_provider_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "location",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "postcode",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "store_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "merchant_identifier"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pg_harmonia__payment_provider')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "payment_provider"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWHSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DWHSQLPool_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeProd')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLakeProd_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Harmonia')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Harmonia Azure Postgres Database",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('Harmonia_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultProd",
							"type": "LinkedServiceReference"
						},
						"secretName": "synapse-postgres-harmonia"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/KeyVaultProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KeyVaultProd')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Azure KeyVault containing prod database credentials",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KeyVaultProd_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/binkuksouthprodsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('binkuksouthprodsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/binkuksouthprodsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('binkuksouthprodsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_Syn_DataWarehouse')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Linked Service to connect/sink data to Data Warehouse",
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_Syn_DataWarehouse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_adls_dwlanding')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Linked Service for Landing Hermes in Data Lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_dwlanding_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_pg_harmonia')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Linked Service for Source Harmonia in PostgreSQL",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('ls_pg_harmonia_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultProd",
							"type": "LinkedServiceReference"
						},
						"secretName": "synapse-postgres-harmonia"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/KeyVaultProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_pg_hermes')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Linked Service for Source Hermes in PostgreSQL",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('ls_pg_hermes_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultProd",
							"type": "LinkedServiceReference"
						},
						"secretName": "synapse-postgres-hermes"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/KeyVaultProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Daily load')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "To load the source data daily",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Build Data Warehouse",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-05T01:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Build Data Warehouse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HarmoniaDailyDump')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Dump Harmonia daily",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "harmonia_daily_dump_parquet",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-02T01:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/harmonia_daily_dump_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HarmoniaDailyDumpToParquet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pg_harmonia__import_transaction",
								"type": "DatasetReference"
							},
							"name": "PGHarmoniaImportTransaction"
						},
						{
							"dataset": {
								"referenceName": "pg_harmonia__merchant_identifier",
								"type": "DatasetReference"
							},
							"name": "PGHarmoniaMerchantIdentifier"
						},
						{
							"dataset": {
								"referenceName": "pg_harmonia__loyalty_scheme",
								"type": "DatasetReference"
							},
							"name": "PGHarmoniaLoyaltyScheme"
						},
						{
							"dataset": {
								"referenceName": "pg_harmonia__payment_provider",
								"type": "DatasetReference"
							},
							"name": "PGHarmoniaPaymentProvider"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__import_transaction",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaDailyImportTransaction"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__merchant_identifier",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaDailyMerchantIdentifier"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__loyalty_scheme",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaDailyLoyaltyScheme"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__payment_provider",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaDailyPaymentProvider"
						}
					],
					"transformations": [],
					"script": "parameters{\n\trecordsBefore as string\n}\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\ttransaction_id as string,\n\t\tprovider_slug as string,\n\t\tidentified as boolean,\n\t\tsource as string,\n\t\tdata as string,\n\t\tmatch_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_COMMITTED',\n\tquery: (concat(\"SELECT * FROM import_transaction WHERE (created_at BETWEEN '\", toString(subDays(currentDate(), 1)), \"' AND '\", toString(currentDate()), \"') OR (updated_at IS NOT NULL AND updated_at BETWEEN '\", toString(subDays(currentDate(), 1)), \"' AND '\", toString(currentDate()), \"')\")),\n\tformat: 'query') ~> PGHarmoniaImportTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmid as string,\n\t\tloyalty_scheme_id as integer,\n\t\tpayment_provider_id as integer,\n\t\tlocation as string,\n\t\tpostcode as string,\n\t\tstore_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 5000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PGHarmoniaMerchantIdentifier\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PGHarmoniaLoyaltyScheme\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PGHarmoniaPaymentProvider\nPGHarmoniaImportTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DLHarmoniaDailyImportTransaction\nPGHarmoniaMerchantIdentifier sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DLHarmoniaDailyMerchantIdentifier\nPGHarmoniaLoyaltyScheme sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DLHarmoniaDailyLoyaltyScheme\nPGHarmoniaPaymentProvider sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DLHarmoniaDailyPaymentProvider"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/pg_harmonia__import_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/pg_harmonia__merchant_identifier')]",
				"[concat(variables('workspaceId'), '/datasets/pg_harmonia__loyalty_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/pg_harmonia__payment_provider')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__import_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__merchant_identifier')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__loyalty_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__payment_provider')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccount table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoricalPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoricalPaymentCardAccount\nSrcHistoricalPaymentCardAccount filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS_history_historicalpaymentcardaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccount table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoricalPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoricalPaymentCardAccount\nSrcHistoricalPaymentCardAccount filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS_payment_card_paymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy payment_card_paymentcardaccount table from hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_payment_card_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentCardAccount\nSrcPaymentCardAccount filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_payment_card_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hermes to ADLS_payment_card_paymentcardaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy payment_card_paymentcardaccount table from hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_payment_card_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentCardAccount\nSrcPaymentCardAccount filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_payment_card_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadDailyHarmoniaImportTransactionToDWH')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__import_transaction",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaImportTransaction"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__merchant_identifier",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaMerchantIdentifier"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__loyalty_scheme",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaLoyaltyScheme"
						},
						{
							"dataset": {
								"referenceName": "dl_harmonia__daily__payment_provider",
								"type": "DatasetReference"
							},
							"name": "DLHarmoniaPaymentProvider"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dwhsql_harmonia__import_transaction",
								"type": "DatasetReference"
							},
							"name": "DWHImportTransaction"
						},
						{
							"dataset": {
								"referenceName": "dwhsql_harmonia__merchant_identifier",
								"type": "DatasetReference"
							},
							"name": "DWHMerchantIdentifier"
						},
						{
							"dataset": {
								"referenceName": "dwhsql_harmonia__loyalty_scheme",
								"type": "DatasetReference"
							},
							"name": "DWHLoyaltyScheme"
						},
						{
							"dataset": {
								"referenceName": "dwhsql_harmonia__payment_provider",
								"type": "DatasetReference"
							},
							"name": "DWHPaymentProvider"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "AlterRow4"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\ttransaction_id as string,\n\t\tprovider_slug as string,\n\t\tidentified as boolean,\n\t\tsource as string,\n\t\tdata as string,\n\t\tmatch_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLHarmoniaImportTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmid as string,\n\t\tloyalty_scheme_id as integer,\n\t\tpayment_provider_id as integer,\n\t\tlocation as string,\n\t\tpostcode as string,\n\t\tstore_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLHarmoniaMerchantIdentifier\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLHarmoniaLoyaltyScheme\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLHarmoniaPaymentProvider\nDLHarmoniaImportTransaction alterRow(upsertIf(not(isNull(updated_at)))) ~> AlterRow1\nDLHarmoniaMerchantIdentifier alterRow(upsertIf(true())) ~> AlterRow2\nDLHarmoniaLoyaltyScheme alterRow(upsertIf(true())) ~> AlterRow3\nDLHarmoniaPaymentProvider alterRow(upsertIf(true())) ~> AlterRow4\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tbatchSize: 2000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tid,\n\t\tcreated_at,\n\t\tupdated_at,\n\t\ttransaction_id,\n\t\tprovider_slug,\n\t\tidentified,\n\t\tsource,\n\t\tdata,\n\t\tmatch_group\n\t)) ~> DWHImportTransaction\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['id'],\n\tformat: 'table',\n\tstaged: true,\n\tbatchSize: 2000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DWHMerchantIdentifier\nAlterRow3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['id'],\n\tformat: 'table',\n\tstaged: true,\n\tbatchSize: 2000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DWHLoyaltyScheme\nAlterRow4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tslug as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['id'],\n\tformat: 'table',\n\tstaged: true,\n\tbatchSize: 2000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DWHPaymentProvider"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__import_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__merchant_identifier')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__loyalty_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/dl_harmonia__daily__payment_provider')]",
				"[concat(variables('workspaceId'), '/datasets/dwhsql_harmonia__import_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/dwhsql_harmonia__merchant_identifier')]",
				"[concat(variables('workspaceId'), '/datasets/dwhsql_harmonia__loyalty_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/dwhsql_harmonia__payment_provider')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_matched_transaction')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Matched Transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_matched_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcMatchedTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_matched_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_id as integer,\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tmatching_type as string,\n\t\tstatus as string,\n\t\tpayment_transaction_id as integer,\n\t\tscheme_transaction_id as integer,\n\t\textra_fields as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcMatchedTransaction\nSrcMatchedTransaction filter(or(and(toDate(created_at) >= toDate(subDays(currentUTC(),1)), toDate(created_at) < toDate(currentUTC())),and(toDate(updated_at) >= toDate(subDays(currentUTC(),1)), toDate(updated_at) < toDate(currentUTC())))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_matched_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_matched_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_matched_transaction_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Matched Transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_matched_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcMatchedTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_matched_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_id as integer,\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tmatching_type as string,\n\t\tstatus as string,\n\t\tpayment_transaction_id as integer,\n\t\tscheme_transaction_id as integer,\n\t\textra_fields as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcMatchedTransaction\nSrcMatchedTransaction filter(or(\n    toDate(created_at) < toDate(currentUTC()),\n    toDate(updated_at) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_matched_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_matched_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_payment_transaction')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Payment Transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_payment_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_payment_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tstatus as string,\n\t\tuser_identity_id as integer,\n\t\textra_fields as string,\n\t\tsettlement_key as string,\n\t\tprovider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentTransaction\nSrcPaymentTransaction filter(or(and(toDate(created_at) >= toDate(subDays(currentUTC(),1)), toDate(created_at) < toDate(currentUTC())),and(toDate(updated_at) >= toDate(subDays(currentUTC(),1)), toDate(updated_at) < toDate(currentUTC())))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_payment_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_payment_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_payment_transaction_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Payment Transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_payment_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_payment_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tstatus as string,\n\t\tuser_identity_id as integer,\n\t\textra_fields as string,\n\t\tsettlement_key as string,\n\t\tprovider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentTransaction\nSrcPaymentTransaction filter(or(\n    toDate(created_at) < toDate(currentUTC()),\n    toDate(updated_at) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_payment_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_payment_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_scheme_transaction')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "scheme_transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_scheme_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcSchemeTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_scheme_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tstatus as string,\n\t\textra_fields as string,\n\t\tprovider_slug as string,\n\t\tpayment_provider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcSchemeTransaction\nSrcSchemeTransaction filter(or(and(toDate(created_at) >= toDate(subDays(currentUTC(),1)), toDate(created_at) < toDate(currentUTC())),and(toDate(updated_at) >= toDate(subDays(currentUTC(),1)), toDate(updated_at) < toDate(currentUTC())))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_scheme_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_scheme_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_scheme_transaction_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "scheme_transaction table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_scheme_transaction",
								"type": "DatasetReference"
							},
							"name": "SrcSchemeTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_scheme_transaction",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tstatus as string,\n\t\textra_fields as string,\n\t\tprovider_slug as string,\n\t\tpayment_provider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcSchemeTransaction\nSrcSchemeTransaction filter(or(\n    toDate(created_at) < toDate(currentUTC()),\n    toDate(updated_at) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_scheme_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_scheme_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_user_identity')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "user_identity table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_user_identity",
								"type": "DatasetReference"
							},
							"name": "SrcUserIdentity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_user_identity",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tloyalty_id as string,\n\t\tscheme_account_id as integer,\n\t\tuser_id as integer,\n\t\tcredentials as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUserIdentity\nSrcUserIdentity filter(or(and(toDate(created_at) >= toDate(subDays(currentUTC(),1)), toDate(created_at) < toDate(currentUTC())),and(toDate(updated_at) >= toDate(subDays(currentUTC(),1)), toDate(updated_at) < toDate(currentUTC())))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_user_identity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_user_identity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Harmonia to ADLS_user_identity_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "user_identity table from Harmonia to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_Harmonia_user_identity",
								"type": "DatasetReference"
							},
							"name": "SrcUserIdentity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_user_identity",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tloyalty_id as string,\n\t\tscheme_account_id as integer,\n\t\tuser_id as integer,\n\t\tcredentials as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUserIdentity\nSrcUserIdentity filter(or(\n    toDate(created_at) < toDate(currentUTC()),\n    toDate(updated_at) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_Harmonia_user_identity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_user_identity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "history_historicalcustomuser table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalcustomuser",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalCustomUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalcustomuser",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tbody as string,\n\t\temail as string,\n\t\texternal_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalCustomUser\nSrcHistoryHistoricalCustomUser filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalcustomuser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalcustomuser')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalcustomuser_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "history_historicalcustomuser table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalcustomuser",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalCustomUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalcustomuser",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tbody as string,\n\t\temail as string,\n\t\texternal_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalCustomUser\nSrcHistoryHistoricalCustomUser filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalcustomuser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalcustomuser')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccount table from Hermes to ADLS (added df_)",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoricalPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoricalPaymentCardAccount\nSrcHistoricalPaymentCardAccount filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccount table from Hermes to ADLS (added df_)",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoricalPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoricalPaymentCardAccount\nSrcHistoricalPaymentCardAccount filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccountentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalPaymentCardAccountEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalPaymentCardAccountEntry\nSrcHistoryHistoricalPaymentCardAccountEntry filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccountentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardaccountentry_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardaccountentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalPaymentCardAccountEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalPaymentCardAccountEntry\nSrcHistoryHistoricalPaymentCardAccountEntry filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccountentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardschemeentry')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardschemeentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalPaymentcardSchemeEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalPaymentcardSchemeEntry\nSrcHistoryHistoricalPaymentcardSchemeEntry filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardschemeentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardschemeentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalpaymentcardschemeentry_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalpaymentcardschemeentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalpaymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalPaymentcardSchemeEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalPaymentcardSchemeEntry\nSrcHistoryHistoricalPaymentcardSchemeEntry filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalpaymentcardschemeentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardschemeentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalschemeaccount table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalschemeaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalSchemeAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalschemeaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string,\n\t\tjourney as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalSchemeAccount\nSrcHistoryHistoricalSchemeAccount filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalschemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalschemeaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalschemeaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalschemeaccount table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalschemeaccount",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalSchemeAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalschemeaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tbody as string,\n\t\tchange_details as string,\n\t\tjourney as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalSchemeAccount\nSrcHistoryHistoricalSchemeAccount filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalschemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalschemeaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalschemeaccountentry')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalschemeaccountentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalschemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalSchemeAccountEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalschemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalSchemeAccountEntry\nSrcHistoryHistoricalSchemeAccountEntry filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalschemeaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalschemeaccountentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_history_historicalschemeaccountentry_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy history_historicalschemeaccountentry table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_history_historicalschemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "SrcHistoryHistoricalSchemeAccountEntry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalschemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcHistoryHistoricalSchemeAccountEntry\nSrcHistoryHistoricalSchemeAccountEntry filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_history_historicalschemeaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalschemeaccountentry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_payment_card_paymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy payment_card_paymentcardaccount table from hermes to ADLS (added df_)",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_payment_card_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentCardAccount\nSrcPaymentCardAccount filter(and(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_payment_card_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_payment_card_paymentcardaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy payment_card_paymentcardaccount table from hermes to ADLS (added df_)",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_payment_card_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "SrcPaymentCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcPaymentCardAccount\nSrcPaymentCardAccount filter(toDate(created) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_payment_card_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_scheme_schemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy scheme_schemeaccount table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "SrcLoyaltyCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcLoyaltyCardAccount\nSrcLoyaltyCardAccount filter(or(\nand(toDate(created) >= toDate(subDays(currentUTC(),1)), toDate(created) < toDate(currentUTC())),\nand(toDate(updated) >= toDate(subDays(currentUTC(),1)), toDate(updated) < toDate(currentUTC())))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_scheme_schemeaccount_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy scheme_schemeaccount table from hermes",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "SrcLoyaltyCardAccount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcLoyaltyCardAccount\nSrcLoyaltyCardAccount filter(or(\n    toDate(created) < toDate(currentUTC()),\n    toDate(updated) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_user')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "User table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user",
								"type": "DatasetReference"
							},
							"name": "SrcUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tpassword as string,\n\t\tlast_login as timestamp,\n\t\tis_superuser as boolean,\n\t\temail as string,\n\t\tis_active as boolean,\n\t\tdate_joined as timestamp,\n\t\tis_staff as boolean,\n\t\tuid as string,\n\t\tfacebook as string,\n\t\ttwitter as string,\n\t\treset_token as string,\n\t\tmarketing_code_id as integer,\n\t\tclient_id as string,\n\t\tsalt as string,\n\t\texternal_id as string,\n\t\tis_tester as boolean,\n\t\tapple as string,\n\t\tdelete_token as string,\n\t\tmagic_link_verified as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUser\nSrcUser filter(and(toDate(date_joined) >= toDate(subDays(currentUTC(),1)), toDate(date_joined) < toDate(currentUTC()))) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_user_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "User table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user",
								"type": "DatasetReference"
							},
							"name": "SrcUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tpassword as string,\n\t\tlast_login as timestamp,\n\t\tis_superuser as boolean,\n\t\temail as string,\n\t\tis_active as boolean,\n\t\tdate_joined as timestamp,\n\t\tis_staff as boolean,\n\t\tuid as string,\n\t\tfacebook as string,\n\t\ttwitter as string,\n\t\treset_token as string,\n\t\tmarketing_code_id as integer,\n\t\tclient_id as string,\n\t\tsalt as string,\n\t\texternal_id as string,\n\t\tis_tester as boolean,\n\t\tapple as string,\n\t\tdelete_token as string,\n\t\tmagic_link_verified as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUser\nSrcUser filter(toDate(date_joined) < toDate(currentUTC())) ~> FilterRecords\nFilterRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_user_userdetail')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "user_userdetail table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "SrcUserUserDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user",
								"type": "DatasetReference"
							},
							"name": "SrcUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						},
						{
							"name": "SelectU"
						},
						{
							"name": "SelectUD"
						},
						{
							"name": "JoinUdU"
						},
						{
							"name": "SelectUserDetail"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tdate_of_birth as date,\n\t\tphone as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tregion as string,\n\t\tpostcode as string,\n\t\tcountry as string,\n\t\tnotifications as integer,\n\t\tpass_code as string,\n\t\tcurrency as string,\n\t\tuser_id as integer,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUserUserDetail\nsource(output(\n\t\tid as integer,\n\t\tpassword as string,\n\t\tlast_login as timestamp,\n\t\tis_superuser as boolean,\n\t\temail as string,\n\t\tis_active as boolean,\n\t\tdate_joined as timestamp,\n\t\tis_staff as boolean,\n\t\tuid as string,\n\t\tfacebook as string,\n\t\ttwitter as string,\n\t\treset_token as string,\n\t\tmarketing_code_id as integer,\n\t\tclient_id as string,\n\t\tsalt as string,\n\t\texternal_id as string,\n\t\tis_tester as boolean,\n\t\tapple as string,\n\t\tdelete_token as string,\n\t\tmagic_link_verified as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUser\nJoinUdU filter(and(toDate({u.date_joined}) >= toDate(subDays(currentUTC(),1)), toDate({u.date_joined}) < toDate(currentUTC()))) ~> FilterRecords\nSrcUser select(mapColumn(\n\t\t{u.id} = id,\n\t\t{u.date_joined} = date_joined\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectU\nSrcUserUserDetail select(mapColumn(\n\t\t{ud.id} = id,\n\t\t{ud.first_name} = first_name,\n\t\t{ud.last_name} = last_name,\n\t\t{ud.date_of_birth} = date_of_birth,\n\t\t{ud.phone} = phone,\n\t\t{ud.address_line_1} = address_line_1,\n\t\t{ud.address_line_2} = address_line_2,\n\t\t{ud.city} = city,\n\t\t{ud.region} = region,\n\t\t{ud.postcode} = postcode,\n\t\t{ud.country} = country,\n\t\t{ud.notifications} = notifications,\n\t\t{ud.pass_code} = pass_code,\n\t\t{ud.currency} = currency,\n\t\t{ud.user_id} = user_id,\n\t\t{ud.gender} = gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUD\nSelectUD, SelectU join({ud.user_id} == {u.id},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinUdU\nFilterRecords select(mapColumn(\n\t\tid = {ud.id},\n\t\tfirst_name = {ud.first_name},\n\t\tlast_name = {ud.last_name},\n\t\tdate_of_birth = {ud.date_of_birth},\n\t\tphone = {ud.phone},\n\t\taddress_line_1 = {ud.address_line_1},\n\t\taddress_line_2 = {ud.address_line_2},\n\t\tcity = {ud.city},\n\t\tregion = {ud.region},\n\t\tpostcode = {ud.postcode},\n\t\tcountry = {ud.country},\n\t\tnotifications = {ud.notifications},\n\t\tpass_code = {ud.pass_code},\n\t\tcurrency = {ud.currency},\n\t\tuser_id = {ud.user_id},\n\t\tgender = {ud.gender}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserDetail\nSelectUserDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user_userdetail')]",
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_userdetail')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Hermes to ADLS_user_userdetail_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "user_userdetail table from Hermes to ADLS",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "SrcUserUserDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_pg_hermes_user",
								"type": "DatasetReference"
							},
							"name": "SrcUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "DstDataLake"
						}
					],
					"transformations": [
						{
							"name": "FilterRecords"
						},
						{
							"name": "SelectU"
						},
						{
							"name": "SelectUD"
						},
						{
							"name": "JoinUdU"
						},
						{
							"name": "SelectUserDetail"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tdate_of_birth as date,\n\t\tphone as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tregion as string,\n\t\tpostcode as string,\n\t\tcountry as string,\n\t\tnotifications as integer,\n\t\tpass_code as string,\n\t\tcurrency as string,\n\t\tuser_id as integer,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUserUserDetail\nsource(output(\n\t\tid as integer,\n\t\tpassword as string,\n\t\tlast_login as timestamp,\n\t\tis_superuser as boolean,\n\t\temail as string,\n\t\tis_active as boolean,\n\t\tdate_joined as timestamp,\n\t\tis_staff as boolean,\n\t\tuid as string,\n\t\tfacebook as string,\n\t\ttwitter as string,\n\t\treset_token as string,\n\t\tmarketing_code_id as integer,\n\t\tclient_id as string,\n\t\tsalt as string,\n\t\texternal_id as string,\n\t\tis_tester as boolean,\n\t\tapple as string,\n\t\tdelete_token as string,\n\t\tmagic_link_verified as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SrcUser\nJoinUdU filter(toDate({u.date_joined}) < toDate(currentUTC())) ~> FilterRecords\nSrcUser select(mapColumn(\n\t\t{u.id} = id,\n\t\t{u.date_joined} = date_joined\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectU\nSrcUserUserDetail select(mapColumn(\n\t\t{ud.id} = id,\n\t\t{ud.first_name} = first_name,\n\t\t{ud.last_name} = last_name,\n\t\t{ud.date_of_birth} = date_of_birth,\n\t\t{ud.phone} = phone,\n\t\t{ud.address_line_1} = address_line_1,\n\t\t{ud.address_line_2} = address_line_2,\n\t\t{ud.city} = city,\n\t\t{ud.region} = region,\n\t\t{ud.postcode} = postcode,\n\t\t{ud.country} = country,\n\t\t{ud.notifications} = notifications,\n\t\t{ud.pass_code} = pass_code,\n\t\t{ud.currency} = currency,\n\t\t{ud.user_id} = user_id,\n\t\t{ud.gender} = gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUD\nSelectUD, SelectU join({ud.user_id} == {u.id},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinUdU\nFilterRecords select(mapColumn(\n\t\tid = {ud.id},\n\t\tfirst_name = {ud.first_name},\n\t\tlast_name = {ud.last_name},\n\t\tdate_of_birth = {ud.date_of_birth},\n\t\tphone = {ud.phone},\n\t\taddress_line_1 = {ud.address_line_1},\n\t\taddress_line_2 = {ud.address_line_2},\n\t\tcity = {ud.city},\n\t\tregion = {ud.region},\n\t\tpostcode = {ud.postcode},\n\t\tcountry = {ud.country},\n\t\tnotifications = {ud.notifications},\n\t\tpass_code = {ud.pass_code},\n\t\tcurrency = {ud.currency},\n\t\tuser_id = {ud.user_id},\n\t\tgender = {ud.gender}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserDetail\nSelectUserDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DstDataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user_userdetail')]",
				"[concat(variables('workspaceId'), '/datasets/ds_pg_hermes_user')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_userdetail')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load LCVoucher Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_voucher",
								"type": "DatasetReference"
							},
							"name": "srcVwSchemeSchemeaccountVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "srcDimLCVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "scrMaxDimLCVoucherID"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucherEA"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucherEI"
						}
					],
					"transformations": [
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "InCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectVC"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectDimLCV"
						},
						{
							"name": "SelectDimLC"
						},
						{
							"name": "JoinVcSa"
						},
						{
							"name": "JoinVcSaDimLc"
						}
					],
					"script": "source(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as string,\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as string,\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as string,\n\t\tVoucherState as string,\n\t\tSubText as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as string,\n\t\tExpiryDate as string,\n\t\tRedeemDate as string,\n\t\tBarcodeType as string,\n\t\tTCUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountVoucher\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLCVoucher\nsource(output(\n\t\tMaxDimLCVoucherID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCVoucherID FROM [Dim].[LCVoucher]',\n\tformat: 'query',\n\tstaged: false) ~> scrMaxDimLCVoucherID\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nJoinVcSaDimLc, scrMaxDimLCVoucherID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLCV lookup({vch.VoucherCode} == {dim.VoucherCode},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCVoucherID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCVoucherID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC()),\n\t\t{new.IssueDate} = toTimestamp(toInteger({vch.IssueDate})*1000l,'yyyy-MM-dd HH:mm:ss'),\n\t\t{new.ExpiryDate} = toTimestamp(toInteger({vch.ExpiryDate})*1000l,'yyyy-MM-dd HH:mm:ss'),\n\t\t{new.RedeemDate} = toTimestamp(toInteger({vch.RedeemDate})*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AdditionalFields\nsrcVwSchemeSchemeaccountVoucher select(mapColumn(\n\t\t{vch.SAID} = SAID,\n\t\t{vch.SACreated} = SACreated,\n\t\t{vch.SAUpdated} = SAUpdated,\n\t\t{vch.VoucherCode} = VoucherCode,\n\t\t{vch.BurnType} = BurnType,\n\t\t{vch.BurnValue} = BurnValue,\n\t\t{vch.BurnPrefix} = BurnPrefix,\n\t\t{vch.BurnSuffix} = BurnSuffix,\n\t\t{vch.BurnCurrency} = BurnCurrency,\n\t\t{vch.EarnType} = EarnType,\n\t\t{vch.EarnValue} = EarnValue,\n\t\t{vch.EarnPrefix} = EarnPrefix,\n\t\t{vch.EarnSuffix} = EarnSuffix,\n\t\t{vch.EarnCurrency} = EarnCurrency,\n\t\t{vch.EarnTargetValue} = EarnTargetValue,\n\t\t{vch.VoucherState} = VoucherState,\n\t\t{vch.SubText} = SubText,\n\t\t{vch.Headline} = Headline,\n\t\t{vch.BodyText} = BodyText,\n\t\t{vch.IssueDate} = IssueDate,\n\t\t{vch.ExpiryDate} = ExpiryDate,\n\t\t{vch.RedeemDate} = RedeemDate,\n\t\t{vch.BarcodeType} = BarcodeType,\n\t\t{vch.TCUrl} = TCUrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVC\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.status} = status,\n\t\t{sa.order} = order,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.barcode} = barcode,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.main_answer} = main_answer,\n\t\t{sa.pll_links} = pll_links,\n\t\t{sa.formatted_images} = formatted_images\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimLCVoucher select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.LoyaltyCardID} = LoyaltyCardID,\n\t\t{dim.VoucherCode} = VoucherCode,\n\t\t{dim.BurnType} = BurnType,\n\t\t{dim.BurnValue} = BurnValue,\n\t\t{dim.BurnPrefix} = BurnPrefix,\n\t\t{dim.BurnSuffix} = BurnSuffix,\n\t\t{dim.BurnCurrency} = BurnCurrency,\n\t\t{dim.EarnType} = EarnType,\n\t\t{dim.EarnValue} = EarnValue,\n\t\t{dim.EarnPrefix} = EarnPrefix,\n\t\t{dim.EarnSuffix} = EarnSuffix,\n\t\t{dim.EarnCurrency} = EarnCurrency,\n\t\t{dim.EarnTargetValue} = EarnTargetValue,\n\t\t{dim.VoucherState} = VoucherState,\n\t\t{dim.Subtext} = Subtext,\n\t\t{dim.Headline} = Headline,\n\t\t{dim.BodyText} = BodyText,\n\t\t{dim.IssueDate} = IssueDate,\n\t\t{dim.ExpiryDate} = ExpiryDate,\n\t\t{dim.BarcodeType} = BarcodeType,\n\t\t{dim.TCUrl} = TCUrl,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.RedeemDate} = RedeemDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLCV\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dimLC.ID} = ID,\n\t\t{dimLC.LCStatus} = LCStatus,\n\t\t{dimLC.AddDate} = AddDate,\n\t\t{dimLC.JoinDate} = JoinDate,\n\t\t{dimLC.EffFromDate} = EffFromDate,\n\t\t{dimLC.EffToDate} = EffToDate,\n\t\t{dimLC.ProcessDate} = ProcessDate,\n\t\t{dimLC.IsCurrent} = IsCurrent,\n\t\t{dimLC.SourceLCKey} = SourceLCKey,\n\t\t{dimLC.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nSelectVC, SelectSA join({vch.SAID} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSa\nJoinVcSa, SelectDimLC join({sa.id} == {dimLC.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSaDimLc\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tVoucherCode = {vch.VoucherCode},\n\t\tBurnType = {vch.BurnType},\n\t\tBurnValue = {vch.BurnValue},\n\t\tBurnPrefix = {vch.BurnPrefix},\n\t\tBurnSuffix = {vch.BurnSuffix},\n\t\tBurnCurrency = {vch.BurnCurrency},\n\t\tEarnType = {vch.EarnType},\n\t\tEarnValue = {vch.EarnValue},\n\t\tEarnPrefix = {vch.EarnPrefix},\n\t\tEarnSuffix = {vch.EarnSuffix},\n\t\tEarnCurrency = {vch.EarnCurrency},\n\t\tEarnTargetValue = {vch.EarnTargetValue},\n\t\tVoucherState = {vch.VoucherState},\n\t\tSubtext = {vch.SubText},\n\t\tHeadline = {vch.Headline},\n\t\tBodyText = {vch.BodyText},\n\t\tIssueDate = {new.IssueDate},\n\t\tExpiryDate = {new.ExpiryDate},\n\t\tRedeemDate = {new.RedeemDate},\n\t\tBarcodeType = {vch.BarcodeType},\n\t\tTCUrl = {vch.TCUrl},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tRedeemDate = {dim.RedeemDate}\n\t)) ~> snkDimLCVoucher\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tVoucherCode = {vch.VoucherCode},\n\t\tBurnType = {vch.BurnType},\n\t\tBurnValue = {vch.BurnValue},\n\t\tBurnPrefix = {vch.BurnPrefix},\n\t\tBurnSuffix = {vch.BurnSuffix},\n\t\tBurnCurrency = {vch.BurnCurrency},\n\t\tEarnType = {vch.EarnType},\n\t\tEarnValue = {vch.EarnValue},\n\t\tEarnPrefix = {vch.EarnPrefix},\n\t\tEarnSuffix = {vch.EarnSuffix},\n\t\tEarnCurrency = {vch.EarnCurrency},\n\t\tEarnTargetValue = {vch.EarnTargetValue},\n\t\tVoucherState = {vch.VoucherState},\n\t\tSubtext = {vch.SubText},\n\t\tHeadline = {vch.Headline},\n\t\tBodyText = {vch.BodyText},\n\t\tIssueDate = {new.IssueDate},\n\t\tRedeemDate = {new.RedeemDate},\n\t\tExpiryDate = {new.ExpiryDate},\n\t\tBarcodeType = {vch.BarcodeType},\n\t\tTCUrl = {vch.TCUrl},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {dimLC.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tRedeemDate = {dim.RedeemDate}\n\t)) ~> snkDimLCVoucherEA\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LCVoucher ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LCVoucher OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t)) ~> snkDimLCVoucherEI"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_scheme_schemeaccount_voucher')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLCVoucher')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimLCVoucher_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load (Full Load) LCVoucher Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_voucher",
								"type": "DatasetReference"
							},
							"name": "srcVwSchemeSchemeaccountVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "srcDimLCVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "scrMaxDimLCVoucherID"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucher"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucherEA"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLCVoucher",
								"type": "DatasetReference"
							},
							"name": "snkDimLCVoucherEI"
						}
					],
					"transformations": [
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "InCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectVC"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectDimLCV"
						},
						{
							"name": "SelectDimLC"
						},
						{
							"name": "JoinVcSa"
						},
						{
							"name": "JoinVcSaDimLc"
						}
					],
					"script": "source(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as string,\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as string,\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as string,\n\t\tVoucherState as string,\n\t\tSubText as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as string,\n\t\tExpiryDate as string,\n\t\tRedeemDate as string,\n\t\tBarcodeType as string,\n\t\tTCUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountVoucher\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLCVoucher\nsource(output(\n\t\tMaxDimLCVoucherID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCVoucherID FROM [Dim].[LCVoucher]',\n\tformat: 'query',\n\tstaged: false) ~> scrMaxDimLCVoucherID\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nJoinVcSaDimLc, scrMaxDimLCVoucherID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLCV lookup({vch.VoucherCode} == {dim.VoucherCode},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCVoucherID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCVoucherID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC()),\n\t\t{new.IssueDate} = toTimestamp(toInteger({vch.IssueDate})*1000l,'yyyy-MM-dd HH:mm:ss'),\n\t\t{new.RedeemDate} = toTimestamp(toInteger({vch.RedeemDate})*1000l,'yyyy-MM-dd HH:mm:ss'),\n\t\t{new.ExpiryDate} = toTimestamp(toInteger({vch.ExpiryDate})*1000l,'yyyy-MM-dd HH:mm:ss')) ~> AdditionalFields\nsrcVwSchemeSchemeaccountVoucher select(mapColumn(\n\t\t{vch.SAID} = SAID,\n\t\t{vch.SACreated} = SACreated,\n\t\t{vch.SAUpdated} = SAUpdated,\n\t\t{vch.VoucherCode} = VoucherCode,\n\t\t{vch.BurnType} = BurnType,\n\t\t{vch.BurnValue} = BurnValue,\n\t\t{vch.BurnPrefix} = BurnPrefix,\n\t\t{vch.BurnSuffix} = BurnSuffix,\n\t\t{vch.BurnCurrency} = BurnCurrency,\n\t\t{vch.EarnType} = EarnType,\n\t\t{vch.EarnValue} = EarnValue,\n\t\t{vch.EarnPrefix} = EarnPrefix,\n\t\t{vch.EarnSuffix} = EarnSuffix,\n\t\t{vch.EarnCurrency} = EarnCurrency,\n\t\t{vch.EarnTargetValue} = EarnTargetValue,\n\t\t{vch.VoucherState} = VoucherState,\n\t\t{vch.SubText} = SubText,\n\t\t{vch.Headline} = Headline,\n\t\t{vch.BodyText} = BodyText,\n\t\t{vch.IssueDate} = IssueDate,\n\t\t{vch.RedeemDate} = RedeemDate,\n\t\t{vch.ExpiryDate} = ExpiryDate,\n\t\t{vch.BarcodeType} = BarcodeType,\n\t\t{vch.TCUrl} = TCUrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVC\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.status} = status,\n\t\t{sa.order} = order,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.barcode} = barcode,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.main_answer} = main_answer,\n\t\t{sa.pll_links} = pll_links,\n\t\t{sa.formatted_images} = formatted_images\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimLCVoucher select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.LoyaltyCardID} = LoyaltyCardID,\n\t\t{dim.VoucherCode} = VoucherCode,\n\t\t{dim.BurnType} = BurnType,\n\t\t{dim.BurnValue} = BurnValue,\n\t\t{dim.BurnPrefix} = BurnPrefix,\n\t\t{dim.BurnSuffix} = BurnSuffix,\n\t\t{dim.BurnCurrency} = BurnCurrency,\n\t\t{dim.EarnType} = EarnType,\n\t\t{dim.EarnValue} = EarnValue,\n\t\t{dim.EarnPrefix} = EarnPrefix,\n\t\t{dim.EarnSuffix} = EarnSuffix,\n\t\t{dim.EarnCurrency} = EarnCurrency,\n\t\t{dim.EarnTargetValue} = EarnTargetValue,\n\t\t{dim.VoucherState} = VoucherState,\n\t\t{dim.Subtext} = Subtext,\n\t\t{dim.Headline} = Headline,\n\t\t{dim.BodyText} = BodyText,\n\t\t{dim.IssueDate} = IssueDate,\n\t\t{dim.ExpiryDate} = ExpiryDate,\n\t\t{dim.BarcodeType} = BarcodeType,\n\t\t{dim.TCUrl} = TCUrl,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.RedeemDate} = RedeemDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLCV\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dimLC.ID} = ID,\n\t\t{dimLC.LCStatus} = LCStatus,\n\t\t{dimLC.AddDate} = AddDate,\n\t\t{dimLC.JoinDate} = JoinDate,\n\t\t{dimLC.EffFromDate} = EffFromDate,\n\t\t{dimLC.EffToDate} = EffToDate,\n\t\t{dimLC.ProcessDate} = ProcessDate,\n\t\t{dimLC.IsCurrent} = IsCurrent,\n\t\t{dimLC.SourceLCKey} = SourceLCKey,\n\t\t{dimLC.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nSelectVC, SelectSA join({vch.SAID} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSa\nJoinVcSa, SelectDimLC join({sa.id} == {dimLC.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSaDimLc\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tVoucherCode = {vch.VoucherCode},\n\t\tBurnType = {vch.BurnType},\n\t\tBurnValue = {vch.BurnValue},\n\t\tBurnPrefix = {vch.BurnPrefix},\n\t\tBurnSuffix = {vch.BurnSuffix},\n\t\tBurnCurrency = {vch.BurnCurrency},\n\t\tEarnType = {vch.EarnType},\n\t\tEarnValue = {vch.EarnValue},\n\t\tEarnPrefix = {vch.EarnPrefix},\n\t\tEarnSuffix = {vch.EarnSuffix},\n\t\tEarnCurrency = {vch.EarnCurrency},\n\t\tEarnTargetValue = {vch.EarnTargetValue},\n\t\tVoucherState = {vch.VoucherState},\n\t\tSubtext = {vch.SubText},\n\t\tHeadline = {vch.Headline},\n\t\tBodyText = {vch.BodyText},\n\t\tIssueDate = {new.IssueDate},\n\t\tRedeemDate = {new.RedeemDate},\n\t\tExpiryDate = {new.ExpiryDate},\n\t\tBarcodeType = {vch.BarcodeType},\n\t\tTCUrl = {vch.TCUrl},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tRedeemDate = {dim.RedeemDate}\n\t)) ~> snkDimLCVoucher\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tVoucherCode = {vch.VoucherCode},\n\t\tBurnType = {vch.BurnType},\n\t\tBurnValue = {vch.BurnValue},\n\t\tBurnPrefix = {vch.BurnPrefix},\n\t\tBurnSuffix = {vch.BurnSuffix},\n\t\tBurnCurrency = {vch.BurnCurrency},\n\t\tEarnType = {vch.EarnType},\n\t\tEarnValue = {vch.EarnValue},\n\t\tEarnPrefix = {vch.EarnPrefix},\n\t\tEarnSuffix = {vch.EarnSuffix},\n\t\tEarnCurrency = {vch.EarnCurrency},\n\t\tEarnTargetValue = {vch.EarnTargetValue},\n\t\tVoucherState = {vch.VoucherState},\n\t\tSubtext = {vch.SubText},\n\t\tHeadline = {vch.Headline},\n\t\tBodyText = {vch.BodyText},\n\t\tIssueDate = {new.IssueDate},\n\t\tRedeemDate = {new.RedeemDate},\n\t\tExpiryDate = {new.ExpiryDate},\n\t\tBarcodeType = {vch.BarcodeType},\n\t\tTCUrl = {vch.TCUrl},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {dimLC.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tRedeemDate = {dim.RedeemDate}\n\t)) ~> snkDimLCVoucherEA\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tRedeemDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LCVoucher ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LCVoucher OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t)) ~> snkDimLCVoucherEI"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_scheme_schemeaccount_voucher')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLCVoucher')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load LoyaltyCard Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_scheme",
								"type": "DatasetReference"
							},
							"name": "srcScheme"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_category",
								"type": "DatasetReference"
							},
							"name": "scrSchemeCategory"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_LoyaltyCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefLoyaltyCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimLCID"
						},
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_balance",
								"type": "DatasetReference"
							},
							"name": "srcVwSchemeSchemeaccountBalance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCardEA"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCardEI"
						}
					],
					"transformations": [
						{
							"name": "JoinSABS"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectSS"
						},
						{
							"name": "SelectSC"
						},
						{
							"name": "JoinSABSSC"
						},
						{
							"name": "JoinSABSSCRef"
						},
						{
							"name": "SelectRefLC"
						},
						{
							"name": "SelectDimLC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "InCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectSB"
						},
						{
							"name": "JoinSAB"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tcompany as string,\n\t\tcompany_url as string,\n\t\ttier as integer,\n\t\tscan_message as string,\n\t\tpoint_name as string,\n\t\tcategory_id as integer,\n\t\tforgotten_password_url as string,\n\t\tidentifier as string,\n\t\thas_transactions as boolean,\n\t\thas_points as boolean,\n\t\tcolour as string,\n\t\tbarcode_regex as string,\n\t\tcard_number_regex as string,\n\t\tbarcode_prefix as string,\n\t\tcard_number_prefix as string,\n\t\tbarcode_type as integer,\n\t\tandroid_app_id as string,\n\t\tios_scheme as string,\n\t\titunes_url as string,\n\t\tplay_store_url as string,\n\t\tmax_points_value_length as integer,\n\t\tjoin_url as string,\n\t\tlink_account_text as string,\n\t\tjoin_t_and_c as string,\n\t\ttransaction_headers as string,\n\t\tauthorisation_required as boolean,\n\t\tdigital_only as boolean,\n\t\tenrol_incentive as string,\n\t\tplan_description as string,\n\t\tplan_name as string,\n\t\tplan_name_card as string,\n\t\tplan_summary as string,\n\t\tbarcode_redeem_instructions as string,\n\t\tplan_register_info as string,\n\t\tlinking_support as string,\n\t\tformatted_images as string,\n\t\tsecondary_colour as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcScheme\nsource(output(\n\t\tid as integer,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrSchemeCategory\nsource(output(\n\t\tCode as short,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefLoyaltyCardStatus\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tMaxDimLCID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCID FROM [Dim].[LoyaltyCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimLCID\nsource(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUserSet as string,\n\t\tBalanceSchemeID as integer,\n\t\tBalanceUpdateDate as string,\n\t\tBalanceRewardTeir as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tBalanceSAID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountBalance\nJoinSAB, SelectSS join({sa.scheme_id} == {ss.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABS\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.status} = status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcScheme select(mapColumn(\n\t\t{ss.id} = id,\n\t\t{ss.name} = name,\n\t\t{ss.company} = company,\n\t\t{ss.point_name} = point_name,\n\t\t{ss.plan_description} = plan_description,\n\t\t{ss.category_id} = category_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSS\nscrSchemeCategory select(mapColumn(\n\t\t{sc.id} = id,\n\t\t{sc.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSC\nJoinSABS, SelectSC join({ss.category_id} == {sc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSC\nJoinSABSSC, SelectRefLC join({sa.status} == {ref.LCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSCRef\nsrcRefLoyaltyCardStatus select(mapColumn(\n\t\t{ref.LCCode} = Code,\n\t\t{ref.LCStatus} = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefLC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.CardNumber} = CardNumber,\n\t\t{dim.PlanName} = PlanName,\n\t\t{dim.PlanDescription} = PlanDescription,\n\t\t{dim.LCStatus} = LCStatus,\n\t\t{dim.Merchant} = Merchant,\n\t\t{dim.Category} = Category,\n\t\t{dim.BonusName} = BonusName,\n\t\t{dim.BalanceValue} = BalanceValue,\n\t\t{dim.BalancePoints} = BalancePoints,\n\t\t{dim.Balance} = Balance,\n\t\t{dim.BalanceIsStale} = BalanceIsStale,\n\t\t{dim.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{dim.BalanceRewardTier} = BalanceRewardTier,\n\t\t{dim.BalanceValueLabel} = BalanceValueLabel,\n\t\t{dim.BalancePointsLabel} = BalancePointsLabel,\n\t\t{dim.AddDate} = AddDate,\n\t\t{dim.JoinDate} = JoinDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourceLCKey} = SourceLCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey,\n\t\t{dim.IsActive} = IsActive,\n\t\t{dim.LCCreateDate} = LCCreateDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nJoinSABSSCRef, MaxDimLCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLC lookup({sa.id} == {dim.SourceLCKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nsrcVwSchemeSchemeaccountBalance select(mapColumn(\n\t\t{bal.SAID} = SAID,\n\t\t{bal.SACreated} = SACreated,\n\t\t{bal.SAUpdated} = SAUpdated,\n\t\t{bal.BalanceValue} = BalanceValue,\n\t\t{bal.BalancePoints} = BalancePoints,\n\t\t{bal.Balance} = Balance,\n\t\t{bal.BalanceIsStale} = BalanceIsStale,\n\t\t{bal.BalanceUserSet} = BalanceUserSet,\n\t\t{bal.BalanceSchemeID} = BalanceSchemeID,\n\t\t{bal.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{bal.BalanceRewardTeir} = BalanceRewardTeir,\n\t\t{bal.BalanceValueLabel} = BalanceValueLabel,\n\t\t{bal.BalancePointsLabel} = BalancePointsLabel,\n\t\t{bal.BalanceSAID} = BalanceSAID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSB\nSelectSA, SelectSB join({sa.id} == {bal.SAID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSAB\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBonusName = {dim.BonusName},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourceLCKey = {sa.id},\n\t\tRestrictionKey = {dim.RestrictionKey},\n\t\tIsActive = {dim.IsActive},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceUpdateDate = {dim.BalanceUpdateDate},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourceLCKey = {sa.id},\n\t\tIsActive = {dim.IsActive},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCardEA\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t)) ~> snkDimLoyaltyCardEI"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_category')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_LoyaltyCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_scheme_schemeaccount_balance')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimLoyaltyCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load (Full Load) LoyaltyCard Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_scheme",
								"type": "DatasetReference"
							},
							"name": "srcScheme"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_category",
								"type": "DatasetReference"
							},
							"name": "scrSchemeCategory"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_LoyaltyCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefLoyaltyCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimLCID"
						},
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_balance",
								"type": "DatasetReference"
							},
							"name": "srcVwSchemeSchemeaccountBalance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCardEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "snkDimLoyaltyCardEU"
						}
					],
					"transformations": [
						{
							"name": "JoinSABS"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectSS"
						},
						{
							"name": "SelectSC"
						},
						{
							"name": "JoinSABSSC"
						},
						{
							"name": "JoinSABSSCRef"
						},
						{
							"name": "SelectRefLC"
						},
						{
							"name": "SelectDimLC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "InCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectSB"
						},
						{
							"name": "JoinSAB"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tcompany as string,\n\t\tcompany_url as string,\n\t\ttier as integer,\n\t\tscan_message as string,\n\t\tpoint_name as string,\n\t\tcategory_id as integer,\n\t\tforgotten_password_url as string,\n\t\tidentifier as string,\n\t\thas_transactions as boolean,\n\t\thas_points as boolean,\n\t\tcolour as string,\n\t\tbarcode_regex as string,\n\t\tcard_number_regex as string,\n\t\tbarcode_prefix as string,\n\t\tcard_number_prefix as string,\n\t\tbarcode_type as integer,\n\t\tandroid_app_id as string,\n\t\tios_scheme as string,\n\t\titunes_url as string,\n\t\tplay_store_url as string,\n\t\tmax_points_value_length as integer,\n\t\tjoin_url as string,\n\t\tlink_account_text as string,\n\t\tjoin_t_and_c as string,\n\t\ttransaction_headers as string,\n\t\tauthorisation_required as boolean,\n\t\tdigital_only as boolean,\n\t\tenrol_incentive as string,\n\t\tplan_description as string,\n\t\tplan_name as string,\n\t\tplan_name_card as string,\n\t\tplan_summary as string,\n\t\tbarcode_redeem_instructions as string,\n\t\tplan_register_info as string,\n\t\tlinking_support as string,\n\t\tformatted_images as string,\n\t\tsecondary_colour as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcScheme\nsource(output(\n\t\tid as integer,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrSchemeCategory\nsource(output(\n\t\tCode as short,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefLoyaltyCardStatus\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tMaxDimLCID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCID FROM [Dim].[LoyaltyCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimLCID\nsource(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUserSet as string,\n\t\tBalanceSchemeID as integer,\n\t\tBalanceUpdateDate as string,\n\t\tBalanceRewardTeir as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tBalanceSAID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountBalance\nJoinSAB, SelectSS join({sa.scheme_id} == {ss.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABS\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.status} = status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcScheme select(mapColumn(\n\t\t{ss.id} = id,\n\t\t{ss.name} = name,\n\t\t{ss.company} = company,\n\t\t{ss.point_name} = point_name,\n\t\t{ss.plan_description} = plan_description,\n\t\t{ss.category_id} = category_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSS\nscrSchemeCategory select(mapColumn(\n\t\t{sc.id} = id,\n\t\t{sc.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSC\nJoinSABS, SelectSC join({ss.category_id} == {sc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSC\nJoinSABSSC, SelectRefLC join({sa.status} == {ref.LCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSCRef\nsrcRefLoyaltyCardStatus select(mapColumn(\n\t\t{ref.LCCode} = Code,\n\t\t{ref.LCStatus} = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefLC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.CardNumber} = CardNumber,\n\t\t{dim.PlanName} = PlanName,\n\t\t{dim.PlanDescription} = PlanDescription,\n\t\t{dim.LCStatus} = LCStatus,\n\t\t{dim.Merchant} = Merchant,\n\t\t{dim.Category} = Category,\n\t\t{dim.BonusName} = BonusName,\n\t\t{dim.BalanceValue} = BalanceValue,\n\t\t{dim.BalancePoints} = BalancePoints,\n\t\t{dim.Balance} = Balance,\n\t\t{dim.BalanceIsStale} = BalanceIsStale,\n\t\t{dim.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{dim.BalanceRewardTier} = BalanceRewardTier,\n\t\t{dim.BalanceValueLabel} = BalanceValueLabel,\n\t\t{dim.BalancePointsLabel} = BalancePointsLabel,\n\t\t{dim.AddDate} = AddDate,\n\t\t{dim.JoinDate} = JoinDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourceLCKey} = SourceLCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey,\n\t\t{dim.IsActive} = IsActive,\n\t\t{dim.LCCreateDate} = LCCreateDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nJoinSABSSCRef, MaxDimLCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLC lookup({sa.id} == {dim.SourceLCKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nsrcVwSchemeSchemeaccountBalance select(mapColumn(\n\t\t{bal.SAID} = SAID,\n\t\t{bal.SACreated} = SACreated,\n\t\t{bal.SAUpdated} = SAUpdated,\n\t\t{bal.BalanceValue} = BalanceValue,\n\t\t{bal.BalancePoints} = BalancePoints,\n\t\t{bal.Balance} = Balance,\n\t\t{bal.BalanceIsStale} = BalanceIsStale,\n\t\t{bal.BalanceUserSet} = BalanceUserSet,\n\t\t{bal.BalanceSchemeID} = BalanceSchemeID,\n\t\t{bal.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{bal.BalanceRewardTeir} = BalanceRewardTeir,\n\t\t{bal.BalanceValueLabel} = BalanceValueLabel,\n\t\t{bal.BalancePointsLabel} = BalancePointsLabel,\n\t\t{bal.BalanceSAID} = BalanceSAID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSB\nSelectSA, SelectSB join({sa.id} == {bal.SAID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSAB\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBonusName = {dim.BonusName},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourceLCKey = {sa.id},\n\t\tRestrictionKey = {dim.RestrictionKey},\n\t\tIsActive = {dim.IsActive},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceUpdateDate = {dim.BalanceUpdateDate},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourceLCKey = {sa.id},\n\t\tIsActive = {dim.IsActive},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t)) ~> snkDimLoyaltyCardEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_scheme')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_category')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_LoyaltyCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_scheme_schemeaccount_balance')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load Payment Card Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcVwHistoryHistoricalPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcard",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardissuer",
								"type": "DatasetReference"
							},
							"name": "scrPaymentCardIssuer"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefPaymentCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimPCID"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardType",
								"type": "DatasetReference"
							},
							"name": "srcRefPaymentType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEU"
						}
					],
					"transformations": [
						{
							"name": "JoinPCAPC"
						},
						{
							"name": "SelectPCA"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "SelectPCI"
						},
						{
							"name": "JoinPCAPCPCI"
						},
						{
							"name": "JoinPCAPCPCIRef"
						},
						{
							"name": "SelectRefPC"
						},
						{
							"name": "SelectDimPC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectRefPT"
						},
						{
							"name": "JoinPCAPCPCIRefType"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\tcreated as string,\n\t\tupdated as string,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwHistoryHistoricalPaymentCardAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tscan_message as string,\n\t\tinput_label as string,\n\t\tis_active as boolean,\n\t\tsystem as string,\n\t\ttype as string,\n\t\ttoken_method as integer,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCard\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\timage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrPaymentCardIssuer\nsource(output(\n\t\tCode as short,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefPaymentCardStatus\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPaymentCard\nsource(output(\n\t\tMaxDimPCID as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimPCID FROM [Dim].[PaymentCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimPCID\nsource(output(\n\t\tBIN as string,\n\t\tCardType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefPaymentType\nSelectPCA, SelectPC join({pca.payment_card_id} == {pc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPC\nsrcVwHistoryHistoricalPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.name_on_card} = name_on_card,\n\t\t{pca.start_month} = start_month,\n\t\t{pca.start_year} = start_year,\n\t\t{pca.expiry_month} = expiry_month,\n\t\t{pca.expiry_year} = expiry_year,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.issuer_id} = issuer_id,\n\t\t{pca.payment_card_id} = payment_card_id,\n\t\t{pca.token} = token,\n\t\t{pca.country} = country,\n\t\t{pca.currency_code} = currency_code,\n\t\t{pca.pan_end} = pan_end,\n\t\t{pca.pan_start} = pan_start,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.fingerprint} = fingerprint\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCA\nsrcPaymentCard select(mapColumn(\n\t\t{pc.id} = id,\n\t\t{pc.name} = name,\n\t\t{pc.slug} = slug,\n\t\t{pc.is_active} = is_active,\n\t\t{pc.type} = type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nscrPaymentCardIssuer select(mapColumn(\n\t\t{pci.id} = id,\n\t\t{pci.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCI\nJoinPCAPC, SelectPCI join({pca.issuer_id} == {pci.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCI\nJoinPCAPCPCI, SelectRefPC join({pca.status} == {ref.PCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRef\nsrcRefPaymentCardStatus select(mapColumn(\n\t\t{ref.PCCode} = Code,\n\t\t{ref.PCStatus} = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPC\nsrcDimPaymentCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.NameOnCard} = NameOnCard,\n\t\t{dim.PANTruncation} = PANTruncation,\n\t\t{dim.ValidFrom} = ValidFrom,\n\t\t{dim.ValidTo} = ValidTo,\n\t\t{dim.Token} = Token,\n\t\t{dim.Fingerprint} = Fingerprint,\n\t\t{dim.Issuer} = Issuer,\n\t\t{dim.CardProvider} = CardProvider,\n\t\t{dim.Slug} = Slug,\n\t\t{dim.CardType} = CardType,\n\t\t{dim.CardStatus} = CardStatus,\n\t\t{dim.IsDeleted} = IsDeleted,\n\t\t{dim.Country} = Country,\n\t\t{dim.CCYCode} = CCYCode,\n\t\t{dim.CardCreateDate} = CardCreateDate,\n\t\t{dim.CardUpdateDate} = CardUpdateDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourcePCKey} = SourcePCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimPC\nJoinPCAPCPCIRefType, MaxDimPCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimPC lookup({pca.fingerprint} == {dim.Fingerprint}\n\t&& {new.ValidTo} == {dim.ValidTo},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimPCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimPCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ValidFrom} = toDate(concat(right(concat('20',toString({pca.start_year})),4),'-',right(concat('0',toString({pca.start_month})),2),'-01')),\n\t\t{new.ValidTo} = lastDayOfMonth(toDate(concat(right(concat('20',toString({pca.expiry_year})),4),'-',right(concat('0',toString({pca.expiry_month})),2),'-01'))),\n\t\t{new.PANTruncation} = concat({pca.pan_start}, 'xxx', {pca.pan_end}),\n\t\t{new.ProcessDate} = fromUTC(currentUTC()),\n\t\t{new.pcacreated} = toTimestamp(left({pca.created}, 10) + ' ' + substring({pca.created},12,8)),\n\t\t{new.pcaupdated} = toTimestamp(left({pca.updated}, 10) + ' ' + substring({pca.updated},12,8))) ~> AdditionalFields\nsrcRefPaymentType select(mapColumn(\n\t\t{ref.BIN} = BIN,\n\t\t{ref.CardType} = CardType\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPT\nJoinPCAPCPCIRef, SelectRefPT join({pca.pan_start} == {ref.BIN},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRefType\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {ref.CardType},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {new.pcacreated},\n\t\tCardUpdateDate = {new.pcaupdated},\n\t\tEffFromDate = {new.pcacreated},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {ref.CardType},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {new.pcacreated},\n\t\tCardUpdateDate = {new.pcaupdated},\n\t\tEffFromDate = {new.pcacreated},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.PaymentCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.PaymentCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimPaymentCardEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardissuer')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimPaymentCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load Payment Card Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcard",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardissuer",
								"type": "DatasetReference"
							},
							"name": "scrPaymentCardIssuer"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefPaymentCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimPCID"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardType",
								"type": "DatasetReference"
							},
							"name": "srcPaymentType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEU"
						}
					],
					"transformations": [
						{
							"name": "JoinPCAPC"
						},
						{
							"name": "SelectPCA"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "SelectPCI"
						},
						{
							"name": "JoinPCAPCPCI"
						},
						{
							"name": "JoinPCAPCPCIRef"
						},
						{
							"name": "SelectRefPC"
						},
						{
							"name": "SelectDimPC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectPT"
						},
						{
							"name": "JoinPCAPCPCIRefType"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCardAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tscan_message as string,\n\t\tinput_label as string,\n\t\tis_active as boolean,\n\t\tsystem as string,\n\t\ttype as string,\n\t\ttoken_method as integer,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCard\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\timage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrPaymentCardIssuer\nsource(output(\n\t\tCode as short,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefPaymentCardStatus\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPaymentCard\nsource(output(\n\t\tMaxDimPCID as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimPCID FROM [Dim].[PaymentCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimPCID\nsource(output(\n\t\tBIN as string,\n\t\tCardType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcPaymentType\nSelectPCA, SelectPC join({pca.payment_card_id} == {pc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPC\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.name_on_card} = name_on_card,\n\t\t{pca.start_month} = start_month,\n\t\t{pca.start_year} = start_year,\n\t\t{pca.expiry_month} = expiry_month,\n\t\t{pca.expiry_year} = expiry_year,\n\t\t{pca.status} = status,\n\t\t{pca.order} = order,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.issuer_id} = issuer_id,\n\t\t{pca.payment_card_id} = payment_card_id,\n\t\t{pca.token} = token,\n\t\t{pca.country} = country,\n\t\t{pca.currency_code} = currency_code,\n\t\t{pca.pan_end} = pan_end,\n\t\t{pca.pan_start} = pan_start,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.fingerprint} = fingerprint,\n\t\t{pca.psp_token} = psp_token,\n\t\t{pca.consents} = consents,\n\t\t{pca.hash} = hash,\n\t\t{pca.formatted_images} = formatted_images,\n\t\t{pca.pll_links} = pll_links,\n\t\t{pca.agent_data} = agent_data\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCA\nsrcPaymentCard select(mapColumn(\n\t\t{pc.id} = id,\n\t\t{pc.name} = name,\n\t\t{pc.slug} = slug,\n\t\t{pc.is_active} = is_active,\n\t\t{pc.type} = type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nscrPaymentCardIssuer select(mapColumn(\n\t\t{pci.id} = id,\n\t\t{pci.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCI\nJoinPCAPC, SelectPCI join({pca.issuer_id} == {pci.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCI\nJoinPCAPCPCI, SelectRefPC join({pca.status} == {ref.PCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRef\nsrcRefPaymentCardStatus select(mapColumn(\n\t\t{ref.PCCode} = Code,\n\t\t{ref.PCStatus} = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPC\nsrcDimPaymentCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.NameOnCard} = NameOnCard,\n\t\t{dim.PANTruncation} = PANTruncation,\n\t\t{dim.ValidFrom} = ValidFrom,\n\t\t{dim.ValidTo} = ValidTo,\n\t\t{dim.Token} = Token,\n\t\t{dim.Fingerprint} = Fingerprint,\n\t\t{dim.Issuer} = Issuer,\n\t\t{dim.CardProvider} = CardProvider,\n\t\t{dim.Slug} = Slug,\n\t\t{dim.CardType} = CardType,\n\t\t{dim.CardStatus} = CardStatus,\n\t\t{dim.IsDeleted} = IsDeleted,\n\t\t{dim.Country} = Country,\n\t\t{dim.CCYCode} = CCYCode,\n\t\t{dim.CardCreateDate} = CardCreateDate,\n\t\t{dim.CardUpdateDate} = CardUpdateDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourcePCKey} = SourcePCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimPC\nJoinPCAPCPCIRefType, MaxDimPCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimPC lookup({pca.fingerprint} == {dim.Fingerprint}\n\t&& {new.ValidTo} == {dim.ValidTo},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimPCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimPCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ValidFrom} = toDate(concat(right(concat('20',toString({pca.start_year})),4),'-',right(concat('0',toString({pca.start_month})),2),'-01')),\n\t\t{new.ValidTo} = lastDayOfMonth(toDate(concat(right(concat('20',toString({pca.expiry_year})),4),'-',right(concat('0',toString({pca.expiry_month})),2),'-01'))),\n\t\t{new.PANTruncation} = concat({pca.pan_start}, 'xxx', {pca.pan_end}),\n\t\t{new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nsrcPaymentType select(mapColumn(\n\t\t{ref.BIN} = BIN,\n\t\t{ref.CardType} = CardType\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPT\nJoinPCAPCPCIRef, SelectPT join({pca.pan_start} == {ref.BIN},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRefType\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {ref.CardType},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {ref.CardType},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.PaymentCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.PaymentCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimPaymentCardEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardissuer')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardType')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimUser')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load User Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_history_historicalcustomuser",
								"type": "DatasetReference"
							},
							"name": "srcVwHistoryHistoricalCustomUser"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "srcUserUserDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_clientapplication",
								"type": "DatasetReference"
							},
							"name": "scrUserClientapplication"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_clientapplicationbundle",
								"type": "DatasetReference"
							},
							"name": "scrUserClientapplicationBundle"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_organisation",
								"type": "DatasetReference"
							},
							"name": "srcUserOrganisation"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "scrDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "MaxDimUserID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUserEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUserEU"
						}
					],
					"transformations": [
						{
							"name": "SelectVwHistoryHistoricalCustomUser"
						},
						{
							"name": "SelectUserUserDetail"
						},
						{
							"name": "SelectUserClientapplication"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectUserClientapplicationBundle"
						},
						{
							"name": "SelectUserOrganisation"
						},
						{
							"name": "SelectDimUser"
						},
						{
							"name": "JoinUUdCa"
						},
						{
							"name": "JoinUUdCaCab"
						},
						{
							"name": "JoinUUdCaCabOrg"
						},
						{
							"name": "JoinUUd"
						},
						{
							"name": "JoinMaxID"
						}
					],
					"script": "source(output(\n\t\tcreated as timestamp,\n\t\tinstance_id as string,\n\t\tid as integer,\n\t\temail as string,\n\t\tclient_id as string,\n\t\ttwitter as string,\n\t\tfacebook as string,\n\t\tis_staff as boolean,\n\t\tis_active as boolean,\n\t\tis_tester as boolean,\n\t\tdate_joined as string,\n\t\texternal_id as string,\n\t\tdelete_token as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwHistoryHistoricalCustomUser\nsource(output(\n\t\tid as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tdate_of_birth as timestamp,\n\t\tphone as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tregion as string,\n\t\tpostcode as string,\n\t\tcountry as string,\n\t\tnotifications as integer,\n\t\tpass_code as string,\n\t\tcurrency as string,\n\t\tuser_id as integer,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserUserDetail\nsource(output(\n\t\tclient_id as string,\n\t\tname as string,\n\t\torganisation_id as integer,\n\t\tsecret as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrUserClientapplication\nsource(output(\n\t\tid as integer,\n\t\tbundle_id as string,\n\t\tclient_id as string,\n\t\tmagic_lifetime as integer,\n\t\tmagic_link_url as string,\n\t\texternal_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrUserClientapplicationBundle\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tterms_and_conditions as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserOrganisation\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> scrDimUser\nsource(output(\n\t\tMaxDimUserID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimUserID FROM [Dim].[User]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimUserID\nsrcVwHistoryHistoricalCustomUser select(mapColumn(\n\t\t{usr.created} = created,\n\t\t{usr.instance_id} = instance_id,\n\t\t{usr.id} = id,\n\t\t{usr.email} = email,\n\t\t{usr.client_id} = client_id,\n\t\t{usr.twitter} = twitter,\n\t\t{usr.facebook} = facebook,\n\t\t{usr.is_staff} = is_staff,\n\t\t{usr.is_active} = is_active,\n\t\t{usr.is_tester} = is_tester,\n\t\t{usr.date_joined} = date_joined,\n\t\t{usr.external_id} = external_id,\n\t\t{usr.delete_token} = delete_token\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVwHistoryHistoricalCustomUser\nsrcUserUserDetail select(mapColumn(\n\t\t{uud.id} = id,\n\t\t{uud.first_name} = first_name,\n\t\t{uud.last_name} = last_name,\n\t\t{uud.date_of_birth} = date_of_birth,\n\t\t{uud.phone} = phone,\n\t\t{uud.address_line_1} = address_line_1,\n\t\t{uud.address_line_2} = address_line_2,\n\t\t{uud.city} = city,\n\t\t{uud.region} = region,\n\t\t{uud.postcode} = postcode,\n\t\t{uud.country} = country,\n\t\t{uud.user_id} = user_id,\n\t\t{uud.gender} = gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserUserDetail\nscrUserClientapplication select(mapColumn(\n\t\t{uca.client_id} = client_id,\n\t\t{uca.name} = name,\n\t\t{uca.organisation_id} = organisation_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserClientapplication\nAdditionalFields, SelectDimUser lookup({new.instance_id} == {dim.SourceUserKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimUserID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimUserID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC()),\n\t\t{new.instance_id} = toInteger({usr.instance_id})) ~> AdditionalFields\nscrUserClientapplicationBundle select(mapColumn(\n\t\t{cab.id} = id,\n\t\t{cab.bundle_id} = bundle_id,\n\t\t{cab.client_id} = client_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserClientapplicationBundle\nsrcUserOrganisation select(mapColumn(\n\t\t{org.id} = id,\n\t\t{org.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserOrganisation\nscrDimUser select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.FirstName} = FirstName,\n\t\t{dim.LastName} = LastName,\n\t\t{dim.Phone} = Phone,\n\t\t{dim.Email} = Email,\n\t\t{dim.Facebook} = Facebook,\n\t\t{dim.Twitter} = Twitter,\n\t\t{dim.AddressLine1} = AddressLine1,\n\t\t{dim.AddressLine2} = AddressLine2,\n\t\t{dim.City} = City,\n\t\t{dim.Region} = Region,\n\t\t{dim.Postcode} = Postcode,\n\t\t{dim.Country} = Country,\n\t\t{dim.Gender} = Gender,\n\t\t{dim.DateOfBirth} = DateOfBirth,\n\t\t{dim.Channel} = Channel,\n\t\t{dim.Organisation} = Organisation,\n\t\t{dim.Client} = Client,\n\t\t{dim.ExternalID} = ExternalID,\n\t\t{dim.UserCreateDate} = UserCreateDate,\n\t\t{dim.UserUpdateDate} = UserUpdateDate,\n\t\t{dim.IsActive} = IsActive,\n\t\t{dim.DeleteToken} = DeleteToken,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsStaff} = IsStaff,\n\t\t{dim.IsTester} = IsTester,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourceUserKey} = SourceUserKey,\n\t\t{dim.RestrictionID} = RestrictionID,\n\t\t{dim.IsRTBF} = IsRTBF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimUser\nJoinUUd, SelectUserClientapplication join({usr.client_id} == {uca.client_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCa\nJoinUUdCa, SelectUserClientapplicationBundle join({usr.client_id} == {cab.client_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCaCab\nJoinUUdCaCab, SelectUserOrganisation join({uca.organisation_id} == {org.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCaCabOrg\nSelectVwHistoryHistoricalCustomUser, SelectUserUserDetail join({usr.id} == {uud.user_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUd\nJoinUUdCaCabOrg, MaxDimUserID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName = {uud.first_name},\n\t\tLastName = {uud.last_name},\n\t\tPhone = {uud.phone},\n\t\tEmail = {usr.email},\n\t\tFacebook = {usr.facebook},\n\t\tTwitter = {usr.twitter},\n\t\tAddressLine1 = {uud.address_line_1},\n\t\tAddressLine2 = {uud.address_line_2},\n\t\tCity = {uud.city},\n\t\tRegion = {uud.region},\n\t\tPostcode = {uud.postcode},\n\t\tCountry = {uud.country},\n\t\tGender = {uud.gender},\n\t\tDateOfBirth = {uud.date_of_birth},\n\t\tChannel = {cab.bundle_id},\n\t\tOrganisation = {org.name},\n\t\tClient = {uca.name},\n\t\tExternalID = {usr.external_id},\n\t\tUserCreateDate = {usr.date_joined},\n\t\tIsActive = {usr.is_active},\n\t\tDeleteToken = {usr.delete_token},\n\t\tEffFromDate = {usr.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsStaff = {usr.is_staff},\n\t\tIsTester = {usr.is_tester},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourceUserKey = {usr.id}\n\t)) ~> snkDimUser\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName = {uud.first_name},\n\t\tLastName = {uud.last_name},\n\t\tPhone = {uud.phone},\n\t\tEmail = {usr.email},\n\t\tFacebook = {usr.facebook},\n\t\tTwitter = {usr.twitter},\n\t\tAddressLine1 = {uud.address_line_1},\n\t\tAddressLine2 = {uud.address_line_2},\n\t\tCity = {uud.city},\n\t\tRegion = {uud.region},\n\t\tPostcode = {uud.postcode},\n\t\tCountry = {uud.country},\n\t\tGender = {uud.gender},\n\t\tDateOfBirth = {uud.date_of_birth},\n\t\tChannel = {cab.bundle_id},\n\t\tOrganisation = {org.name},\n\t\tClient = {uca.name},\n\t\tExternalID = {usr.external_id},\n\t\tUserCreateDate = {usr.date_joined},\n\t\tIsActive = {usr.is_active},\n\t\tDeleteToken = {usr.delete_token},\n\t\tEffFromDate = {usr.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsStaff = {usr.is_staff},\n\t\tIsTester = {usr.is_tester},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourceUserKey = {usr.id}\n\t)) ~> snkDimUserEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT [Dim].[User] ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT [Dim].[User] OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimUserEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_history_historicalcustomuser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_userdetail')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_clientapplication')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_clientapplicationbundle')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_organisation')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadDimUser_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load User Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user",
								"type": "DatasetReference"
							},
							"name": "srcUser"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_userdetail",
								"type": "DatasetReference"
							},
							"name": "srcUserUserDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_clientapplication",
								"type": "DatasetReference"
							},
							"name": "scrUserClientapplication"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_clientapplicationbundle",
								"type": "DatasetReference"
							},
							"name": "scrUserClientapplicationBundle"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_user_organisation",
								"type": "DatasetReference"
							},
							"name": "srcUserOrganisation"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "scrDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "MaxDimUserID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUserEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "snkDimUserEU"
						}
					],
					"transformations": [
						{
							"name": "SelectUser"
						},
						{
							"name": "SelectUserUserDetail"
						},
						{
							"name": "SelectUserClientapplication"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectUserClientapplicationBundle"
						},
						{
							"name": "SelectUserOrganisation"
						},
						{
							"name": "SelectDimUser"
						},
						{
							"name": "JoinUUdCa"
						},
						{
							"name": "JoinUUdCaCab"
						},
						{
							"name": "JoinUUdCaCabOrg"
						},
						{
							"name": "JoinUUd"
						},
						{
							"name": "JoinMaxID"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tpassword as string,\n\t\tlast_login as timestamp,\n\t\tis_superuser as boolean,\n\t\temail as string,\n\t\tis_active as boolean,\n\t\tdate_joined as timestamp,\n\t\tis_staff as boolean,\n\t\tuid as string,\n\t\tfacebook as string,\n\t\ttwitter as string,\n\t\treset_token as string,\n\t\tmarketing_code_id as integer,\n\t\tclient_id as string,\n\t\tsalt as string,\n\t\texternal_id as string,\n\t\tis_tester as boolean,\n\t\tapple as string,\n\t\tdelete_token as string,\n\t\tmagic_link_verified as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUser\nsource(output(\n\t\tid as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tdate_of_birth as timestamp,\n\t\tphone as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tregion as string,\n\t\tpostcode as string,\n\t\tcountry as string,\n\t\tnotifications as integer,\n\t\tpass_code as string,\n\t\tcurrency as string,\n\t\tuser_id as integer,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserUserDetail\nsource(output(\n\t\tclient_id as string,\n\t\tname as string,\n\t\torganisation_id as integer,\n\t\tsecret as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrUserClientapplication\nsource(output(\n\t\tid as integer,\n\t\tbundle_id as string,\n\t\tclient_id as string,\n\t\tmagic_lifetime as integer,\n\t\tmagic_link_url as string,\n\t\texternal_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrUserClientapplicationBundle\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tterms_and_conditions as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserOrganisation\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tLastLoginDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> scrDimUser\nsource(output(\n\t\tMaxDimUserID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimUserID FROM [Dim].[User]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimUserID\nsrcUser select(mapColumn(\n\t\t{usr.id} = id,\n\t\t{usr.last_login} = last_login,\n\t\t{usr.is_superuser} = is_superuser,\n\t\t{usr.email} = email,\n\t\t{usr.is_active} = is_active,\n\t\t{usr.date_joined} = date_joined,\n\t\t{usr.is_staff} = is_staff,\n\t\t{usr.uid} = uid,\n\t\t{usr.facebook} = facebook,\n\t\t{usr.twitter} = twitter,\n\t\t{usr.reset_token} = reset_token,\n\t\t{usr.client_id} = client_id,\n\t\t{usr.external_id} = external_id,\n\t\t{usr.is_tester} = is_tester,\n\t\t{usr.delete_token} = delete_token\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUser\nsrcUserUserDetail select(mapColumn(\n\t\t{uud.id} = id,\n\t\t{uud.first_name} = first_name,\n\t\t{uud.last_name} = last_name,\n\t\t{uud.date_of_birth} = date_of_birth,\n\t\t{uud.phone} = phone,\n\t\t{uud.address_line_1} = address_line_1,\n\t\t{uud.address_line_2} = address_line_2,\n\t\t{uud.city} = city,\n\t\t{uud.region} = region,\n\t\t{uud.postcode} = postcode,\n\t\t{uud.country} = country,\n\t\t{uud.user_id} = user_id,\n\t\t{uud.gender} = gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserUserDetail\nscrUserClientapplication select(mapColumn(\n\t\t{uca.client_id} = client_id,\n\t\t{uca.name} = name,\n\t\t{uca.organisation_id} = organisation_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserClientapplication\nAdditionalFields, SelectDimUser lookup({usr.email} == {dim.Email}\n\t&& {uca.name} == {dim.Client}\n\t&& {usr.external_id} == {dim.ExternalID},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimUserID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimUserID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nscrUserClientapplicationBundle select(mapColumn(\n\t\t{cab.id} = id,\n\t\t{cab.bundle_id} = bundle_id,\n\t\t{cab.client_id} = client_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserClientapplicationBundle\nsrcUserOrganisation select(mapColumn(\n\t\t{org.id} = id,\n\t\t{org.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserOrganisation\nscrDimUser select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.FirstName} = FirstName,\n\t\t{dim.LastName} = LastName,\n\t\t{dim.Phone} = Phone,\n\t\t{dim.Email} = Email,\n\t\t{dim.Facebook} = Facebook,\n\t\t{dim.Twitter} = Twitter,\n\t\t{dim.AddressLine1} = AddressLine1,\n\t\t{dim.AddressLine2} = AddressLine2,\n\t\t{dim.City} = City,\n\t\t{dim.Region} = Region,\n\t\t{dim.Postcode} = Postcode,\n\t\t{dim.Country} = Country,\n\t\t{dim.Gender} = Gender,\n\t\t{dim.DateOfBirth} = DateOfBirth,\n\t\t{dim.Channel} = Channel,\n\t\t{dim.Organisation} = Organisation,\n\t\t{dim.Client} = Client,\n\t\t{dim.ExternalID} = ExternalID,\n\t\t{dim.UserCreateDate} = UserCreateDate,\n\t\t{dim.UserUpdateDate} = UserUpdateDate,\n\t\t{dim.LastLoginDate} = LastLoginDate,\n\t\t{dim.IsActive} = IsActive,\n\t\t{dim.DeleteToken} = DeleteToken,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsStaff} = IsStaff,\n\t\t{dim.IsTester} = IsTester,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourceUserKey} = SourceUserKey,\n\t\t{dim.RestrictionID} = RestrictionID,\n\t\t{dim.IsRTBF} = IsRTBF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimUser\nJoinUUd, SelectUserClientapplication join({usr.client_id} == {uca.client_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCa\nJoinUUdCa, SelectUserClientapplicationBundle join({usr.client_id} == {cab.client_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCaCab\nJoinUUdCaCab, SelectUserOrganisation join({uca.organisation_id} == {org.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUdCaCabOrg\nSelectUser, SelectUserUserDetail join({usr.id} == {uud.user_id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUUd\nJoinUUdCaCabOrg, MaxDimUserID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName = {uud.first_name},\n\t\tLastName = {uud.last_name},\n\t\tPhone = {uud.phone},\n\t\tEmail = {usr.email},\n\t\tFacebook = {usr.facebook},\n\t\tTwitter = {usr.twitter},\n\t\tAddressLine1 = {uud.address_line_1},\n\t\tAddressLine2 = {uud.address_line_2},\n\t\tCity = {uud.city},\n\t\tRegion = {uud.region},\n\t\tPostcode = {uud.postcode},\n\t\tCountry = {uud.country},\n\t\tGender = {uud.gender},\n\t\tDateOfBirth = {uud.date_of_birth},\n\t\tChannel = {cab.bundle_id},\n\t\tOrganisation = {org.name},\n\t\tClient = {uca.name},\n\t\tExternalID = {usr.external_id},\n\t\tUserCreateDate = {usr.date_joined},\n\t\tIsActive = {usr.is_active},\n\t\tDeleteToken = {usr.delete_token},\n\t\tEffFromDate = {usr.date_joined},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsStaff = {usr.is_staff},\n\t\tIsTester = {usr.is_tester},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourceUserKey = {usr.id}\n\t)) ~> snkDimUser\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName = {uud.first_name},\n\t\tLastName = {uud.last_name},\n\t\tPhone = {uud.phone},\n\t\tEmail = {usr.email},\n\t\tFacebook = {usr.facebook},\n\t\tTwitter = {usr.twitter},\n\t\tAddressLine1 = {uud.address_line_1},\n\t\tAddressLine2 = {uud.address_line_2},\n\t\tCity = {uud.city},\n\t\tRegion = {uud.region},\n\t\tPostcode = {uud.postcode},\n\t\tCountry = {uud.country},\n\t\tGender = {uud.gender},\n\t\tDateOfBirth = {uud.date_of_birth},\n\t\tChannel = {cab.bundle_id},\n\t\tOrganisation = {org.name},\n\t\tClient = {uca.name},\n\t\tExternalID = {usr.external_id},\n\t\tUserCreateDate = {usr.date_joined},\n\t\tIsActive = {usr.is_active},\n\t\tDeleteToken = {usr.delete_token},\n\t\tEffFromDate = {usr.date_joined},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsStaff = {usr.is_staff},\n\t\tIsTester = {usr.is_tester},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourceUserKey = {usr.id}\n\t)) ~> snkDimUserEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT [Dim].[User] ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT [Dim].[User] OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimUserEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_userdetail')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_clientapplication')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_clientapplicationbundle')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_user_organisation')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactLoyaltyCardPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.LoyaltyCardPaymentCard",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "srcHistoryHistoricalPaymentCardSchemeEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactLoyaltyCardPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkFactUserPC"
						}
					],
					"transformations": [
						{
							"name": "SelectLC"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "JoinUplLc"
						},
						{
							"name": "JoinUplLcPc"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectHPL"
						},
						{
							"name": "FilterExtraPCRecords"
						},
						{
							"name": "FilterExtraLCRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcHistoryHistoricalPaymentCardSchemeEntry\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dlc.ID} = ID,\n\t\t{dlc.LCStatus} = LCStatus,\n\t\t{dlc.Merchant} = Merchant,\n\t\t{dlc.Category} = Category,\n\t\t{dlc.IsActive} = IsActive,\n\t\t{dlc.LCCreateDate} = LCCreateDate,\n\t\t{dlc.IsCurrent} = IsCurrent,\n\t\t{dlc.SourceLCKey} = SourceLCKey,\n\t\t{dlc.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nsrcDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectHPL, SelectLC join({hpl.scheme_account_id} == {dlc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLc\nFilterExtraLCRecords, SelectPC join({hpl.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLcPc\nFilterExtraPCRecords derive({new.ProcessDate} = toUTC(currentUTC())) ~> AdditionalFields\nsrcHistoryHistoricalPaymentCardSchemeEntry select(mapColumn(\n\t\t{hpl.id} = id,\n\t\t{hpl.created} = created,\n\t\t{hpl.change_type} = change_type,\n\t\t{hpl.instance_id} = instance_id,\n\t\t{hpl.channel} = channel,\n\t\t{hpl.change_details} = change_details,\n\t\t{hpl.user_id} = user_id,\n\t\t{hpl.scheme_account_id} = scheme_account_id,\n\t\t{hpl.payment_card_account_id} = payment_card_account_id,\n\t\t{hpl.active_link} = active_link\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHPL\nJoinUplLcPc filter(or(equals({dpc.IsCurrent},true()),equals({dlc.IsCurrent},true()))) ~> FilterExtraPCRecords\nJoinUplLc filter(notEquals({dlc.IsActive}, true())) ~> FilterExtraLCRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tPaymentCardID as long,\n\t\tIsActiveLink as boolean,\n\t\tChange as string,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dlc.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsActiveLink = {hpl.active_link},\n\t\tProcessDate = {new.ProcessDate},\n\t\tCreateDate = {hpl.created},\n\t\tChange = {hpl.change_type}\n\t)) ~> snkFactUserPC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardschemeentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactLoyaltyCardPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactLoyaltyCardPaymentCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.LoyaltyCardPaymentCard",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_ubiquity_paymentcardschemeentry",
								"type": "DatasetReference"
							},
							"name": "srcUbiquityPaymentCardSchemeEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactLoyaltyCardPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkFactUserPC"
						}
					],
					"transformations": [
						{
							"name": "SelectLC"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "JoinUplLc"
						},
						{
							"name": "JoinUplLcPc"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "SelectUPL"
						},
						{
							"name": "FilterExtraPCRecords"
						},
						{
							"name": "FilterExtraLCRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tactive_link as boolean,\n\t\tpayment_card_account_id as integer,\n\t\tscheme_account_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUbiquityPaymentCardSchemeEntry\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dlc.ID} = ID,\n\t\t{dlc.LCStatus} = LCStatus,\n\t\t{dlc.Merchant} = Merchant,\n\t\t{dlc.Category} = Category,\n\t\t{dlc.IsActive} = IsActive,\n\t\t{dlc.LCCreateDate} = LCCreateDate,\n\t\t{dlc.IsCurrent} = IsCurrent,\n\t\t{dlc.SourceLCKey} = SourceLCKey,\n\t\t{dlc.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nsrcDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectUPL, SelectLC join({upl.scheme_account_id} == {dlc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLc\nFilterExtraLCRecords, SelectPC join({upl.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLcPc\nFilterExtraPCRecords derive({new.ProcessDate} = toUTC(currentUTC())) ~> AdditionalFields\nsrcUbiquityPaymentCardSchemeEntry select(mapColumn(\n\t\t{upl.id} = id,\n\t\t{upl.active_link} = active_link,\n\t\t{upl.payment_card_account_id} = payment_card_account_id,\n\t\t{upl.scheme_account_id} = scheme_account_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUPL\nJoinUplLcPc filter(or(equals({dpc.IsCurrent},true()),equals({dlc.IsCurrent},true()))) ~> FilterExtraPCRecords\nJoinUplLc filter(notEquals({dlc.IsActive}, true())) ~> FilterExtraLCRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tPaymentCardID as long,\n\t\tIsActiveLink as boolean,\n\t\tChange as string,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dlc.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsActiveLink = {upl.active_link},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserPC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_ubiquity_paymentcardschemeentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactLoyaltyCardPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactMatchedTransaction')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data Pipeline to load fact.MatchedTransaction",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_matched_transaction",
								"type": "DatasetReference"
							},
							"name": "srcMatchedTransaction"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_payment_transaction",
								"type": "DatasetReference"
							},
							"name": "srcPaymentTransaction"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_scheme_transaction",
								"type": "DatasetReference"
							},
							"name": "srcSchemeTransaction"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_harmonia_user_identity",
								"type": "DatasetReference"
							},
							"name": "srcUserIdentity"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "srcDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLoyaltyCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_FactMatchedTransaction",
								"type": "DatasetReference"
							},
							"name": "srcFactMatchedTransaction"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_FactMatchedTransaction",
								"type": "DatasetReference"
							},
							"name": "srcMaxID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactMatchedTransaction",
								"type": "DatasetReference"
							},
							"name": "snkMatchedTransaction"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_FactMatchedTransaction",
								"type": "DatasetReference"
							},
							"name": "snkMatchedTransactionE"
						}
					],
					"transformations": [
						{
							"name": "SelectMT"
						},
						{
							"name": "SelectPT"
						},
						{
							"name": "SelectST"
						},
						{
							"name": "SelectUI"
						},
						{
							"name": "JoinMtPt"
						},
						{
							"name": "JoinMtPtSt"
						},
						{
							"name": "JoinMtPtStUi"
						},
						{
							"name": "SelectDu"
						},
						{
							"name": "SelectDl"
						},
						{
							"name": "JoinMtPtStUiDu"
						},
						{
							"name": "JoinMtPtStUiDuDl"
						},
						{
							"name": "IsExportedColumn"
						},
						{
							"name": "SelectFmt"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsExportedCol"
						},
						{
							"name": "AdditionalColumn"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "UpdateExistingRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_id as integer,\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tmatching_type as string,\n\t\tstatus as string,\n\t\tpayment_transaction_id as integer,\n\t\tscheme_transaction_id as integer,\n\t\textra_fields as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcMatchedTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tstatus as string,\n\t\tuser_identity_id as integer,\n\t\textra_fields as string,\n\t\tsettlement_key as string,\n\t\tprovider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tstatus as string,\n\t\textra_fields as string,\n\t\tprovider_slug as string,\n\t\tpayment_provider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tloyalty_id as string,\n\t\tscheme_account_id as integer,\n\t\tuser_id as integer,\n\t\tcredentials as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserIdentity\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcFactMatchedTransaction\nsource(output(\n\t\tMaxFactMTID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxFactMTID FROM Fact.MatchedTransaction',\n\tformat: 'query',\n\tstaged: false) ~> srcMaxID\nsrcMatchedTransaction select(mapColumn(\n\t\t{mt.id} = id,\n\t\t{mt.created_at} = created_at,\n\t\t{mt.updated_at} = updated_at,\n\t\t{mt.merchant_identifier_id} = merchant_identifier_id,\n\t\t{mt.transaction_id} = transaction_id,\n\t\t{mt.transaction_date} = transaction_date,\n\t\t{mt.spend_amount} = spend_amount,\n\t\t{mt.spend_multiplier} = spend_multiplier,\n\t\t{mt.spend_currency} = spend_currency,\n\t\t{mt.card_token} = card_token,\n\t\t{mt.matching_type} = matching_type,\n\t\t{mt.status} = status,\n\t\t{mt.payment_transaction_id} = payment_transaction_id,\n\t\t{mt.scheme_transaction_id} = scheme_transaction_id,\n\t\t{mt.extra_fields} = extra_fields\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectMT\nsrcPaymentTransaction select(mapColumn(\n\t\t{pt.id} = id,\n\t\t{pt.created_at} = created_at,\n\t\t{pt.updated_at} = updated_at,\n\t\t{pt.merchant_identifier_ids} = merchant_identifier_ids,\n\t\t{pt.transaction_id} = transaction_id,\n\t\t{pt.transaction_date} = transaction_date,\n\t\t{pt.spend_amount} = spend_amount,\n\t\t{pt.spend_multiplier} = spend_multiplier,\n\t\t{pt.spend_currency} = spend_currency,\n\t\t{pt.card_token} = card_token,\n\t\t{pt.status} = status,\n\t\t{pt.user_identity_id} = user_identity_id,\n\t\t{pt.extra_fields} = extra_fields,\n\t\t{pt.settlement_key} = settlement_key,\n\t\t{pt.provider_slug} = provider_slug,\n\t\t{pt.auth_code} = auth_code,\n\t\t{pt.has_time} = has_time,\n\t\t{pt.match_group} = match_group,\n\t\t{pt.first_six} = first_six,\n\t\t{pt.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPT\nsrcSchemeTransaction select(mapColumn(\n\t\t{st.id} = id,\n\t\t{st.created_at} = created_at,\n\t\t{st.updated_at} = updated_at,\n\t\t{st.merchant_identifier_ids} = merchant_identifier_ids,\n\t\t{st.transaction_id} = transaction_id,\n\t\t{st.transaction_date} = transaction_date,\n\t\t{st.spend_amount} = spend_amount,\n\t\t{st.spend_multiplier} = spend_multiplier,\n\t\t{st.spend_currency} = spend_currency,\n\t\t{st.status} = status,\n\t\t{st.extra_fields} = extra_fields,\n\t\t{st.provider_slug} = provider_slug,\n\t\t{st.payment_provider_slug} = payment_provider_slug,\n\t\t{st.auth_code} = auth_code,\n\t\t{st.has_time} = has_time,\n\t\t{st.match_group} = match_group,\n\t\t{st.first_six} = first_six,\n\t\t{st.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectST\nsrcUserIdentity select(mapColumn(\n\t\t{ui.id} = id,\n\t\t{ui.created_at} = created_at,\n\t\t{ui.updated_at} = updated_at,\n\t\t{ui.loyalty_id} = loyalty_id,\n\t\t{ui.scheme_account_id} = scheme_account_id,\n\t\t{ui.user_id} = user_id,\n\t\t{ui.credentials} = credentials,\n\t\t{ui.first_six} = first_six,\n\t\t{ui.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUI\nSelectMT, SelectPT join({mt.payment_transaction_id} == {pt.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPt\nJoinMtPt, SelectST join({mt.scheme_transaction_id} == {st.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtSt\nJoinMtPtSt, SelectUI join({pt.user_identity_id} == {ui.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUi\nsrcDimUser select(mapColumn(\n\t\t{du.ID} = ID,\n\t\t{du.Channel} = Channel,\n\t\t{du.Organisation} = Organisation,\n\t\t{du.Client} = Client,\n\t\t{du.ExternalID} = ExternalID,\n\t\t{du.IsActive} = IsActive,\n\t\t{du.IsCurrent} = IsCurrent,\n\t\t{du.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDu\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dl.ID} = ID,\n\t\t{dl.Merchant} = Merchant,\n\t\t{dl.Category} = Category,\n\t\t{dl.IsActive} = IsActive,\n\t\t{dl.IsCurrent} = IsCurrent,\n\t\t{dl.SourceLCKey} = SourceLCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDl\nJoinMtPtStUi, SelectDu join({ui.user_id} == {du.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUiDu\nJoinMtPtStUiDu, SelectDl join({ui.scheme_account_id} == {dl.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUiDuDl\nNewExistingSplit@NewRecord derive({new.IsExported} = case({mt.status} == 'EXPORTED', 1, 0)) ~> IsExportedColumn\nsrcFactMatchedTransaction select(mapColumn(\n\t\t{fmt.ID} = ID,\n\t\t{fmt.SourceMTKey} = SourceMTKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFmt\nJoinMaxID, SelectFmt lookup({mt.id} == {fmt.SourceMTKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nAdditionalColumn split(isNull({fmt.SourceMTKey}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@ExistingRecord derive({new.IsExported} = case({mt.status} == 'EXPORTED', 1, 0)) ~> IsExportedCol\nLookupExistingRecords derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalColumn\nJoinMtPtStUiDuDl, srcMaxID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nIsExportedCol alterRow(updateIf({fmt.ID}<=MaxFactMTID)) ~> UpdateExistingRecords\nIsExportedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tMerchantIdentifierID = {mt.merchant_identifier_id},\n\t\tTransactionID = {mt.transaction_id},\n\t\tPaymentTransactionID = {mt.payment_transaction_id},\n\t\tSchemeTransactionID = {mt.scheme_transaction_id},\n\t\tspend_amount = {mt.spend_amount},\n\t\tspend_multiplier = {mt.spend_multiplier},\n\t\tspend_currency = {mt.spend_currency},\n\t\tcard_token = {mt.card_token},\n\t\tMatchingType = {mt.matching_type},\n\t\tTransactionDate = {mt.transaction_date},\n\t\tCreateDate = {mt.created_at},\n\t\tExportDate = {mt.updated_at},\n\t\tIsMTExported = {new.IsExported},\n\t\tSourceMTKey = {mt.id},\n\t\tDimUserID = {du.ID},\n\t\tDimLoyaltyCardID = {dl.ID},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkMatchedTransaction\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Fact.MatchedTransaction ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Fact.MatchedTransaction OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {fmt.ID},\n\t\tExportDate = {mt.updated_at},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkMatchedTransactionE"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_matched_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_payment_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_scheme_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_harmonia_user_identity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactMatchedTransaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactUserLC')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.UserLC",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalschemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "srcHistoryHistoricalSchemeAccountEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "srcDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactUserLC",
								"type": "DatasetReference"
							},
							"name": "snkFactUserLC"
						}
					],
					"transformations": [
						{
							"name": "SelectUSA"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectUSR"
						},
						{
							"name": "SelectLC"
						},
						{
							"name": "JoinUsaSa"
						},
						{
							"name": "JoinUsaSaUsr"
						},
						{
							"name": "JoinUsaSaUsrLc"
						},
						{
							"name": "GroupRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "CurrentRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcHistoryHistoricalSchemeAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLC\nsrcHistoryHistoricalSchemeAccountEntry select(mapColumn(\n\t\t{usa.id} = id,\n\t\t{usa.created} = created,\n\t\t{usa.change_type} = change_type,\n\t\t{usa.instance_id} = instance_id,\n\t\t{usa.channel} = channel,\n\t\t{usa.user_id} = user_id,\n\t\t{usa.scheme_account_id} = scheme_account_id,\n\t\t{usa.change_details} = change_details\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSA\nsrcSchemeSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimUser select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nsrcDimLC select(mapColumn(\n\t\t{lc.ID} = ID,\n\t\t{lc.LCStatus} = LCStatus,\n\t\t{lc.AddDate} = AddDate,\n\t\t{lc.JoinDate} = JoinDate,\n\t\t{lc.EffFromDate} = EffFromDate,\n\t\t{lc.EffToDate} = EffToDate,\n\t\t{lc.ProcessDate} = ProcessDate,\n\t\t{lc.IsCurrent} = IsCurrent,\n\t\t{lc.SourceLCKey} = SourceLCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nSelectUSA, SelectSA join({usa.scheme_account_id} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSa\nJoinUsaSa, SelectUSR join({usa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsr\nJoinUsaSaUsr, SelectLC join({usa.scheme_account_id} == {lc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsrLc\nCurrentRecords aggregate(groupBy({usa.scheme_account_id},\n\t\t{lc.ID},\n\t\t{usa.user_id},\n\t\t{usr.ID},\n\t\t{sa.link_date},\n\t\t{sa.join_date},\n\t\t{usa.change_type},\n\t\t{usa.instance_id},\n\t\t{usa.created}),\n\tUserCount = count({usa.user_id})) ~> GroupRecords\nGroupRecords derive({new.IsCreated} = case({usa.change_type}=='create', 1, 0),\n\t\t{new.ProcessDate} = toUTC(currentUTC())) ~> AdditionalFields\nJoinUsaSaUsrLc filter(or({usr.IsCurrent}==toBoolean('true'),{lc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tLCJoinDate as timestamp,\n\t\tLCAddDate as timestamp,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tLoyaltyCardID = {lc.ID},\n\t\tLCJoinDate = {sa.join_date},\n\t\tLCAddDate = {sa.link_date},\n\t\tIsCreated = {new.IsCreated},\n\t\tCreateDate = {usa.created},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserLC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalschemeaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactUserLC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactUserLC_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.UserLC",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_ubiquity_schemeaccountentry",
								"type": "DatasetReference"
							},
							"name": "srcUbiquitySchemeAccountEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_scheme_schemeaccount",
								"type": "DatasetReference"
							},
							"name": "srcSchemeSchemeAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "srcDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimLoyaltyCard",
								"type": "DatasetReference"
							},
							"name": "srcDimLC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactUserLC",
								"type": "DatasetReference"
							},
							"name": "snkFactUserLC"
						}
					],
					"transformations": [
						{
							"name": "SelectUSA"
						},
						{
							"name": "SelectSA"
						},
						{
							"name": "SelectUSR"
						},
						{
							"name": "SelectLC"
						},
						{
							"name": "JoinUsaSa"
						},
						{
							"name": "JoinUsaSaUsr"
						},
						{
							"name": "JoinUsaSaUsrLc"
						},
						{
							"name": "GroupRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "CurrentRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tscheme_account_id as integer,\n\t\tuser_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUbiquitySchemeAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLC\nsrcUbiquitySchemeAccountEntry select(mapColumn(\n\t\t{usa.id} = id,\n\t\t{usa.scheme_account_id} = scheme_account_id,\n\t\t{usa.user_id} = user_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSA\nsrcSchemeSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimUser select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nsrcDimLC select(mapColumn(\n\t\t{lc.ID} = ID,\n\t\t{lc.LCStatus} = LCStatus,\n\t\t{lc.AddDate} = AddDate,\n\t\t{lc.JoinDate} = JoinDate,\n\t\t{lc.EffFromDate} = EffFromDate,\n\t\t{lc.EffToDate} = EffToDate,\n\t\t{lc.ProcessDate} = ProcessDate,\n\t\t{lc.IsCurrent} = IsCurrent,\n\t\t{lc.SourceLCKey} = SourceLCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nSelectUSA, SelectSA join({usa.scheme_account_id} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSa\nJoinUsaSa, SelectUSR join({usa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsr\nJoinUsaSaUsr, SelectLC join({usa.scheme_account_id} == {lc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsrLc\nCurrentRecords aggregate(groupBy({usa.scheme_account_id},\n\t\t{lc.ID},\n\t\t{usa.user_id},\n\t\t{usr.ID},\n\t\t{sa.link_date},\n\t\t{sa.join_date}),\n\tUserCount = count({usa.user_id})) ~> GroupRecords\nGroupRecords derive({new.ProcessDate} = toUTC(currentUTC()),\n\t\t{new.IsCreated} = 1) ~> AdditionalFields\nJoinUsaSaUsrLc filter(or({usr.IsCurrent}==toBoolean('true'),{lc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tLCJoinDate as timestamp,\n\t\tLCAddDate as timestamp,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tLoyaltyCardID = {lc.ID},\n\t\tLCJoinDate = {sa.join_date},\n\t\tLCAddDate = {sa.link_date},\n\t\tIsCreated = {new.IsCreated},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserLC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_ubiquity_schemeaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_scheme_schemeaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimLoyaltyCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactUserLC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactUserPC')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.UserPC",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_history_historicalpaymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "srcHistoryHistoricalPaymentCardAccountEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "srcDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactUserPC",
								"type": "DatasetReference"
							},
							"name": "snkFactUserPC"
						}
					],
					"transformations": [
						{
							"name": "SelectUPA"
						},
						{
							"name": "SelectPA"
						},
						{
							"name": "SelectUSR"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "JoinUpaPa"
						},
						{
							"name": "JoinUpaPaUsr"
						},
						{
							"name": "JoinUpaPaUsrPc"
						},
						{
							"name": "GroupRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "CurrentRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcHistoryHistoricalPaymentCardAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCardAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcHistoryHistoricalPaymentCardAccountEntry select(mapColumn(\n\t\t{upa.id} = id,\n\t\t{upa.created} = created,\n\t\t{upa.change_type} = change_type,\n\t\t{upa.instance_id} = instance_id,\n\t\t{upa.channel} = channel,\n\t\t{upa.user_id} = user_id,\n\t\t{upa.payment_card_account_id} = payment_card_account_id,\n\t\t{upa.change_details} = change_details\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUPA\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPA\nsrcDimUser select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nsrcDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectUPA, SelectPA join({upa.payment_card_account_id} == {pca.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPa\nJoinUpaPa, SelectUSR join({upa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsr\nJoinUpaPaUsr, SelectPC join({upa.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsrPc\nCurrentRecords aggregate(groupBy({upa.payment_card_account_id},\n\t\t{dpc.ID},\n\t\t{upa.user_id},\n\t\t{usr.ID},\n\t\t{upa.change_type},\n\t\t{upa.instance_id},\n\t\t{upa.created}),\n\tUserCount = count({upa.user_id})) ~> GroupRecords\nGroupRecords derive({new.ProcessDate} = toUTC(currentUTC()),\n\t\t{new.IsCreated} = case({upa.change_type}=='create', 1, 0)) ~> AdditionalFields\nJoinUpaPaUsrPc filter(or({usr.IsCurrent}==toBoolean('true'),{dpc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tPaymentCardID as long,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsCreated = {new.IsCreated},\n\t\tCreateDate = {upa.created},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserPC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_history_historicalpaymentcardaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactUserPC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadFactUserPC_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load fact.UserPC",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_ubiquity_paymentcardaccountentry",
								"type": "DatasetReference"
							},
							"name": "srcUbiquityPaymentCardAccountEntry"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimUser",
								"type": "DatasetReference"
							},
							"name": "srcDimUser"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPC"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_FactUserPC",
								"type": "DatasetReference"
							},
							"name": "snkFactUserPC"
						}
					],
					"transformations": [
						{
							"name": "SelectUPA"
						},
						{
							"name": "SelectPA"
						},
						{
							"name": "SelectUSR"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "JoinUpaPa"
						},
						{
							"name": "JoinUpaPaUsr"
						},
						{
							"name": "JoinUpaPaUsrPc"
						},
						{
							"name": "GroupRecords"
						},
						{
							"name": "AdditionalFields"
						},
						{
							"name": "CurrentRecords"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tpayment_card_account_id as integer,\n\t\tuser_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUbiquityPaymentCardAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCardAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcUbiquityPaymentCardAccountEntry select(mapColumn(\n\t\t{upa.id} = id,\n\t\t{upa.payment_card_account_id} = payment_card_account_id,\n\t\t{upa.user_id} = user_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUPA\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPA\nsrcDimUser select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nsrcDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectUPA, SelectPA join({upa.payment_card_account_id} == {pca.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPa\nJoinUpaPa, SelectUSR join({upa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsr\nJoinUpaPaUsr, SelectPC join({upa.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsrPc\nCurrentRecords aggregate(groupBy({upa.payment_card_account_id},\n\t\t{dpc.ID},\n\t\t{upa.user_id},\n\t\t{usr.ID}),\n\tUserCount = count({upa.user_id})) ~> GroupRecords\nGroupRecords derive({new.ProcessDate} = toUTC(currentUTC()),\n\t\t{new.IsCreated} = 1) ~> AdditionalFields\nJoinUpaPaUsrPc filter(or({usr.IsCurrent}==toBoolean('true'),{dpc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tPaymentCardID as long,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsCreated = {new.IsCreated},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserPC"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_ubiquity_paymentcardaccountentry')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimUser')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_FactUserPC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load Payment Card Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_syn_dwhpool_vw_history_historicalpaymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcard",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardissuer",
								"type": "DatasetReference"
							},
							"name": "scrPaymentCardIssuer"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefPaymentCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimPCID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEU"
						}
					],
					"transformations": [
						{
							"name": "JoinPCAPC"
						},
						{
							"name": "SelectPCA"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "SelectPCI"
						},
						{
							"name": "JoinPCAPCPCI"
						},
						{
							"name": "JoinPCAPCPCIRef"
						},
						{
							"name": "SelectRefPC"
						},
						{
							"name": "SelectDimPC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\tcreated as string,\n\t\tupdated as string,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcPaymentCardAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tscan_message as string,\n\t\tinput_label as string,\n\t\tis_active as boolean,\n\t\tsystem as string,\n\t\ttype as string,\n\t\ttoken_method as integer,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCard\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\timage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrPaymentCardIssuer\nsource(output(\n\t\t{_col0_} as integer,\n\t\t{_col1_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> srcRefPaymentCardStatus\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPaymentCard\nsource(output(\n\t\tMaxDimPCID as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimPCID FROM [Dim].[PaymentCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimPCID\nSelectPCA, SelectPC join({pca.payment_card_id} == {pc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPC\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.name_on_card} = name_on_card,\n\t\t{pca.start_month} = start_month,\n\t\t{pca.start_year} = start_year,\n\t\t{pca.expiry_month} = expiry_month,\n\t\t{pca.expiry_year} = expiry_year,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.issuer_id} = issuer_id,\n\t\t{pca.payment_card_id} = payment_card_id,\n\t\t{pca.token} = token,\n\t\t{pca.country} = country,\n\t\t{pca.currency_code} = currency_code,\n\t\t{pca.pan_end} = pan_end,\n\t\t{pca.pan_start} = pan_start,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.fingerprint} = fingerprint\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCA\nsrcPaymentCard select(mapColumn(\n\t\t{pc.id} = id,\n\t\t{pc.name} = name,\n\t\t{pc.slug} = slug,\n\t\t{pc.is_active} = is_active,\n\t\t{pc.type} = type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nscrPaymentCardIssuer select(mapColumn(\n\t\t{pci.id} = id,\n\t\t{pci.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCI\nJoinPCAPC, SelectPCI join({pca.issuer_id} == {pci.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCI\nJoinPCAPCPCI, SelectRefPC join({pca.status} == {ref.PCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRef\nsrcRefPaymentCardStatus select(mapColumn(\n\t\t{ref.PCCode} = {_col0_},\n\t\t{ref.PCStatus} = {_col1_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPC\nsrcDimPaymentCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.NameOnCard} = NameOnCard,\n\t\t{dim.PANTruncation} = PANTruncation,\n\t\t{dim.ValidFrom} = ValidFrom,\n\t\t{dim.ValidTo} = ValidTo,\n\t\t{dim.Token} = Token,\n\t\t{dim.Fingerprint} = Fingerprint,\n\t\t{dim.Issuer} = Issuer,\n\t\t{dim.CardProvider} = CardProvider,\n\t\t{dim.Slug} = Slug,\n\t\t{dim.CardType} = CardType,\n\t\t{dim.CardStatus} = CardStatus,\n\t\t{dim.IsDeleted} = IsDeleted,\n\t\t{dim.Country} = Country,\n\t\t{dim.CCYCode} = CCYCode,\n\t\t{dim.CardCreateDate} = CardCreateDate,\n\t\t{dim.CardUpdateDate} = CardUpdateDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourcePCKey} = SourcePCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimPC\nJoinPCAPCPCIRef, MaxDimPCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimPC lookup({pca.fingerprint} == {dim.Fingerprint}\n\t&& {new.ValidTo} == {dim.ValidTo},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimPCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimPCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ValidFrom} = toDate(concat(right(concat('20',toString({pca.start_year})),4),'-',right(concat('0',toString({pca.start_month})),2),'-01')),\n\t\t{new.ValidTo} = lastDayOfMonth(toDate(concat(right(concat('20',toString({pca.expiry_year})),4),'-',right(concat('0',toString({pca.expiry_month})),2),'-01'))),\n\t\t{new.PANTruncation} = concat({pca.pan_start}, 'xxx', {pca.pan_end}),\n\t\t{new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.PaymentCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.PaymentCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimPaymentCardEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_syn_dwhpool_vw_history_historicalpaymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardissuer')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_LoadPaymentCard_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Data flow task to load Payment Card Dimension",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardaccount",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCardAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcard",
								"type": "DatasetReference"
							},
							"name": "srcPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_hermes_paymentcardissuer",
								"type": "DatasetReference"
							},
							"name": "scrPaymentCardIssuer"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_PaymentCardStatus",
								"type": "DatasetReference"
							},
							"name": "srcRefPaymentCardStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "srcDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "MaxDimPCID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCard"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEI"
						},
						{
							"dataset": {
								"referenceName": "ds_Syn_DimPaymentCard",
								"type": "DatasetReference"
							},
							"name": "snkDimPaymentCardEU"
						}
					],
					"transformations": [
						{
							"name": "JoinPCAPC"
						},
						{
							"name": "SelectPCA"
						},
						{
							"name": "SelectPC"
						},
						{
							"name": "SelectPCI"
						},
						{
							"name": "JoinPCAPCPCI"
						},
						{
							"name": "JoinPCAPCPCIRef"
						},
						{
							"name": "SelectRefPC"
						},
						{
							"name": "SelectDimPC"
						},
						{
							"name": "JoinMaxID"
						},
						{
							"name": "LookupExistingRecords"
						},
						{
							"name": "NewExistingSplit"
						},
						{
							"name": "IsCurrentNew"
						},
						{
							"name": "IsCurrentInsert"
						},
						{
							"name": "IsCurrentUpdate"
						},
						{
							"name": "Filter"
						},
						{
							"name": "UpdateExistingRecords"
						},
						{
							"name": "AdditionalFields"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCardAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tscan_message as string,\n\t\tinput_label as string,\n\t\tis_active as boolean,\n\t\tsystem as string,\n\t\ttype as string,\n\t\ttoken_method as integer,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCard\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\timage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrPaymentCardIssuer\nsource(output(\n\t\t{_col0_} as integer,\n\t\t{_col1_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> srcRefPaymentCardStatus\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPaymentCard\nsource(output(\n\t\tMaxDimPCID as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimPCID FROM [Dim].[PaymentCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimPCID\nSelectPCA, SelectPC join({pca.payment_card_id} == {pc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPC\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.name_on_card} = name_on_card,\n\t\t{pca.start_month} = start_month,\n\t\t{pca.start_year} = start_year,\n\t\t{pca.expiry_month} = expiry_month,\n\t\t{pca.expiry_year} = expiry_year,\n\t\t{pca.status} = status,\n\t\t{pca.order} = order,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.issuer_id} = issuer_id,\n\t\t{pca.payment_card_id} = payment_card_id,\n\t\t{pca.token} = token,\n\t\t{pca.country} = country,\n\t\t{pca.currency_code} = currency_code,\n\t\t{pca.pan_end} = pan_end,\n\t\t{pca.pan_start} = pan_start,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.fingerprint} = fingerprint,\n\t\t{pca.psp_token} = psp_token,\n\t\t{pca.consents} = consents,\n\t\t{pca.hash} = hash,\n\t\t{pca.formatted_images} = formatted_images,\n\t\t{pca.pll_links} = pll_links,\n\t\t{pca.agent_data} = agent_data\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCA\nsrcPaymentCard select(mapColumn(\n\t\t{pc.id} = id,\n\t\t{pc.name} = name,\n\t\t{pc.slug} = slug,\n\t\t{pc.is_active} = is_active,\n\t\t{pc.type} = type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nscrPaymentCardIssuer select(mapColumn(\n\t\t{pci.id} = id,\n\t\t{pci.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCI\nJoinPCAPC, SelectPCI join({pca.issuer_id} == {pci.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCI\nJoinPCAPCPCI, SelectRefPC join({pca.status} == {ref.PCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRef\nsrcRefPaymentCardStatus select(mapColumn(\n\t\t{ref.PCCode} = {_col0_},\n\t\t{ref.PCStatus} = {_col1_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPC\nsrcDimPaymentCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.NameOnCard} = NameOnCard,\n\t\t{dim.PANTruncation} = PANTruncation,\n\t\t{dim.ValidFrom} = ValidFrom,\n\t\t{dim.ValidTo} = ValidTo,\n\t\t{dim.Token} = Token,\n\t\t{dim.Fingerprint} = Fingerprint,\n\t\t{dim.Issuer} = Issuer,\n\t\t{dim.CardProvider} = CardProvider,\n\t\t{dim.Slug} = Slug,\n\t\t{dim.CardType} = CardType,\n\t\t{dim.CardStatus} = CardStatus,\n\t\t{dim.IsDeleted} = IsDeleted,\n\t\t{dim.Country} = Country,\n\t\t{dim.CCYCode} = CCYCode,\n\t\t{dim.CardCreateDate} = CardCreateDate,\n\t\t{dim.CardUpdateDate} = CardUpdateDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourcePCKey} = SourcePCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimPC\nJoinPCAPCPCIRef, MaxDimPCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimPC lookup({pca.fingerprint} == {dim.Fingerprint}\n\t&& {new.ValidTo} == {dim.ValidTo},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimPCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimPCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ValidFrom} = toDate(concat(right(concat('20',toString({pca.start_year})),4),'-',right(concat('0',toString({pca.start_month})),2),'-01')),\n\t\t{new.ValidTo} = lastDayOfMonth(toDate(concat(right(concat('20',toString({pca.expiry_year})),4),'-',right(concat('0',toString({pca.expiry_month})),2),'-01'))),\n\t\t{new.PANTruncation} = concat({pca.pan_start}, 'xxx', {pca.pan_end}),\n\t\t{new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourcePCKey = {pca.id}\n\t)) ~> snkDimPaymentCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.PaymentCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.PaymentCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkDimPaymentCardEU"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardaccount')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcard')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_hermes_paymentcardissuer')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_PaymentCardStatus')]",
				"[concat(variables('workspaceId'), '/datasets/ds_Syn_DimPaymentCard')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 Create Schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This script creates all the required schemas for the dwh",
				"folder": {
					"name": "01 Payment Card"
				},
				"content": {
					"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Dim' )\n    EXEC('CREATE SCHEMA [Dim]');\nGO\n--GRANT CONTROL ON SCHEMA :: Dim TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Fact' )\n    EXEC('CREATE SCHEMA [Fact]');\nGO\n--GRANT CONTROL ON SCHEMA :: Fact TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Ctl' )\n    EXEC('CREATE SCHEMA [Ctl]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Err' )\n    EXEC('CREATE SCHEMA [Err]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Rpt' )\n    EXEC('CREATE SCHEMA [Rpt]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Mdm' )\n    EXEC('CREATE SCHEMA [Mdm]');\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02 Create Dim_PaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Script to create an empty Payment Dimension",
				"folder": {
					"name": "01 Payment Card"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: Fingerprint, ValidTo (with Is_deleted=0 in only 1 instance?)\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03 usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Script creates a stored procedure which builds the external objects required to read source parquet file in the data lake & create a view on top of it.",
				"folder": {
					"name": "01 Payment Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_CreateExternalObjects', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_CreateExternalObjects]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_CreateExternalObjects] \n    @Yr     VARCHAR(4),\n    @Mt     VARCHAR(2),\n    @Dy     VARCHAR(2)\nAS\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourPasswordHere@&'\n--CREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\n--WITH IDENTITY = 'Managed Identity';\n--GO\n\nDECLARE \n    @tbl VARCHAR(50),\n    @col VARCHAR(1000),\n    @loc VARCHAR(1000),\n    @sql VARCHAR(1000)\n\n--history_historicalpaymentcardaccount\nSET @tbl = 'history_historicalpaymentcardaccount'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [user_id] INT,\n    [body] VARCHAR(4000),\n    [change_details] VARCHAR(255)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = ef_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n--GRANT db_owner ON OBJECT::dbo.usp_CreateExternalObjects TO binkuksouthprodsynapse;\n--EXEC sp_addrolemember N'db_owner', N'binkuksouthprodsynapse'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Script to create a view pointing to the external table of the source table history_historicalpaymentcardaccount in datalake",
				"folder": {
					"name": "01 Payment Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(4) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05 Update Dim_PaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This script creates a stored procedure which updates the Payment Card dimension.",
				"folder": {
					"name": "01 Payment Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimPaymentCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimPaymentCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimPaymentCard] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent,\n  dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.PaymentCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EventID,\n    ValidTo,\n    Fingerprint,\n    CardCreateDate,\n    CardCreateDate AS EffFromDate,\n    LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourcePCKey\n  FROM Dim.PaymentCard\n) updt\nON updt.ID = dim.ID\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Date Dimension')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "-- Create external table with date dimension in it\nCREATE EXTERNAL DATA SOURCE [eds_reference] WITH \n(\tTYPE = HADOOP,\n\tLOCATION = N'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Reference/',\n\tCREDENTIAL = [SynapseIdentity]\n);\n\nCREATE EXTERNAL FILE FORMAT [ef_reference_date_dimension] \nWITH (\n\tFORMAT_TYPE = PARQUET, \n\tDATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\nCREATE EXTERNAL TABLE [dbo].[ext_date_dimension]\n( \n\t[id] INT  NOT NULL,\n\t[date] DATE NOT NULL,\n    [day] INT NOT NULL,\n    [dayName] VARCHAR(9) NOT NULL,\n    [dayOfWeek] INT NOT NULL,\n    [dayOfYear] INT NOT NULL,\n    [weekNumber] INT NOT NULL,\n\t[month] INT NOT NULL,\n    [monthName] VARCHAR(9) NOT NULL,\n    [monthStart] DATE NOT NULL,\n    [monthEnd] DATE NOT NULL,\n    [monthYear] INT NOT NULL,\n    [quarter] INT NOT NULL,\n    [year] INT NOT NULL\n)\nWITH (DATA_SOURCE = [eds_reference], LOCATION = 'date_dimension_2020-01-01_2040-01-01_v1.snappy.parquet', FILE_FORMAT = [ef_reference_date_dimension])\n\nSELECT TOP 10 * FROM [dbo].[ext_date_dimension] ORDER BY Id\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [Dim].[Date]\n( \n\t[id] INT  NOT NULL,\n\t[date] DATE NOT NULL,\n    [day] INT NOT NULL,\n    [dayName] VARCHAR(9) NOT NULL,\n    [dayOfWeek] INT NOT NULL,\n    [dayOfYear] INT NOT NULL,\n    [weekNumber] INT NOT NULL,\n\t[month] INT NOT NULL,\n    [monthName] VARCHAR(9) NOT NULL,\n    [monthStart] DATE NOT NULL,\n    [monthEnd] DATE NOT NULL,\n    [monthYear] INT NOT NULL,\n    [quarter] INT NOT NULL,\n    [year] INT NOT NULL\n)\nWITH\n(\n\tCLUSTERED COLUMNSTORE INDEX,  \n    DISTRIBUTION = REPLICATE\n)\n\nINSERT INTO [Dim].[Date] SELECT * FROM [dbo].[ext_date_dimension]\n\nSELECT TOP 10 * FROM [Dim].[Date] ORDER BY Id\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create ext table - RK')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.ext_payment_card_paymentcard\nGO\n\nCREATE EXTERNAL TABLE dbo.ext_payment_card_paymentcard \n(    \n\t[id] int,    \n\t[name] VARCHAR(200),    \n\t[slug] VARCHAR(50),    \n\t[url] VARCHAR(200),    \n\t[scan_message] VARCHAR(100),    \n\t[input_label] VARCHAR(150),    \n\t[is_active] bit,    \n\t[system] VARCHAR(40),    \n\t[type] VARCHAR(40),    \n\t[token_method] int,    \n\t[formatted_images] VARCHAR(4000)    \n)    \nWITH    \n(               \n\tLOCATION = '2021/202102/20210210/',            \n\tDATA_SOURCE = eds_payment_card_paymentcard,             \n\tFILE_FORMAT = ef_payment_card_paymentcard            \n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalTableJsonIssue')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "--DROP EXTERNAL DATA SOURCE eds_scheme_schemeaccount_Test1\nCREATE EXTERNAL DATA SOURCE eds_scheme_schemeaccount_Test1\n    WITH    (   \n            LOCATION = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_scheme_schemeaccount/',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )\n\n--DROP EXTERNAL FILE FORMAT eff_scheme_schemeaccount_Test1\nCREATE EXTERNAL FILE FORMAT eff_scheme_schemeaccount_Test1\nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    )\n\n--DROP EXTERNAL TABLE dbo.ext_scheme_schemeaccount_Test1 \nCREATE EXTERNAL TABLE dbo.ext_scheme_schemeaccount_Test1 \n    (    [id]\t            INT,\n    [status]\t        INT,\n    [order]\t            INT,\n    [created]\t        DATETIME,\n    [updated]\t        DATETIME,\n    [scheme_id]\t        INT,\n    [is_deleted]\t    BIT,\n    [link_date]\t        DATETIME,\n    [join_date]\t        DATETIME,\n    [balances]\t        VARCHAR(4000),\n    [vouchers]\t        VARCHAR(MAX),\n    [barcode]\t        VARCHAR(250),\n    [card_number]\t    VARCHAR(250),\n    [transactions]\t    VARCHAR(4000),\n    [main_answer]\t    VARCHAR(250),\n    [pll_links]\t        VARCHAR(4000),\n    [formatted_images]  VARCHAR(4000))\n    WITH    (   \n            LOCATION = '2021/202105/20210516_real/',\n            DATA_SOURCE = eds_scheme_schemeaccount_Test1, \n            FILE_FORMAT = eff_scheme_schemeaccount_Test1\n            )\n\n--dwhpool\nSELECT TOP 10\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.[VoucherCode],\n   \n   js.[BurnType],\n   js.[BurnValue],\n   js.[BurnPrefix],\n   js.[BurnSuffix],\n   js.[BurnCurrency],\n   \n   js.[EarnType],\n   js.[EarnValue],\n   js.[EarnPrefix],\n   js.[EarnSuffix],\n   js.[EarnCurrency],\n   js.[EarnTargetValue],\n   \n   js.[VoucherState],\n   js.[SubText],\n   js.[Headline],\n   js.[BodyText],\n   js.[IssueDate],\n   js.[ExpiryDate],\n   js.[BarcodeType],\n   js.TCUrl\nFROM dbo.ext_scheme_schemeaccount_Test1  ext\nOUTER APPLY OPENJSON (JSON_VALUE(vouchers, '$'))\n   WITH (\n        [VoucherCode]            VARCHAR(32) '$.code',\n\n        [BurnType]               VARCHAR(32) '$.burn.type',\n        [BurnValue]              VARCHAR(32) '$.burn.value',\n        [BurnPrefix]             VARCHAR(32) '$.burn.prefix',\n        [BurnSuffix]             VARCHAR(32) '$.burn.suffix',\n        [BurnCurrency]           VARCHAR(32) '$.burn.Currency',\n\n        [EarnType]               VARCHAR(32) '$.earn.type',\n        [EarnValue]              VARCHAR(32) '$.earn.value',\n        [EarnPrefix]             VARCHAR(32) '$.earn.prefix',\n        [EarnSuffix]             VARCHAR(32) '$.earn.suffix',\n        [EarnCurrency]           VARCHAR(32) '$.earn.Currency',\n        [EarnTargetValue]        VARCHAR(32) '$.earn.target_value',\n\n        [VoucherState]           VARCHAR(32) '$.state',\n        [SubText]                VARCHAR(32) '$.subtext',\n        [Headline]               VARCHAR(32) '$.headline',\n        [BodyText]               VARCHAR(32) '$.body_text',\n        [IssueDate]              VARCHAR(32) '$.date_issued',\n        [ExpiryDate]             VARCHAR(32) '$.expiry_date',\n        [BarcodeType]            VARCHAR(32) '$.barcode_type',\n        [TCUrl]                  VARCHAR(100) '$.terms_and_conditions_url'   \n         ) AS js\nWHERE ext.vouchers <> '{}'\n   AND js.[VoucherState] <> 'inprogress'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Extract JSON - RK')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Sample query to extract json from ext_history_historicalpaymentcardaccount",
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "SELECT TOP 10\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    jset.[id],\n    jset.[name_on_card],\n    jset.[start_month],\n    jset.[start_year],\n    jset.[expiry_month],\n    jset.[expiry_year],\n    jset.[status],\n    jset.[created],\n    jset.[updated],\n    jset.[issuer_id],\n    jset.[payment_card_id],\n    jset.[token],\n    jset.[country],\n    jset.[currency_code],\n    jset.[pan_end],\n    jset.[pan_start],\n    jset.[is_deleted],\n    jset.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\n--CROSS APPLY OPENJSON (jsondata, '$.somelist') WITH (num int '$')\n--OUTER APPLY OPENJSON (JSON_VALUE(Body, '$'))\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(4) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS jset\n   WHERE ext.Id = 89\n\n/*\nSELECT TOP 10\n    ext.[id],\n    ext.[created],\n    ext.[change_type],\n    ext.[instance_id],\n    ext.[channel],\n    ext.[user_id],\n    ext.[body],\n    ext.[change_details],\n    JSON_VALUE(ext.body,'$.id') AS jsonid\nFROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nWHERE ext.Id = 89\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT01 Create Schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Dim' )\n    EXEC('CREATE SCHEMA [Dim]');\nGO\n--GRANT CONTROL ON SCHEMA :: Dim TO binkuksouthdevsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Fact' )\n    EXEC('CREATE SCHEMA [Fact]');\nGO\n--GRANT CONTROL ON SCHEMA :: Fact TO binkuksouthdevsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Ctl' )\n    EXEC('CREATE SCHEMA [Ctl]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Err' )\n    EXEC('CREATE SCHEMA [Err]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Rpt' )\n    EXEC('CREATE SCHEMA [Rpt]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Mdm' )\n    EXEC('CREATE SCHEMA [Mdm]');\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT02 Create usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_CreateExternalObjects', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_CreateExternalObjects]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_CreateExternalObjects] \n    @Yr     VARCHAR(4),\n    @Mt     VARCHAR(2),\n    @Dy     VARCHAR(2)\nAS\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourPasswordHere@&'\n--CREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\n--WITH IDENTITY = 'Managed Identity';\n--GO\n\nDECLARE \n    @tbl VARCHAR(50),\n    @col VARCHAR(1000),\n    @loc VARCHAR(1000),\n    @sql VARCHAR(1000)\n\n/****************************************history_historicalpaymentcardaccount****************************************/\nSET @tbl = 'history_historicalpaymentcardaccount'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [user_id] INT,\n    [body] VARCHAR(4000),\n    [change_details] VARCHAR(255)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalcustomuser****************************************/\nSET @tbl = 'history_historicalcustomuser'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [change_details] VARCHAR(255),\n    [body] VARCHAR(4000),\n    [email] VARCHAR(100),\n    [external_id] VARCHAR(100)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n--GRANT db_owner ON OBJECT::dbo.usp_CreateExternalObjects TO binkuksouthdevsynapse;\n--EXEC sp_addrolemember N'db_owner', N'binkuksouthdevsynapse'\n\n/****************************************scheme_schemeaccount****************************************/\nSET @tbl = 'scheme_schemeaccount'\nSET @Col = \n    '\n    [id]\t            INT,\n    [status]\t        INT,\n    [order]\t            INT,\n    [created]\t        DATETIME,\n    [updated]\t        DATETIME,\n    [scheme_id]\t        INT,\n    [is_deleted]\t    BIT,\n    [link_date]\t        DATETIME,\n    [join_date]\t        DATETIME,\n    [balances]\t        VARCHAR(4000),\n    [vouchers]\t        VARCHAR(8000),\n    [barcode]\t        VARCHAR(250),\n    [card_number]\t    VARCHAR(250),\n    [transactions]\t    VARCHAR(4000),\n    [main_answer]\t    VARCHAR(250),\n    [pll_links]\t        VARCHAR(4000),\n    [formatted_images]  VARCHAR(4000)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalschemeaccount****************************************/\nSET @tbl = 'history_historicalschemeaccount'\nSET @Col = \n    '\n    [id]\t          INT,\n    [created]\t      DATETIME,\n    [change_type]     VARCHAR(6),\n    [instance_id]     VARCHAR(255),\n    [channel]         VARCHAR(255),\n    [user_id]         INT,\n    [body]            VARCHAR(4000),\n    [change_details]  VARCHAR(255),\n    [journey]         VARCHAR(8)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT03 Create DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LCVoucher]') AND type in (N'U'))\nDROP TABLE [Dim].[LCVoucher];\n\nCREATE TABLE Dim.LCVoucher\n  (  \n  ID                INT IDENTITY(1,1) NOT NULL,\n  LoyaltyCardID     INT NULL,--Check\n  VoucherCode       VARCHAR(32) NOT NULL,\n  --VoucherValue      NUMERIC(8,2) NULL,\n  --Prefix            VARCHAR(32) NULL,\n  --Suffix            VARCHAR(32) NULL,\n  --Currency          VARCHAR(3) NULL,\n  --VoucherDesc       VARCHAR(100) NULL,\n  --RewardTier        VARCHAR(10) NULL,\n  BurnType          VARCHAR(32) NULL,\n  BurnValue         NUMERIC(8,2) NULL,\n  BurnPrefix        VARCHAR(32) NULL,\n  BurnSuffix        VARCHAR(32) NULL,\n  BurnCurrency      VARCHAR(32) NULL, \n  EarnType          VARCHAR(32) NULL,\n  EarnValue         NUMERIC(8,2) NULL,\n  EarnPrefix        VARCHAR(32) NULL,\n  EarnSuffix        VARCHAR(32) NULL,\n  EarnCurrency      VARCHAR(32) NULL, \n  EarnTargetValue   NUMERIC(8,2) NULL,\n  VoucherState      VARCHAR(32) NULL,\n  Subtext           VARCHAR(32) NULL,\n  Headline          VARCHAR(32) NULL,\n  BodyText          VARCHAR(32) NULL,\n  IssueDate         DATETIME NULL,\n  RedeemDate        DATETIME NULL,\n  ExpiryDate        DATETIME NULL,\n  BarcodeType       VARCHAR(32) NULL,\n  TCUrl             VARCHAR(100) NULL,\n  EffFromDate       DATETIME NOT NULL,\n  EffToDate         DATETIME NULL,\n  ProcessDate       DATETIME NOT NULL,\n  IsCurrent         BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT04 Create DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: a, b (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of a & b - toString(crc32(a, b))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LoyaltyCard]') AND type in (N'U'))\nDROP TABLE [Dim].[LoyaltyCard];\n\nCREATE TABLE Dim.LoyaltyCard\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(256) NOT NULL,\n  PlanName            VARCHAR(400) NULL,\n  PlanDescription     VARCHAR(4000) NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NULL,\n  Category            VARCHAR(200) NULL,\n  BonusName           VARCHAR(10) NULL,\n  BalanceValue        NUMERIC(18,2) NULL,\n  BalancePoints       NUMERIC(18,2) NULL,\n  Balance             NUMERIC(18,2) NULL,\n  BalanceIsStale      BIT NULL,\n  --BalanceUserSet      INT NULL,\n  --BalanceSchemeID     INT NULL,\n  --BalanceSAID         INT NULL,\n  BalanceUpdateDate   DATETIME NULL,\n  BalanceRewardTier   VARCHAR(50) NULL,\n  BalanceValueLabel   VARCHAR(50) NULL,\n  BalancePointsLabel  VARCHAR(50) NULL,\n\n\t--BalancePrefix       VARCHAR(32) NOT NULL,\n\t--BalanceSuffix       VARCHAR(32) NOT NULL,\n\t--BalanceCurrency     VARCHAR(32) NOT NULL,\n\t--BalanceCreateTime   DATETIME NOT NULL,\n\t--BalanceUpdateTime   DATETIME NOT NULL,\n\t--BalanceDescription  VARCHAR(100) NOT NULL,\n\t--BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  --Vouchers        VARCHAR(4000) NULL,\n  --Transactions    VARCHAR(4000) NULL,\n  --PLLLinks        VARCHAR(4000) NULL,\n  IsActive            BIT NULL,\n  LCCreateDate        DATETIME NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  EffFromDate         DATETIME NULL,\n  EffToDate           DATETIME NULL,\n  ProcessDate         DATETIME NOT NULL,\n  IsCurrent           BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourceLCKey         INT NOT NULL,\n  RestrictionKey      INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT05 Create DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: Fingerprint, ValidTo (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of Fingerprint & ValidTo - toString(crc32(Fingerprint, ValidTo))\n\n--EmpId, SurrogateKey, ......IsCurrent, ProcessDate\n--EmpId exists in source and is the business key. EmpID used in LookUp\n--Surrogate key created for each employee. Surrogate key added as derived col in Iscurrent task. toString(crc32(EmpID, EmpFunction))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NULL,--NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,--20210301NOT NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  --PLLLinks      VARCHAR(4000) NULL\n  --PSPToken      VARCHAR(100),\n  --EventID       SMALLINT\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT06 Create DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "--Change of Columns used for SCD: Status\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[User]') AND type in (N'U'))\nDROP TABLE [Dim].[User];\n\nCREATE TABLE Dim.[User]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  FirstName       VARCHAR(255) NULL,\n  LastName        VARCHAR(255) NULL,\n  Phone           VARCHAR(100) NULL,--VARCHAR(100) MASKED WITH (FUNCTION = 'default()') NULL,\n  Email           VARCHAR(255) NULL,--VARCHAR(255) MASKED WITH (FUNCTION = 'email()') NULL,\n  Facebook        VARCHAR(255) NULL,\n  Twitter         VARCHAR(255) NULL,\n  AddressLine1    VARCHAR(255) NULL,\n  AddressLine2    VARCHAR(255) NULL,\n  City            VARCHAR(100) NULL,\n  Region          VARCHAR(100) NULL,\n  Postcode        VARCHAR(20) NULL,\n  Country         VARCHAR(100) NULL,\n  Gender          VARCHAR(16) NULL,\n  DateOfBirth     DATE NULL,\n  Channel         VARCHAR(100) NULL,\n  Organisation    VARCHAR(100) NOT NULL,\n  Client          VARCHAR(100) NOT NULL,\n  ExternalID      VARCHAR(255) NOT NULL,\n  UserCreateDate  DATETIME NULL,\n  UserUpdateDate  DATETIME NULL,\n  IsActive        BIT NOT NULL DEFAULT 1,\n  DeleteToken     VARCHAR(255) NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NULL,\n  IsStaff         BIT NULL,\n  IsTester        BIT NOT NULL,\n  IsCurrent       BIT NOT NULL,\n  SourceUserKey   INT NULL,\n  RestrictionID   INT NULL,\n  IsRTBF          BIT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT07 Create FactLCPC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[LoyaltyCardPaymentCard]') AND type in (N'U'))\nDROP TABLE [Fact].[LoyaltyCardPaymentCard];\n\nCREATE TABLE [Fact].[LoyaltyCardPaymentCard]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  LoyaltyCardID   INT,\n  PaymentCardID   BIGINT,\n  IsActiveLink    BIT,\n  Change          CHAR(6),\n  CreateDate      DATETIME,\n  ProcessDate     DATETIME\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT08 Create FactMatchedTransaction')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[MatchedTransaction]') AND type in (N'U'))\nDROP TABLE [Fact].[MatchedTransaction];\n\nCREATE TABLE [Fact].[MatchedTransaction]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  MerchantIdentifierID  INT,\n  TransactionID         CHAR(50),\n  PaymentTransactionID  INT,\n  SchemeTransactionID   INT,\n  spend_amount          DECIMAL(18,4),\n  spend_multiplier      DECIMAL(18,4),\n  spend_currency        CHAR(3),\n  card_token            VARCHAR(100),\n  MatchingType          CHAR(7),\n  TransactionDate       DATETIME,\n  CreateDate            DATETIME, --created_at\n  ExportDate            DATETIME, --updated_at\n  IsMTExported          BIT, --WHEN Status=Exported THEN 1 ELSE 0\n  SourceMTKey           BIGINT,\n  DimUserID             INT NULL,\n  DimLoyaltyCardID      INT NULL,\n  --DimPaymentCardID      BIGINT NOT NULL,\n  ProcessDate     DATETIME\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT09 Create FactUserLC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[UserLC]') AND type in (N'U'))\nDROP TABLE [Fact].[UserLC];\n\nCREATE TABLE [Fact].[UserLC]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  UserID          INT NULL,\n  LoyaltyCardID   INT NULL,\n  LCJoinDate      DATETIME NULL,\n  LCAddDate       DATETIME NULL,\n  IsCreated       BIT NULL,\n  CreateDate      DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT10 Create FactUserPC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[UserPC]') AND type in (N'U'))\nDROP TABLE [Fact].[UserPC];\n\nCREATE TABLE [Fact].[UserPC]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  UserID          INT NULL,\n  PaymentCardID   BIGINT NULL,\n  IsCreated       BIT NULL,\n  CreateDate      DATETIME NULL,\n  ProcessDate     DATETIME NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT11 Create view vw_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalcustomuser\nGO\n\nCREATE VIEW dbo.vw_history_historicalcustomuser\nAS\nSELECT DISTINCT \n    --ext.[id],\n    ext.[created],\n    --ext.[change_type],\n    ext.[instance_id],\n    --ext.[channel],\n    --ext.[change_details],\n    --ext.[body],\n    --ext.[email],\n    --ext.external_id,\n    --ext.*\n   js.[id],\n   js.[email],\n   js.[client_id],\n   js.[twitter],\n   js.[facebook],\n   js.[is_staff],\n   js.[is_active],\n   js.[is_tester],\n   js.[date_joined],\n   js.[external_id],\n   js.[delete_token]\nFROM [dbo].[ext_history_historicalcustomuser] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n        [id]            INT '$.id',\n        [email]         VARCHAR(255) '$.email',\n        [client_id]     VARCHAR(100) '$.client',\n        [twitter]       VARCHAR(100) '$.twitter',\n        [facebook]      VARCHAR(100) '$.facebook',\n        [is_staff]      bit '$.is_staff',\n        [is_active]     bit '$.is_active',\n        [is_tester]     bit '$.is_tester',\n        [date_joined]   VARCHAR(50) '$.date_joined',\n        [external_id]   VARCHAR(255) '$.external_id',\n        [delete_token]  VARCHAR(255) '$.delete_token'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT12 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT DISTINCT\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(6) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT13 Create view vw_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalschemeaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalschemeaccount\nAS\nSELECT\n   ext.instance_id   AS SAID,\n   ext.change_type   AS ChangeType,\n   ext.created       AS SACreated,\n\n   js.Status,\n   js.CreateDate,\n   js.UpdateDate,\n   js.JoinDate,\n   js.LinkDate,\n   js.IsDeleted\nFROM [dbo].[ext_history_historicalschemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n         [Status]       INT '$.status',\n         [CreateDate]   VARCHAR(16) '$.created',\n         [UpdateDate]   VARCHAR(16) '$.updated',\n         [JoinDate]     VARCHAR(16) '$.created',\n         [LinkDate]     VARCHAR(16) '$.created',\n         [IsDeleted]    BIT '$.is_deleted'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT14 Create view vw_scheme_schemeaccount_Balance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_balance\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_balance\nAS\nSELECT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.BalanceValue,\n   js.BalancePoints,\n   js.Balance,\n   js.BalanceIsStale,\n   js.BalanceUserSet,\n   js.BalanceSchemeID,\n   js.BalanceUpdateDate,\n   js.BalanceRewardTeir,\n   js.BalanceValueLabel,\n   js.BalancePointsLabel,\n   js.BalanceSAID\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(balances, '$'))\n   WITH (\n         [BalanceValue]       NUMERIC(18,2) '$.value',\n         [BalancePoints]      NUMERIC(18,2) '$.points',\n         [Balance]            NUMERIC(18,2) '$.balance',\n         [BalanceIsStale]     BIT '$.is_stale',\n         [BalanceUserSet]     VARCHAR(50) '$.user_set',\n         [BalanceSchemeID]    INT '$.scheme_id',\n         [BalanceUpdateDate]  VARCHAR(50) '$.updated_at',\n         [BalanceRewardTeir]  VARCHAR(50) '$.reward_tier',\n         [BalanceValueLabel]  VARCHAR(50) '$.value_label',\n         [BalancePointsLabel] VARCHAR(50) '$.points_label',\n         [BalanceSAID]        [INT] '$.scheme_account_id'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT15 Create view vw_scheme_schemeaccount_Voucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_voucher\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_voucher\nAS\nSELECT DISTINCT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.[VoucherCode],\n   \n   js.[BurnType],\n   js.[BurnValue],\n   js.[BurnPrefix],\n   js.[BurnSuffix],\n   js.[BurnCurrency],\n   \n   js.[EarnType],\n   js.[EarnValue],\n   js.[EarnPrefix],\n   js.[EarnSuffix],\n   js.[EarnCurrency],\n   js.[EarnTargetValue],\n   \n   js.[VoucherState],\n   js.[SubText],\n   js.[Headline],\n   js.[BodyText],\n   js.[IssueDate],\n   js.[ExpiryDate],\n   js.[RedeemDate],\n   js.[BarcodeType],\n   js.TCUrl\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (vouchers, '$')\n   WITH (\n        [VoucherCode]            VARCHAR(32) '$.code',\n\n        [BurnType]               VARCHAR(32) '$.burn.type',\n        [BurnValue]              VARCHAR(32) '$.burn.value',\n        [BurnPrefix]             VARCHAR(32) '$.burn.prefix',\n        [BurnSuffix]             VARCHAR(32) '$.burn.suffix',\n        [BurnCurrency]           VARCHAR(32) '$.burn.Currency',\n\n        [EarnType]               VARCHAR(32) '$.earn.type',\n        [EarnValue]              VARCHAR(32) '$.earn.value',\n        [EarnPrefix]             VARCHAR(32) '$.earn.prefix',\n        [EarnSuffix]             VARCHAR(32) '$.earn.suffix',\n        [EarnCurrency]           VARCHAR(32) '$.earn.Currency',\n        [EarnTargetValue]        VARCHAR(32) '$.earn.target_value',\n\n        [VoucherState]           VARCHAR(32) '$.state',\n        [SubText]                VARCHAR(32) '$.subtext',\n        [Headline]               VARCHAR(32) '$.headline',\n        [BodyText]               VARCHAR(32) '$.body_text',\n        [IssueDate]              VARCHAR(32) '$.date_issued',\n        [ExpiryDate]             VARCHAR(32) '$.expiry_date',\n        [RedeemDate]             VARCHAR(32) '$.date_redeemed',\n        [BarcodeType]            VARCHAR(32) '$.barcode_type',\n        [TCUrl]                  VARCHAR(100) '$.terms_and_conditions_url'   \n         ) AS js\nWHERE ext.vouchers <> '{}'\n   AND js.[VoucherState] <> 'inprogress'\n   --and js.VoucherCode = 'WHS000054'\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT16 Update DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLCVoucher', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLCVoucher]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLCVoucher] \nAS\n\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LCVoucher dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EventID,\n    LEAD(EffFromDate) OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY VoucherCode,VoucherState ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    LoyaltyCardID\n  FROM Dim.LCVoucher\n) updt\nON updt.ID = dim.ID\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT17 Update DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLoyaltyCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLoyaltyCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLoyaltyCard] \nAS\n\n/*\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LoyaltyCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EventID,\n    LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceLCKey\n  FROM Dim.LoyaltyCard\n) updt\nON updt.ID = dim.ID\n*/\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT18 Update DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimPaymentCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimPaymentCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimPaymentCard] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.PaymentCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    --DENSE_RANK()  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EventID,\n    ROW_NUMBER()  OVER(PARTITION BY SourcePCKey ORDER BY CardCreateDate, CardStatus DESC, IsDeleted DESC) EventID,\n    ValidTo,\n    Fingerprint,\n    CardCreateDate,\n    CardCreateDate AS EffFromDate,\n    --LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EffToDate,\n    LEAD(CardCreateDate)  OVER(PARTITION BY SourcePCKey ORDER BY CardCreateDate, CardStatus DESC, IsDeleted DESC) EffToDate,\n    GETDATE() AS ProcessDate,\n    --CASE \n    --  WHEN LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) IS NULL THEN 1\n    --  ELSE 0\n    --  END AS IsCurrent,\n    CASE \n      WHEN LEAD(CardCreateDate)  OVER(PARTITION BY SourcePCKey ORDER BY CardCreateDate, CardStatus DESC, IsDeleted DESC) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourcePCKey\n  FROM Dim.PaymentCard\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT19 Update DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimUser', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimUser]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimUser] \nAS\n\nUPDATE dim\nSET\n  --dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n -- dim.ProcessDate = GETDATE()\n--SELECT *\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    --DENSE_RANK()  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EventID,\n    --ROW_NUMBER() OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EventID,\n    ROW_NUMBER() OVER(PARTITION BY SourceUserkey ORDER BY EffFromDate) EventID,\n    Email, \n    Client, \n    ExternalID,\n    IsActive,\n    UserCreateDate,\n    --UserCreateDate AS EffFromDate,\n    --LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EffToDate,\n    LEAD(EffFromDate)  OVER(PARTITION BY SourceUserkey ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    --CASE \n    --  WHEN LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) IS NULL THEN 1\n    --  ELSE 0\n    --  END AS IsCurrent,\n    CASE \n      WHEN LEAD(EffFromDate)  OVER(PARTITION BY SourceUserkey ORDER BY EffFromDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceUserKey\n  FROM [Dim].[User]\n) updt\nON updt.ID = dim.ID;\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/\n\nUPDATE dim\nSET\n  dim.UserCreateDate = updt.UserCreatedDate\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    SourceUserKey,\n    MIN(UserCreateDate) UserCreatedDate\n  FROM [Dim].[User]\n  GROUP BY SourceUserKey\n) updt\nON updt.SourceUserKey = dim.SourceUserKey;\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.UserCreateDate\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    UserCreateDate,\n    EffFromDate\n  FROM [Dim].[User]\n) updt\nON updt.ID = dim.ID\nWHERE dim.EffFromDate IS NULL;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FT20 Create usp_TruncateTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "06 Fact Tables"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_TruncateTable', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_TruncateTable]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_TruncateTable] \nAS\n\nTRUNCATE TABLE [dim].[PaymentCard];\n\nTRUNCATE TABLE [dim].[User];\n\nTRUNCATE TABLE [dim].[LoyaltyCard];\n\nTRUNCATE TABLE [dim].[LCVoucher];\n\nTRUNCATE TABLE [fact].[UserLC];\n\nTRUNCATE TABLE [fact].[UserPC];\n\nTRUNCATE TABLE [Fact].[LoyaltyCardPaymentCard];\n\nTRUNCATE TABLE [Fact].[MatchedTransaction];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L01 Create Schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Dim' )\n    EXEC('CREATE SCHEMA [Dim]');\nGO\n--GRANT CONTROL ON SCHEMA :: Dim TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Fact' )\n    EXEC('CREATE SCHEMA [Fact]');\nGO\n--GRANT CONTROL ON SCHEMA :: Fact TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Ctl' )\n    EXEC('CREATE SCHEMA [Ctl]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Err' )\n    EXEC('CREATE SCHEMA [Err]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Rpt' )\n    EXEC('CREATE SCHEMA [Rpt]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Mdm' )\n    EXEC('CREATE SCHEMA [Mdm]');\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L02 usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_CreateExternalObjects', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_CreateExternalObjects]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_CreateExternalObjects] \n    @Yr     VARCHAR(4),\n    @Mt     VARCHAR(2),\n    @Dy     VARCHAR(2)\nAS\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourPasswordHere@&'\n--CREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\n--WITH IDENTITY = 'Managed Identity';\n--GO\n\nDECLARE \n    @tbl VARCHAR(50),\n    @col VARCHAR(1000),\n    @loc VARCHAR(1000),\n    @sql VARCHAR(1000)\n\n/****************************************history_historicalpaymentcardaccount****************************************/\nSET @tbl = 'history_historicalpaymentcardaccount'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [user_id] INT,\n    [body] VARCHAR(4000),\n    [change_details] VARCHAR(255)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalcustomuser****************************************/\nSET @tbl = 'history_historicalcustomuser'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [change_details] VARCHAR(255),\n    [body] VARCHAR(4000),\n    [email] VARCHAR(100),\n    [external_id] VARCHAR(100)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n--GRANT db_owner ON OBJECT::dbo.usp_CreateExternalObjects TO binkuksouthprodsynapse;\n--EXEC sp_addrolemember N'db_owner', N'binkuksouthprodsynapse'\n\n/****************************************scheme_schemeaccount****************************************/\nSET @tbl = 'scheme_schemeaccount'\nSET @Col = \n    '\n    [id]\t            INT,\n    [status]\t        INT,\n    [order]\t            INT,\n    [created]\t        DATETIME,\n    [updated]\t        DATETIME,\n    [scheme_id]\t        INT,\n    [is_deleted]\t    BIT,\n    [link_date]\t        DATETIME,\n    [join_date]\t        DATETIME,\n    [balances]\t        VARCHAR(4000),\n    [vouchers]\t        VARCHAR(4000),\n    [barcode]\t        VARCHAR(250),\n    [card_number]\t    VARCHAR(250),\n    [transactions]\t    VARCHAR(4000),\n    [main_answer]\t    VARCHAR(250),\n    [pll_links]\t        VARCHAR(4000),\n    [formatted_images]  VARCHAR(4000)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalschemeaccount****************************************/\nSET @tbl = 'history_historicalschemeaccount'\nSET @Col = \n    '\n    [id]\t          INT,\n    [created]\t      DATETIME,\n    [change_type]     VARCHAR(6),\n    [instance_id]     VARCHAR(255),\n    [channel]         VARCHAR(255),\n    [user_id]         INT,\n    [body]            VARCHAR(4000),\n    [change_details]  VARCHAR(255),\n    [journey]         VARCHAR(8)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L03 Create DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: Fingerprint, ValidTo (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of Fingerprint & ValidTo - toString(crc32(Fingerprint, ValidTo))\n\n--EmpId, SurrogateKey, ......IsCurrent, ProcessDate\n--EmpId exists in source and is the business key. EmpID used in LookUp\n--Surrogate key created for each employee. Surrogate key added as derived col in Iscurrent task. toString(crc32(EmpID, EmpFunction))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,--20210301NOT NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  --PLLLinks      VARCHAR(4000) NULL\n  --PSPToken      VARCHAR(100),\n  --EventID       SMALLINT\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n/*202103081422\n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n\n/*20210305:0947\n  ID              INT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  --IsCurrent       BIT NOT NULL,-- DEFAULT 1,\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L04 Create DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "--Change of Columns used for SCD: Status\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[User]') AND type in (N'U'))\nDROP TABLE [Dim].[User];\n\nCREATE TABLE Dim.[User]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  FirstName       VARCHAR(255) NULL,\n  LastName        VARCHAR(255) NULL,\n  Phone           VARCHAR(100) NULL,--VARCHAR(100) MASKED WITH (FUNCTION = 'default()') NULL,\n  Email           VARCHAR(255) NULL,--VARCHAR(255) MASKED WITH (FUNCTION = 'email()') NULL,\n  Facebook        VARCHAR(255) NULL,\n  Twitter         VARCHAR(255) NULL,\n  AddressLine1    VARCHAR(255) NULL,\n  AddressLine2    VARCHAR(255) NULL,\n  City            VARCHAR(100) NULL,\n  Region          VARCHAR(100) NULL,\n  Postcode        VARCHAR(20) NULL,\n  Country         VARCHAR(100) NULL,\n  Gender          VARCHAR(16) NULL,\n  DateOfBirth     DATE NULL,\n  Channel         VARCHAR(100) NULL,\n  Organisation    VARCHAR(100) NOT NULL,\n  Client          VARCHAR(100) NOT NULL,\n  ExternalID      VARCHAR(255) NOT NULL,\n  UserCreateDate  DATETIME NULL,\n  UserUpdateDate  DATETIME NULL,\n  IsActive        BIT NOT NULL DEFAULT 1,\n  DeleteToken     VARCHAR(255) NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NULL,\n  IsStaff         BIT NULL,\n  IsTester        BIT NOT NULL,\n  IsCurrent       BIT NOT NULL,\n  SourceUserKey   INT NULL,\n  RestrictionID   INT NULL,\n  IsRTBF          BIT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L05 Create DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: a, b (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of a & b - toString(crc32(a, b))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LoyaltyCard]') AND type in (N'U'))\nDROP TABLE [Dim].[LoyaltyCard];\n\nCREATE TABLE Dim.LoyaltyCard\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(256) NOT NULL,\n  PlanName            VARCHAR(400) NULL,\n  PlanDescription     VARCHAR(4000) NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NULL,\n  Category            VARCHAR(200) NULL,\n  BonusName           VARCHAR(10) NULL,\n  BalanceValue        NUMERIC(18,2) NULL,\n  BalancePoints       NUMERIC(18,2) NULL,\n  Balance             NUMERIC(18,2) NULL,\n  BalanceIsStale      BIT NULL,\n  --BalanceUserSet      INT NULL,\n  --BalanceSchemeID     INT NULL,\n  --BalanceSAID         INT NULL,\n  BalanceUpdateDate   DATETIME NULL,\n  BalanceRewardTier   VARCHAR(50) NULL,\n  BalanceValueLabel   VARCHAR(50) NULL,\n  BalancePointsLabel  VARCHAR(50) NULL,\n\n\t--BalancePrefix       VARCHAR(32) NOT NULL,\n\t--BalanceSuffix       VARCHAR(32) NOT NULL,\n\t--BalanceCurrency     VARCHAR(32) NOT NULL,\n\t--BalanceCreateTime   DATETIME NOT NULL,\n\t--BalanceUpdateTime   DATETIME NOT NULL,\n\t--BalanceDescription  VARCHAR(100) NOT NULL,\n\t--BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  --Vouchers        VARCHAR(4000) NULL,\n  --Transactions    VARCHAR(4000) NULL,\n  --PLLLinks        VARCHAR(4000) NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  EffFromDate         DATETIME NULL,\n  EffToDate           DATETIME NULL,\n  ProcessDate         DATETIME NOT NULL,\n  IsCurrent           BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourceLCKey         INT NOT NULL,\n  RestrictionKey      INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n/*\nCREATE TABLE Dim.LoyaltyCard_json\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(200) NOT NULL,\n  PlanName            VARCHAR(400) NOT NULL,\n  PlanDescription     VARCHAR(4000) NOT NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NOT NULL,\n  Category            VARCHAR(200) NOT NULL,\n  BonusName           VARCHAR(10) NOT NULL,\n  BalanceValue        INT NULL,\n  BalancePrefix       VARCHAR(32) NOT NULL,\n  BalanceSuffix       VARCHAR(32) NOT NULL,\n  BalanceCurrency     VARCHAR(32) NOT NULL,\n  BalanceCreateTime   DATETIME NOT NULL,\n  BalanceUpdateTime   DATETIME NOT NULL,\n  BalanceDescription  VARCHAR(100) NOT NULL,\n  BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  Vouchers            VARCHAR(4000) NULL,\n  --Transactions      VARCHAR(4000) NULL,\n  --PLLLinks          VARCHAR(4000) NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  CreateDate          DATETIME NOT NULL,\n  UpdateDate          DATETIME NOT NULL,\n  IsActive            BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L06 Create DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LCVoucher]') AND type in (N'U'))\nDROP TABLE [Dim].[LCVoucher];\n\nCREATE TABLE Dim.LCVoucher\n  (  \n  ID                INT IDENTITY(1,1) NOT NULL,\n  LoyaltyCardID     INT NULL,--Check\n  VoucherCode       VARCHAR(32) NOT NULL,\n  --VoucherValue      NUMERIC(8,2) NULL,\n  --Prefix            VARCHAR(32) NULL,\n  --Suffix            VARCHAR(32) NULL,\n  --Currency          VARCHAR(3) NULL,\n  --VoucherDesc       VARCHAR(100) NULL,\n  --RewardTier        VARCHAR(10) NULL,\n  BurnType          VARCHAR(32) NULL,\n  BurnValue         NUMERIC(8,2) NULL,\n  BurnPrefix        VARCHAR(32) NULL,\n  BurnSuffix        VARCHAR(32) NULL,\n  BurnCurrency      VARCHAR(32) NULL, \n  EarnType          VARCHAR(32) NULL,\n  EarnValue         NUMERIC(8,2) NULL,\n  EarnPrefix        VARCHAR(32) NULL,\n  EarnSuffix        VARCHAR(32) NULL,\n  EarnCurrency      VARCHAR(32) NULL, \n  EarnTargetValue   NUMERIC(8,2) NULL,\n  VoucherState      VARCHAR(32) NULL,\n  Subtext           VARCHAR(32) NULL,\n  Headline          VARCHAR(32) NULL,\n  BodyText          VARCHAR(32) NULL,\n  IssueDate         DATETIME NULL,\n  ExpiryDate        DATETIME NULL,\n  BarcodeType       VARCHAR(32) NULL,\n  TCUrl             VARCHAR(100) NULL,\n  EffFromDate       DATETIME NOT NULL,\n  EffToDate         DATETIME NULL,\n  ProcessDate       DATETIME NOT NULL,\n  IsCurrent         BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L07 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT DISTINCT\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(4) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L08 Create view vw_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalcustomuser\nGO\n\nCREATE VIEW dbo.vw_history_historicalcustomuser\nAS\nSELECT DISTINCT \n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[change_details],\n    --ext.[body],\n    --ext.[email],\n    --ext.external_id,\n    --ext.*\n   js.[id],\n   js.[email],\n   js.[client_id],\n   js.[twitter],\n   js.[facebook],\n   js.[is_staff],\n   js.[is_active],\n   js.[is_tester],\n   js.[date_joined],\n   js.[external_id],\n   js.[delete_token]\nFROM [dbo].[ext_history_historicalcustomuser] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n        [id]            INT '$.id',\n        [email]         VARCHAR(255) '$.email',\n        [client_id]     VARCHAR(100) '$.client',\n        [twitter]       VARCHAR(100) '$.twitter',\n        [facebook]      VARCHAR(100) '$.facebook',\n        [is_staff]      bit '$.is_staff',\n        [is_active]     bit '$.is_active',\n        [is_tester]     bit '$.is_tester',\n        [date_joined]   VARCHAR(50) '$.date_joined',\n        [external_id]   VARCHAR(255) '$.external_id',\n        [delete_token]  VARCHAR(255) '$.delete_token'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L09 Create view vw_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalschemeaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalschemeaccount\nAS\nSELECT\n   ext.instance_id   AS SAID,\n   ext.change_type   AS ChangeType,\n   ext.created       AS SACreated,\n\n   js.Status,\n   js.CreateDate,\n   js.UpdateDate,\n   js.JoinDate,\n   js.LinkDate,\n   js.IsDeleted\nFROM [dbo].[ext_history_historicalschemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n         [Status]       INT '$.status',\n         [CreateDate]   VARCHAR(16) '$.created',\n         [UpdateDate]   VARCHAR(16) '$.updated',\n         [JoinDate]     VARCHAR(16) '$.created',\n         [LinkDate]     VARCHAR(16) '$.created',\n         [IsDeleted]    BIT '$.is_deleted'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L10 Create view vw_scheme_schemeaccount_Balance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_balance\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_balance\nAS\nSELECT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.BalanceValue,\n   js.BalancePoints,\n   js.Balance,\n   js.BalanceIsStale,\n   js.BalanceUserSet,\n   js.BalanceSchemeID,\n   js.BalanceUpdateDate,\n   js.BalanceRewardTeir,\n   js.BalanceValueLabel,\n   js.BalancePointsLabel,\n   js.BalanceSAID\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(balances, '$'))\n   WITH (\n         [BalanceValue]       NUMERIC(18,2) '$.value',\n         [BalancePoints]      NUMERIC(18,2) '$.points',\n         [Balance]            NUMERIC(18,2) '$.balance',\n         [BalanceIsStale]     BIT '$.is_stale',\n         [BalanceUserSet]     VARCHAR(50) '$.user_set',\n         [BalanceSchemeID]    INT '$.scheme_id',\n         [BalanceUpdateDate]  VARCHAR(50) '$.updated_at',\n         [BalanceRewardTeir]  VARCHAR(50) '$.reward_tier',\n         [BalanceValueLabel]  VARCHAR(50) '$.value_label',\n         [BalancePointsLabel] VARCHAR(50) '$.points_label',\n         [BalanceSAID]        [INT] '$.scheme_account_id'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L11 Create view vw_scheme_schemeaccount_Voucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_voucher\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_voucher\nAS\nSELECT DISTINCT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.[VoucherCode],\n   \n   js.[BurnType],\n   js.[BurnValue],\n   js.[BurnPrefix],\n   js.[BurnSuffix],\n   js.[BurnCurrency],\n   \n   js.[EarnType],\n   js.[EarnValue],\n   js.[EarnPrefix],\n   js.[EarnSuffix],\n   js.[EarnCurrency],\n   js.[EarnTargetValue],\n   \n   js.[VoucherState],\n   js.[SubText],\n   js.[Headline],\n   js.[BodyText],\n   js.[IssueDate],\n   js.[ExpiryDate],\n   js.[BarcodeType],\n   js.TCUrl\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(vouchers, '$'))\n   WITH (\n        [VoucherCode]            VARCHAR(32) '$.code',\n\n        [BurnType]               VARCHAR(32) '$.burn.type',\n        [BurnValue]              VARCHAR(32) '$.burn.value',\n        [BurnPrefix]             VARCHAR(32) '$.burn.prefix',\n        [BurnSuffix]             VARCHAR(32) '$.burn.suffix',\n        [BurnCurrency]           VARCHAR(32) '$.burn.Currency',\n\n        [EarnType]               VARCHAR(32) '$.earn.type',\n        [EarnValue]              VARCHAR(32) '$.earn.value',\n        [EarnPrefix]             VARCHAR(32) '$.earn.prefix',\n        [EarnSuffix]             VARCHAR(32) '$.earn.suffix',\n        [EarnCurrency]           VARCHAR(32) '$.earn.Currency',\n        [EarnTargetValue]        VARCHAR(32) '$.earn.target_value',\n\n        [VoucherState]           VARCHAR(32) '$.state',\n        [SubText]                VARCHAR(32) '$.subtext',\n        [Headline]               VARCHAR(32) '$.headline',\n        [BodyText]               VARCHAR(32) '$.body_text',\n        [IssueDate]              VARCHAR(32) '$.date_issued',\n        [ExpiryDate]             VARCHAR(32) '$.expiry_date',\n        [BarcodeType]            VARCHAR(32) '$.barcode_type',\n        [TCUrl]                  VARCHAR(100) '$.terms_and_conditions_url'   \n         ) AS js\nWHERE ext.vouchers <> '{}'\n   AND js.[VoucherState] <> 'inprogress'\n   --and js.VoucherCode = 'WHS000054'\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L12 Update DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimPaymentCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimPaymentCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimPaymentCard] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.PaymentCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EventID,\n    ValidTo,\n    Fingerprint,\n    CardCreateDate,\n    CardCreateDate AS EffFromDate,\n    LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourcePCKey\n  FROM Dim.PaymentCard\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L13 Update DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimUser', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimUser]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimUser] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n -- dim.ProcessDate = GETDATE()\n--SELECT *\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EventID,\n    Email, \n    Client, \n    ExternalID,\n    IsActive,\n    UserCreateDate,\n    UserCreateDate AS EffFromDate,\n    LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceUserKey\n  FROM [Dim].[User]\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L14 Update DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLoyaltyCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLoyaltyCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLoyaltyCard] \nAS\n\n/*\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LoyaltyCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EventID,\n    LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceLCKey\n  FROM Dim.LoyaltyCard\n) updt\nON updt.ID = dim.ID\n*/\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L15 Update DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLCVoucher', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLCVoucher]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLCVoucher] \nAS\n\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LCVoucher dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EventID,\n    LEAD(EffFromDate) OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY VoucherCode ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    LoyaltyCardID\n  FROM Dim.LCVoucher\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L16 TruncateTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "03 Loyalty Card"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_TruncateTable', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_TruncateTable]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_TruncateTable] \nAS\n\nTRUNCATE TABLE [dim].[PaymentCard];\n\nTRUNCATE TABLE [dim].[User];\n\nTRUNCATE TABLE [dim].[LoyaltyCard];\n\nTRUNCATE TABLE [dim].[LCVoucher];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MR501 Create DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "05 MiniRelease"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: a, b (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of a & b - toString(crc32(a, b))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LoyaltyCard]') AND type in (N'U'))\nDROP TABLE [Dim].[LoyaltyCard];\n\nCREATE TABLE Dim.LoyaltyCard\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(256) NOT NULL,\n  PlanName            VARCHAR(400) NULL,\n  PlanDescription     VARCHAR(4000) NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NULL,\n  Category            VARCHAR(200) NULL,\n  BonusName           VARCHAR(10) NULL,\n  BalanceValue        NUMERIC(18,2) NULL,\n  BalancePoints       NUMERIC(18,2) NULL,\n  Balance             NUMERIC(18,2) NULL,\n  BalanceIsStale      BIT NULL,\n  --BalanceUserSet      INT NULL,\n  --BalanceSchemeID     INT NULL,\n  --BalanceSAID         INT NULL,\n  BalanceUpdateDate   DATETIME NULL,\n  BalanceRewardTier   VARCHAR(50) NULL,\n  BalanceValueLabel   VARCHAR(50) NULL,\n  BalancePointsLabel  VARCHAR(50) NULL,\n\n\t--BalancePrefix       VARCHAR(32) NOT NULL,\n\t--BalanceSuffix       VARCHAR(32) NOT NULL,\n\t--BalanceCurrency     VARCHAR(32) NOT NULL,\n\t--BalanceCreateTime   DATETIME NOT NULL,\n\t--BalanceUpdateTime   DATETIME NOT NULL,\n\t--BalanceDescription  VARCHAR(100) NOT NULL,\n\t--BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  --Vouchers        VARCHAR(4000) NULL,\n  --Transactions    VARCHAR(4000) NULL,\n  --PLLLinks        VARCHAR(4000) NULL,\n  IsActive            BIT NULL,\n  LCCreateDate        DATETIME NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  EffFromDate         DATETIME NULL,\n  EffToDate           DATETIME NULL,\n  ProcessDate         DATETIME NOT NULL,\n  IsCurrent           BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourceLCKey         INT NOT NULL,\n  RestrictionKey      INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n/*\nCREATE TABLE Dim.LoyaltyCard_json\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(200) NOT NULL,\n  PlanName            VARCHAR(400) NOT NULL,\n  PlanDescription     VARCHAR(4000) NOT NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NOT NULL,\n  Category            VARCHAR(200) NOT NULL,\n  BonusName           VARCHAR(10) NOT NULL,\n  BalanceValue        INT NULL,\n  BalancePrefix       VARCHAR(32) NOT NULL,\n  BalanceSuffix       VARCHAR(32) NOT NULL,\n  BalanceCurrency     VARCHAR(32) NOT NULL,\n  BalanceCreateTime   DATETIME NOT NULL,\n  BalanceUpdateTime   DATETIME NOT NULL,\n  BalanceDescription  VARCHAR(100) NOT NULL,\n  BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  Vouchers            VARCHAR(4000) NULL,\n  --Transactions      VARCHAR(4000) NULL,\n  --PLLLinks          VARCHAR(4000) NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  CreateDate          DATETIME NOT NULL,\n  UpdateDate          DATETIME NOT NULL,\n  IsActive            BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MR502 Create DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "05 MiniRelease"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LCVoucher]') AND type in (N'U'))\nDROP TABLE [Dim].[LCVoucher];\n\nCREATE TABLE Dim.LCVoucher\n  (  \n  ID                INT IDENTITY(1,1) NOT NULL,\n  LoyaltyCardID     INT NULL,--Check\n  VoucherCode       VARCHAR(32) NOT NULL,\n  --VoucherValue      NUMERIC(8,2) NULL,\n  --Prefix            VARCHAR(32) NULL,\n  --Suffix            VARCHAR(32) NULL,\n  --Currency          VARCHAR(3) NULL,\n  --VoucherDesc       VARCHAR(100) NULL,\n  --RewardTier        VARCHAR(10) NULL,\n  BurnType          VARCHAR(32) NULL,\n  BurnValue         NUMERIC(8,2) NULL,\n  BurnPrefix        VARCHAR(32) NULL,\n  BurnSuffix        VARCHAR(32) NULL,\n  BurnCurrency      VARCHAR(32) NULL, \n  EarnType          VARCHAR(32) NULL,\n  EarnValue         NUMERIC(8,2) NULL,\n  EarnPrefix        VARCHAR(32) NULL,\n  EarnSuffix        VARCHAR(32) NULL,\n  EarnCurrency      VARCHAR(32) NULL, \n  EarnTargetValue   NUMERIC(8,2) NULL,\n  VoucherState      VARCHAR(32) NULL,\n  Subtext           VARCHAR(32) NULL,\n  Headline          VARCHAR(32) NULL,\n  BodyText          VARCHAR(32) NULL,\n  IssueDate         DATETIME NULL,\n  RedeemDate        DATETIME NULL,\n  ExpiryDate        DATETIME NULL,\n  BarcodeType       VARCHAR(32) NULL,\n  TCUrl             VARCHAR(100) NULL,\n  EffFromDate       DATETIME NOT NULL,\n  EffToDate         DATETIME NULL,\n  ProcessDate       DATETIME NOT NULL,\n  IsCurrent         BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MR503 Create view vw_scheme_schemeaccount_Voucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "05 MiniRelease"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_voucher\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_voucher\nAS\nSELECT DISTINCT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.[VoucherCode],\n   \n   js.[BurnType],\n   js.[BurnValue],\n   js.[BurnPrefix],\n   js.[BurnSuffix],\n   js.[BurnCurrency],\n   \n   js.[EarnType],\n   js.[EarnValue],\n   js.[EarnPrefix],\n   js.[EarnSuffix],\n   js.[EarnCurrency],\n   js.[EarnTargetValue],\n   \n   js.[VoucherState],\n   js.[SubText],\n   js.[Headline],\n   js.[BodyText],\n   js.[IssueDate],\n   js.[ExpiryDate],\n   js.[RedeemDate],\n   js.[BarcodeType],\n   js.TCUrl\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (vouchers, '$')\n   WITH (\n        [VoucherCode]            VARCHAR(32) '$.code',\n\n        [BurnType]               VARCHAR(32) '$.burn.type',\n        [BurnValue]              VARCHAR(32) '$.burn.value',\n        [BurnPrefix]             VARCHAR(32) '$.burn.prefix',\n        [BurnSuffix]             VARCHAR(32) '$.burn.suffix',\n        [BurnCurrency]           VARCHAR(32) '$.burn.Currency',\n\n        [EarnType]               VARCHAR(32) '$.earn.type',\n        [EarnValue]              VARCHAR(32) '$.earn.value',\n        [EarnPrefix]             VARCHAR(32) '$.earn.prefix',\n        [EarnSuffix]             VARCHAR(32) '$.earn.suffix',\n        [EarnCurrency]           VARCHAR(32) '$.earn.Currency',\n        [EarnTargetValue]        VARCHAR(32) '$.earn.target_value',\n\n        [VoucherState]           VARCHAR(32) '$.state',\n        [SubText]                VARCHAR(32) '$.subtext',\n        [Headline]               VARCHAR(32) '$.headline',\n        [BodyText]               VARCHAR(32) '$.body_text',\n        [IssueDate]              VARCHAR(32) '$.date_issued',\n        [ExpiryDate]             VARCHAR(32) '$.expiry_date',\n        [RedeemDate]             VARCHAR(32) '$.date_redeemed',\n        [BarcodeType]            VARCHAR(32) '$.barcode_type',\n        [TCUrl]                  VARCHAR(100) '$.terms_and_conditions_url'   \n         ) AS js\nWHERE ext.vouchers <> '{}'\n   AND js.[VoucherState] <> 'inprogress'\n   --and js.VoucherCode = 'WHS000054'\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MR504 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "05 MiniRelease"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT DISTINCT\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(6) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MR505 Create DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "05 MiniRelease"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: Fingerprint, ValidTo (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of Fingerprint & ValidTo - toString(crc32(Fingerprint, ValidTo))\n\n--EmpId, SurrogateKey, ......IsCurrent, ProcessDate\n--EmpId exists in source and is the business key. EmpID used in LookUp\n--Surrogate key created for each employee. Surrogate key added as derived col in Iscurrent task. toString(crc32(EmpID, EmpFunction))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NULL,--NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,--20210301NOT NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  --PLLLinks      VARCHAR(4000) NULL\n  --PSPToken      VARCHAR(100),\n  --EventID       SMALLINT\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n/*202103081422\n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n\n/*20210305:0947\n  ID              INT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  --IsCurrent       BIT NOT NULL,-- DEFAULT 1,\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Recreate eds_payment_card_paymentcard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "DROP EXTERNAL DATA SOURCE [eds_payment_card_paymentcard]\nGO\n\nCREATE EXTERNAL DATA SOURCE [eds_payment_card_paymentcard] WITH \n(\tTYPE = HADOOP,\n\tLOCATION = N'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_payment_card_paymentcard/',\n\tCREDENTIAL = [SynapseIdentity]\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Run usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "DECLARE @Yr varchar(4)\nDECLARE @Mt varchar(2)\nDECLARE @Dy varchar(2)\n\nSET @yr = '2021'\nSET\t@Mt = '02'\nSET\t@Dy = '25'\n\n EXECUTE [dbo].[usp_CreateExternalObjects]\n\t@Yr,\n\t@Mt,\n\t@Dy\n\n\tDROP EXTERNAL TABLE ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Users')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Tableau\n\n-- in master db\n-- CREATE LOGIN Tableau1 WITH PASSWORD = 'SMa97RZSmGcwVHUzsQj2rSTLwBWFXVLb';\n\n-- in dwhpool\n-- CREATE USER Tableau1 FROM LOGIN Tableau1;\n-- EXEC sp_addrolemember 'db_datareader', 'Tableau1';\n-- GRANT SELECT ON DATABASE::dwhpool to Tableau1;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "-- CREATE DATABASE test1;\n\n-- CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'test1234!atasergr'\n-- CREATE DATABASE SCOPED CREDENTIAL WorkspaceIdentity\n-- WITH IDENTITY = 'Managed Identity'\n\n-- CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET)\n\n-- CREATE EXTERNAL DATA SOURCE mysample\n-- WITH (LOCATION = 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthdev-datalake/testparquet/20210101/', CREDENTIAL = WorkspaceIdentity)\n\n-- CREATE EXTERNAL TABLE dbo.db1 ([id] int, [first_name] varchar(8000), [last_name] varchar(8000), [numsold] int)\n-- WITH (LOCATION = '*.parquet', DATA_SOURCE = [mysample], FILE_FORMAT = [SynapseParquetFormat]);\n\n-- SELECT TOP 10 * FROM dbo.db1;\n-- SELECT TOP 10 * FROM OPENROWSET(BULK '*.parquet', DATA_SOURCE = 'mysample', FORMAT='PARQUET') as rows;\n\n\n\n---- bundle\n\n-- CREATE EXTERNAL DATA SOURCE mysample2\n-- WITH (LOCATION = 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthdev-datalake/testparquetbundle/', CREDENTIAL = WorkspaceIdentity)\n\n-- CREATE EXTERNAL TABLE dbo.db2 ([id] int, [first_name] varchar(8000), [last_name] varchar(8000), [numsold] int)\n-- WITH (LOCATION = '*.parquet', DATA_SOURCE = [mysample2], FILE_FORMAT = [SynapseParquetFormat]);\n\n-- SELECT TOP 10 * FROM dbo.db2;\nSELECT TOP 10 * FROM OPENROWSET(BULK '*.parquet', DATA_SOURCE = 'mysample2', FORMAT='PARQUET') as rows;\n\n\n\n-- CREATE LOGIN TerryTest1 WITH PASSWORD = 'VeryHard1!';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "test1"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Scratch')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- GRANT CONTROL ON SCHEMA ::harmonia TO binkuksouthprodsynapse;\n\nSELECT * FROM harmonia.merchant_identifier\n--DELETE FROM harmonia.payment_provider\n\n-- SELECT * from sys.tables\n--test",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless Parquet JSON flatten')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "-- SELECT * FROM dbo.db1;\n\nSELECT *\nFROM dbo.db1\nCROSS APPLY OPENJSON (jsondata, '$.somelist') WITH (num int '$')",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "temp_serverless"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Tableau Synapse User')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"content": {
					"query": "-- in master db\n-- CREATE LOGIN TerryTest1 WITH PASSWORD = 'VeryHard1!';\n\n-- in dwhpool\n-- CREATE USER TerryTest1 FROM LOGIN TerryTest1;\n-- EXEC sp_addrolemember 'db_owner', 'TerryTest1';\n--GRANT CONTROL ON DATABASE::dwhpool to TerryTest1;\n\n-- so the laadmin user and its randompw also works but shouldn't be used :/\n\n\n\n\n\n\n-- Serverless\n-- CREATE LOGIN TerryTest1 WITH PASSWORD = 'VeryHard1!';\n-- CREATE USER TerryTest1 FROM LOGIN TerryTest1;\n-- ALTER ROLE db_owner ADD MEMBER TerryTest1;\n-- GRANT CONTROL ON DATABASE::test1 to TerryTest1\n\n-- Tableau cant connect, think its using wrong freetds version param\n-- freetds.conf -- this works\n--   [binkuksouthprodsynapse-ondemand.sql.azuresynapse.net]\n--   tds version = 7.1\n--   host = binkuksouthprodsynapse-ondemand.sql.azuresynapse.net\n--   database = test1\n--   port = 1433\n--   user = laadmin\n--   password = laaaa\n\n-- tsql -S binkuksouthprodsynapse-ondemand.sql.azuresynapse.net -p 1433 -U laadmin -P laaaaa\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "test1"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS01 Create Schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Dim' )\n    EXEC('CREATE SCHEMA [Dim]');\nGO\n--GRANT CONTROL ON SCHEMA :: Dim TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Fact' )\n    EXEC('CREATE SCHEMA [Fact]');\nGO\n--GRANT CONTROL ON SCHEMA :: Fact TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Ctl' )\n    EXEC('CREATE SCHEMA [Ctl]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Err' )\n    EXEC('CREATE SCHEMA [Err]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Rpt' )\n    EXEC('CREATE SCHEMA [Rpt]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Mdm' )\n    EXEC('CREATE SCHEMA [Mdm]');\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS02 usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_CreateExternalObjects', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_CreateExternalObjects]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_CreateExternalObjects] \n    @Yr     VARCHAR(4),\n    @Mt     VARCHAR(2),\n    @Dy     VARCHAR(2)\nAS\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourPasswordHere@&'\n--CREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\n--WITH IDENTITY = 'Managed Identity';\n--GO\n\nDECLARE \n    @tbl VARCHAR(50),\n    @col VARCHAR(1000),\n    @loc VARCHAR(1000),\n    @sql VARCHAR(1000)\n\n/****************************************history_historicalpaymentcardaccount****************************************/\nSET @tbl = 'history_historicalpaymentcardaccount'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [user_id] INT,\n    [body] VARCHAR(4000),\n    [change_details] VARCHAR(255)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalcustomuser****************************************/\nSET @tbl = 'history_historicalcustomuser'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [change_details] VARCHAR(255),\n    [body] VARCHAR(4000),\n    [email] VARCHAR(100),\n    [external_id] VARCHAR(100)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n--GRANT db_owner ON OBJECT::dbo.usp_CreateExternalObjects TO binkuksouthprodsynapse;\n--EXEC sp_addrolemember N'db_owner', N'binkuksouthprodsynapse'\n\n/****************************************scheme_schemeaccount****************************************/\nSET @tbl = 'scheme_schemeaccount'\nSET @Col = \n    '\n    [id]\t            INT,\n    [status]\t        INT,\n    [order]\t            INT,\n    [created]\t        DATETIME,\n    [updated]\t        DATETIME,\n    [scheme_id]\t        INT,\n    [is_deleted]\t    BIT,\n    [link_date]\t        DATETIME,\n    [join_date]\t        DATETIME,\n    [balances]\t        VARCHAR(4000),\n    [vouchers]\t        VARCHAR(8000),\n    [barcode]\t        VARCHAR(250),\n    [card_number]\t    VARCHAR(250),\n    [transactions]\t    VARCHAR(4000),\n    [main_answer]\t    VARCHAR(250),\n    [pll_links]\t        VARCHAR(4000),\n    [formatted_images]  VARCHAR(4000)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalschemeaccount****************************************/\nSET @tbl = 'history_historicalschemeaccount'\nSET @Col = \n    '\n    [id]\t          INT,\n    [created]\t      DATETIME,\n    [change_type]     VARCHAR(6),\n    [instance_id]     VARCHAR(255),\n    [channel]         VARCHAR(255),\n    [user_id]         INT,\n    [body]            VARCHAR(4000),\n    [change_details]  VARCHAR(255),\n    [journey]         VARCHAR(8)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS03 Create DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: Fingerprint, ValidTo (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of Fingerprint & ValidTo - toString(crc32(Fingerprint, ValidTo))\n\n--EmpId, SurrogateKey, ......IsCurrent, ProcessDate\n--EmpId exists in source and is the business key. EmpID used in LookUp\n--Surrogate key created for each employee. Surrogate key added as derived col in Iscurrent task. toString(crc32(EmpID, EmpFunction))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,--20210301NOT NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  --PLLLinks      VARCHAR(4000) NULL\n  --PSPToken      VARCHAR(100),\n  --EventID       SMALLINT\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n\n/*202103081422\n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n\n/*20210305:0947\n  ID              INT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CreateDate      DATETIME NULL,--20210301NOT NULL,\n  UpdateDate      DATETIME NULL,\n  --IsCurrent       BIT NOT NULL,-- DEFAULT 1,\n  SourcePCKey     INT NOT NULL\n  --PLLLinks        VARCHAR(4000) NULL\n  --PSPToken        VARCHAR(100),\n  --EventID         SMALLINT\n*/\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS04 Create DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "--Change of Columns used for SCD: Status\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[User]') AND type in (N'U'))\nDROP TABLE [Dim].[User];\n\nCREATE TABLE Dim.[User]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  FirstName       VARCHAR(255) NULL,\n  LastName        VARCHAR(255) NULL,\n  Phone           VARCHAR(100) NULL,--VARCHAR(100) MASKED WITH (FUNCTION = 'default()') NULL,\n  Email           VARCHAR(255) NULL,--VARCHAR(255) MASKED WITH (FUNCTION = 'email()') NULL,\n  Facebook        VARCHAR(255) NULL,\n  Twitter         VARCHAR(255) NULL,\n  AddressLine1    VARCHAR(255) NULL,\n  AddressLine2    VARCHAR(255) NULL,\n  City            VARCHAR(100) NULL,\n  Region          VARCHAR(100) NULL,\n  Postcode        VARCHAR(20) NULL,\n  Country         VARCHAR(100) NULL,\n  Gender          VARCHAR(16) NULL,\n  DateOfBirth     DATE NULL,\n  Channel         VARCHAR(100) NULL,\n  Organisation    VARCHAR(100) NOT NULL,\n  Client          VARCHAR(100) NOT NULL,\n  ExternalID      VARCHAR(255) NOT NULL,\n  UserCreateDate  DATETIME NULL,\n  UserUpdateDate  DATETIME NULL,\n  IsActive        BIT NOT NULL DEFAULT 1,\n  DeleteToken     VARCHAR(255) NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NULL,\n  IsStaff         BIT NULL,\n  IsTester        BIT NOT NULL,\n  IsCurrent       BIT NOT NULL,\n  SourceUserKey   INT NULL,\n  RestrictionID   INT NULL,\n  IsRTBF          BIT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS05 Create DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "--SurrogateKey: ID\n--Busniess/Natural Key: a, b (with Is_deleted=0 in only 1 instance?)\n  \n--OR\n\n--Busniess Key: ID\n--SurrogqteKey: Hash of a & b - toString(crc32(a, b))\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LoyaltyCard]') AND type in (N'U'))\nDROP TABLE [Dim].[LoyaltyCard];\n\nCREATE TABLE Dim.LoyaltyCard\n  (  \n  ID                  INT IDENTITY(1,1) NOT NULL,\n  CardNumber          VARCHAR(256) NOT NULL,\n  PlanName            VARCHAR(400) NULL,\n  PlanDescription     VARCHAR(4000) NULL,\n  LCStatus            VARCHAR(200) NOT NULL,\n  Merchant            VARCHAR(200) NULL,\n  Category            VARCHAR(200) NULL,\n  BonusName           VARCHAR(10) NULL,\n  BalanceValue        NUMERIC(18,2) NULL,\n  BalancePoints       NUMERIC(18,2) NULL,\n  Balance             NUMERIC(18,2) NULL,\n  BalanceIsStale      BIT NULL,\n  --BalanceUserSet      INT NULL,\n  --BalanceSchemeID     INT NULL,\n  --BalanceSAID         INT NULL,\n  BalanceUpdateDate   DATETIME NULL,\n  BalanceRewardTier   VARCHAR(50) NULL,\n  BalanceValueLabel   VARCHAR(50) NULL,\n  BalancePointsLabel  VARCHAR(50) NULL,\n\n\t--BalancePrefix       VARCHAR(32) NOT NULL,\n\t--BalanceSuffix       VARCHAR(32) NOT NULL,\n\t--BalanceCurrency     VARCHAR(32) NOT NULL,\n\t--BalanceCreateTime   DATETIME NOT NULL,\n\t--BalanceUpdateTime   DATETIME NOT NULL,\n\t--BalanceDescription  VARCHAR(100) NOT NULL,\n\t--BalanceRewardTeir   VARCHAR(32) NOT NULL,\n  --Vouchers        VARCHAR(4000) NULL,\n  --Transactions    VARCHAR(4000) NULL,\n  --PLLLinks        VARCHAR(4000) NULL,\n  AddDate             DATETIME NULL,\n  JoinDate            DATETIME NULL,\n  EffFromDate         DATETIME NULL,\n  EffToDate           DATETIME NULL,\n  ProcessDate         DATETIME NOT NULL,\n  IsCurrent           BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourceLCKey         INT NOT NULL,\n  RestrictionKey      INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS06 Create DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[LCVoucher]') AND type in (N'U'))\nDROP TABLE [Dim].[LCVoucher];\n\nCREATE TABLE Dim.LCVoucher\n  (  \n  ID                INT IDENTITY(1,1) NOT NULL,\n  LoyaltyCardID     INT NULL,--Check\n  VoucherCode       VARCHAR(32) NOT NULL,\n  --VoucherValue      NUMERIC(8,2) NULL,\n  --Prefix            VARCHAR(32) NULL,\n  --Suffix            VARCHAR(32) NULL,\n  --Currency          VARCHAR(3) NULL,\n  --VoucherDesc       VARCHAR(100) NULL,\n  --RewardTier        VARCHAR(10) NULL,\n  BurnType          VARCHAR(32) NULL,\n  BurnValue         NUMERIC(8,2) NULL,\n  BurnPrefix        VARCHAR(32) NULL,\n  BurnSuffix        VARCHAR(32) NULL,\n  BurnCurrency      VARCHAR(32) NULL, \n  EarnType          VARCHAR(32) NULL,\n  EarnValue         NUMERIC(8,2) NULL,\n  EarnPrefix        VARCHAR(32) NULL,\n  EarnSuffix        VARCHAR(32) NULL,\n  EarnCurrency      VARCHAR(32) NULL, \n  EarnTargetValue   NUMERIC(8,2) NULL,\n  VoucherState      VARCHAR(32) NULL,\n  Subtext           VARCHAR(32) NULL,\n  Headline          VARCHAR(32) NULL,\n  BodyText          VARCHAR(32) NULL,\n  IssueDate         DATETIME NULL,\n  ExpiryDate        DATETIME NULL,\n  BarcodeType       VARCHAR(32) NULL,\n  TCUrl             VARCHAR(100) NULL,\n  EffFromDate       DATETIME NOT NULL,\n  EffToDate         DATETIME NULL,\n  ProcessDate       DATETIME NOT NULL,\n  IsCurrent         BIT NOT NULL  DEFAULT 1\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS07 Create FactUserPC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[UserPC]') AND type in (N'U'))\nDROP TABLE [Fact].[UserPC];\n\nCREATE TABLE [Fact].[UserPC]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  UserID          INT NULL,\n  PaymentCardID   BIGINT NULL,\n  IsCreated       BIT NULL,\n  CreateDate      DATETIME NULL,\n  ProcessDate     DATETIME NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS08 Create FactUserLC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fact].[UserLC]') AND type in (N'U'))\nDROP TABLE [Fact].[UserLC];\n\nCREATE TABLE [Fact].[UserLC]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  UserID          INT NULL,\n  LoyaltyCardID   INT NULL,\n  LCJoinDate      DATETIME NULL,\n  LCAddDate       DATETIME NULL,\n  IsCreated       BIT NULL,\n  CreateDate      DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS09 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT DISTINCT\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(4) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS10 Create view vw_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalcustomuser\nGO\n\nCREATE VIEW dbo.vw_history_historicalcustomuser\nAS\nSELECT DISTINCT \n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[change_details],\n    --ext.[body],\n    --ext.[email],\n    --ext.external_id,\n    --ext.*\n   js.[id],\n   js.[email],\n   js.[client_id],\n   js.[twitter],\n   js.[facebook],\n   js.[is_staff],\n   js.[is_active],\n   js.[is_tester],\n   js.[date_joined],\n   js.[external_id],\n   js.[delete_token]\nFROM [dbo].[ext_history_historicalcustomuser] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n        [id]            INT '$.id',\n        [email]         VARCHAR(255) '$.email',\n        [client_id]     VARCHAR(100) '$.client',\n        [twitter]       VARCHAR(100) '$.twitter',\n        [facebook]      VARCHAR(100) '$.facebook',\n        [is_staff]      bit '$.is_staff',\n        [is_active]     bit '$.is_active',\n        [is_tester]     bit '$.is_tester',\n        [date_joined]   VARCHAR(50) '$.date_joined',\n        [external_id]   VARCHAR(255) '$.external_id',\n        [delete_token]  VARCHAR(255) '$.delete_token'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS11 Create view vw_history_historicalschemeaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalschemeaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalschemeaccount\nAS\nSELECT\n   ext.instance_id   AS SAID,\n   ext.change_type   AS ChangeType,\n   ext.created       AS SACreated,\n\n   js.Status,\n   js.CreateDate,\n   js.UpdateDate,\n   js.JoinDate,\n   js.LinkDate,\n   js.IsDeleted\nFROM [dbo].[ext_history_historicalschemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n         [Status]       INT '$.status',\n         [CreateDate]   VARCHAR(16) '$.created',\n         [UpdateDate]   VARCHAR(16) '$.updated',\n         [JoinDate]     VARCHAR(16) '$.created',\n         [LinkDate]     VARCHAR(16) '$.created',\n         [IsDeleted]    BIT '$.is_deleted'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS12 Create view vw_scheme_schemeaccount_Balance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_balance\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_balance\nAS\nSELECT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.BalanceValue,\n   js.BalancePoints,\n   js.Balance,\n   js.BalanceIsStale,\n   js.BalanceUserSet,\n   js.BalanceSchemeID,\n   js.BalanceUpdateDate,\n   js.BalanceRewardTeir,\n   js.BalanceValueLabel,\n   js.BalancePointsLabel,\n   js.BalanceSAID\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(balances, '$'))\n   WITH (\n         [BalanceValue]       NUMERIC(18,2) '$.value',\n         [BalancePoints]      NUMERIC(18,2) '$.points',\n         [Balance]            NUMERIC(18,2) '$.balance',\n         [BalanceIsStale]     BIT '$.is_stale',\n         [BalanceUserSet]     VARCHAR(50) '$.user_set',\n         [BalanceSchemeID]    INT '$.scheme_id',\n         [BalanceUpdateDate]  VARCHAR(50) '$.updated_at',\n         [BalanceRewardTeir]  VARCHAR(50) '$.reward_tier',\n         [BalanceValueLabel]  VARCHAR(50) '$.value_label',\n         [BalancePointsLabel] VARCHAR(50) '$.points_label',\n         [BalanceSAID]        [INT] '$.scheme_account_id'\n         ) AS js\n--WHERE vouchers <> '{}' and ext.id = 40000\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS13 Create view vw_scheme_schemeaccount_Voucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_scheme_schemeaccount_voucher\nGO\n\nCREATE VIEW dbo.vw_scheme_schemeaccount_voucher\nAS\nSELECT DISTINCT\n   ext.id         AS SAID,\n   ext.created    AS SACreated,\n   ext.updated    AS SAUpdated,\n\n   js.[VoucherCode],\n   \n   js.[BurnType],\n   js.[BurnValue],\n   js.[BurnPrefix],\n   js.[BurnSuffix],\n   js.[BurnCurrency],\n   \n   js.[EarnType],\n   js.[EarnValue],\n   js.[EarnPrefix],\n   js.[EarnSuffix],\n   js.[EarnCurrency],\n   js.[EarnTargetValue],\n   \n   js.[VoucherState],\n   js.[SubText],\n   js.[Headline],\n   js.[BodyText],\n   js.[IssueDate],\n   js.[ExpiryDate],\n   js.[BarcodeType],\n   js.TCUrl\nFROM [dbo].[ext_scheme_schemeaccount] ext\nOUTER APPLY OPENJSON (vouchers, '$')\n   WITH (\n        [VoucherCode]            VARCHAR(32) '$.code',\n\n        [BurnType]               VARCHAR(32) '$.burn.type',\n        [BurnValue]              VARCHAR(32) '$.burn.value',\n        [BurnPrefix]             VARCHAR(32) '$.burn.prefix',\n        [BurnSuffix]             VARCHAR(32) '$.burn.suffix',\n        [BurnCurrency]           VARCHAR(32) '$.burn.Currency',\n\n        [EarnType]               VARCHAR(32) '$.earn.type',\n        [EarnValue]              VARCHAR(32) '$.earn.value',\n        [EarnPrefix]             VARCHAR(32) '$.earn.prefix',\n        [EarnSuffix]             VARCHAR(32) '$.earn.suffix',\n        [EarnCurrency]           VARCHAR(32) '$.earn.Currency',\n        [EarnTargetValue]        VARCHAR(32) '$.earn.target_value',\n\n        [VoucherState]           VARCHAR(32) '$.state',\n        [SubText]                VARCHAR(32) '$.subtext',\n        [Headline]               VARCHAR(32) '$.headline',\n        [BodyText]               VARCHAR(32) '$.body_text',\n        [IssueDate]              VARCHAR(32) '$.date_issued',\n        [ExpiryDate]             VARCHAR(32) '$.expiry_date',\n        [BarcodeType]            VARCHAR(32) '$.barcode_type',\n        [TCUrl]                  VARCHAR(100) '$.terms_and_conditions_url'   \n         ) AS js\nWHERE ext.vouchers <> '{}'\n   AND js.[VoucherState] <> 'inprogress'\n   --and js.VoucherCode = 'WHS000054'\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS14 Update DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimPaymentCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimPaymentCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimPaymentCard] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.PaymentCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EventID,\n    ValidTo,\n    Fingerprint,\n    CardCreateDate,\n    CardCreateDate AS EffFromDate,\n    LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourcePCKey\n  FROM Dim.PaymentCard\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS15 Update DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimUser', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimUser]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimUser] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n -- dim.ProcessDate = GETDATE()\n--SELECT *\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EventID,\n    Email, \n    Client, \n    ExternalID,\n    IsActive,\n    UserCreateDate,\n    UserCreateDate AS EffFromDate,\n    LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceUserKey\n  FROM [Dim].[User]\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS16 Update DimLoyaltyCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLoyaltyCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLoyaltyCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLoyaltyCard] \nAS\n\n/*\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LoyaltyCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EventID,\n    LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY SourceLCKey ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceLCKey\n  FROM Dim.LoyaltyCard\n) updt\nON updt.ID = dim.ID\n*/\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS17 Update DimLCVoucher')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimLCVoucher', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimLCVoucher]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimLCVoucher] \nAS\n\nUPDATE dim\nSET\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent\n  --dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.LCVoucher dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EventID,\n    LEAD(EffFromDate) OVER(PARTITION BY VoucherCode ORDER BY EffFromDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN (LEAD(EffFromdate) OVER(PARTITION BY VoucherCode,VoucherState ORDER BY EffFromDate)) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    LoyaltyCardID\n  FROM Dim.LCVoucher\n) updt\nON updt.ID = dim.ID\n/*Uncomment after the first run and add WHERE clause to update the records with current Fingerprint\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UPS18 Create usp_TruncateTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "04 UserLCPC"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_TruncateTable', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_TruncateTable]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_TruncateTable] \nAS\n\nTRUNCATE TABLE [dim].[PaymentCard];\n\nTRUNCATE TABLE [dim].[User];\n\nTRUNCATE TABLE [dim].[LoyaltyCard];\n\nTRUNCATE TABLE [dim].[LCVoucher];\n\nTRUNCATE TABLE [fact].[UserLC];\n\nTRUNCATE TABLE [fact].[UserPC];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/harmonia_parquet_inspect')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- SELECT\n--     TOP 100 *\n-- FROM\n--     OPENROWSET(\n--         BULK 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthprod-datalake/temp/harmonia/oneoffexport/part-00000-931e9f73-f3b2-462a-a203-358cfd48c033-c000.snappy.parquet',\n--         FORMAT='PARQUET'\n--     ) AS [result]\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'test1234!atasergr'\n-- GO\n-- CREATE DATABASE SCOPED CREDENTIAL WorkspaceIdentity\n-- WITH IDENTITY = 'Managed Identity'\n-- CREATE EXTERNAL DATA SOURCE harmonia_test\n-- WITH (LOCATION = 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthprod-datalake/temp/harmonia/oneoffexport/', CREDENTIAL = WorkspaceIdentity)\n\n-- SELECT TOP 10 * FROM OPENROWSET(BULK '*.parquet', DATA_SOURCE = 'harmonia_test', FORMAT='PARQUET') as rows;\n-- CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET)\n-- CREATE EXTERNAL TABLE dbo.harmonia_import_transaction_test (\n--     [id] int, \n--     [created_at] datetime, \n--     [updated_at] datetime, \n--     [transaction_id] varchar(8000), \n--     [provider_slug] varchar(8000), \n--     [identified] bit, \n--     [source] varchar(8000), \n--     [data] varchar(8000), \n--     [match_group] VARCHAR(8000)\n-- ) WITH (LOCATION = '*.parquet', DATA_SOURCE = [harmonia_test], FILE_FORMAT = [SynapseParquetFormat]);\n\n-- SELECT count(1) FROM dbo.harmonia_import_transaction_test;\n-- SELECT TOP 10 * FROM dbo.harmonia_import_transaction_test WHERE updated_at IS NOT NULL;\n-- SELECT count(1) FROM dbo.harmonia_import_transaction_test WHERE updated_at IS NULL;\n\n-- CREATE EXTERNAL TABLE dbo.tharmonia_import_transaction_testout WITH (\n--     LOCATION = 'new_data/', DATA_SOURCE = [harmonia_test], FILE_FORMAT = [SynapseParquetFormat]\n-- ) AS SELECT id, JSON_VALUE(data, '$.TransactionCardFirst6') AS first6, data FROM dbo.harmonia_import_transaction_test WHERE id = 49094976;\n\n\n\n-- CREATE USER [binkuksouthprodsynapse] FROM EXTERNAL PROVIDER;\n-- ALTER ROLE db_owner ADD MEMBER [binkuksouthprodsynapse];\n-- GRANT CONTROL ON SCHEMA :: dbo TO binkuksouthprodsynapse;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "temp"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u01 Create Schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Dim' )\n    EXEC('CREATE SCHEMA [Dim]');\nGO\n--GRANT CONTROL ON SCHEMA :: Dim TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Fact' )\n    EXEC('CREATE SCHEMA [Fact]');\nGO\n--GRANT CONTROL ON SCHEMA :: Fact TO binkuksouthprodsynapse;\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Ctl' )\n    EXEC('CREATE SCHEMA [Ctl]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Err' )\n    EXEC('CREATE SCHEMA [Err]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Rpt' )\n    EXEC('CREATE SCHEMA [Rpt]');\nGO\n\nIF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = N'Mdm' )\n    EXEC('CREATE SCHEMA [Mdm]');\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u02 usp_CreateExternalObjects')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_CreateExternalObjects', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_CreateExternalObjects]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_CreateExternalObjects] \n    @Yr     VARCHAR(4),\n    @Mt     VARCHAR(2),\n    @Dy     VARCHAR(2)\nAS\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourPasswordHere@&'\n--CREATE DATABASE SCOPED CREDENTIAL SynapseIdentity\n--WITH IDENTITY = 'Managed Identity';\n--GO\n\nDECLARE \n    @tbl VARCHAR(50),\n    @col VARCHAR(1000),\n    @loc VARCHAR(1000),\n    @sql VARCHAR(1000)\n\n/****************************************history_historicalpaymentcardaccount****************************************/\nSET @tbl = 'history_historicalpaymentcardaccount'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [user_id] INT,\n    [body] VARCHAR(4000),\n    [change_details] VARCHAR(255)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n/****************************************history_historicalcustomuser****************************************/\nSET @tbl = 'history_historicalcustomuser'\nSET @Col = \n    '\n    [id] INT,\n    [created] DATETIME,\n    [change_type] VARCHAR(6),\n    [instance_id] VARCHAR(255),\n    [channel] VARCHAR(255),\n    [change_details] VARCHAR(255),\n    [body] VARCHAR(4000),\n    [email] VARCHAR(100),\n    [external_id] VARCHAR(100)\n    '\n--Drop external tables, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID(''dbo.ext_' + @tbl + ''') )\n    DROP EXTERNAL TABLE dbo.ext_' + @tbl\nEXEC(@sql)\n--Drop external file format, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''eff_' + @tbl + ''')\n    DROP EXTERNAL FILE FORMAT eff_' + @tbl\nEXEC(@sql)\n--Drop external data sources, if exists\nSET @sql = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''eds_' + @tbl + ''')\n    DROP EXTERNAL DATA SOURCE eds_' + @tbl\nEXEC(@sql)\n\n--CREATE EXTERNAL DATA SOURCE\nSET @loc = 'abfss://datalake@binkuksouthproddwh.dfs.core.windows.net/Hermes/public_' + @tbl + '/'\nSET @sql = \n    'CREATE EXTERNAL DATA SOURCE eds_' + @tbl + '\n    WITH    (   \n            LOCATION = ''' + @loc + ''',\n            CREDENTIAL = SynapseIdentity,\n            TYPE = HADOOP\n            )'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL FILE FORMAT FOR PARQUET FILES  \nSET @sql = 'CREATE EXTERNAL FILE FORMAT eff_' + @tbl + '  \nWITH (  \n         FORMAT_TYPE = PARQUET, \n         DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec''\n    );'\nEXEC(@sql);\n\n--CREATE AN EXTERNAL TABLE TO STAGE THE DATA\nSET @loc = 'https://binkuksouthproddwh.dfs.core.windows.net/datalake/Hermes/public_' + @tbl + '/' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'\nSET @sql = \n    'CREATE EXTERNAL TABLE dbo.ext_' + @tbl + ' (' + @Col + ')\n    WITH    (   \n            LOCATION = ''' + @Yr + '/' + @Yr+@Mt + '/' + @Yr+@Mt+@Dy + '/'',\n            DATA_SOURCE = eds_' + @tbl + ', \n            FILE_FORMAT = eff_' + @tbl + '\n            )'\n\nEXEC(@sql);\n\n--GRANT db_owner ON OBJECT::dbo.usp_CreateExternalObjects TO binkuksouthprodsynapse;\n--EXEC sp_addrolemember N'db_owner', N'binkuksouthprodsynapse'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u03 Create DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[PaymentCard]') AND type in (N'U'))\nDROP TABLE [Dim].[PaymentCard];\n\nCREATE TABLE Dim.PaymentCard\n  (  \n  ID              BIGINT IDENTITY(1,1) NOT NULL,\n  NameOnCard      VARCHAR(150) NOT NULL,\n  PANTruncation   VARCHAR(16) NOT NULL,\n  ValidFrom       DATE NULL,\n  ValidTo         DATE NULL,--NOT NULL,\n  Token           VARCHAR(255) NOT NULL,\n  Fingerprint     VARCHAR(100) NOT NULL,\n  Issuer          VARCHAR(200) NOT NULL,\n  CardProvider    VARCHAR(200) NOT NULL,\n  Slug            VARCHAR(50) NULL,--NOT NULL,\n  CardType        VARCHAR(40) NOT NULL,\n  CardStatus      VARCHAR(32) NOT NULL,\n  IsDeleted       BIT NOT NULL,\n  Country         VARCHAR(32) NOT NULL,\n  CCYCode         VARCHAR(3) NOT NULL,\n  CardCreateDate  DATETIME NULL,--20210301NOT NULL,\n  CardUpdateDate  DATETIME NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NOT NULL,\n  IsCurrent       BIT NOT NULL,-- DEFAULT 1, --IsDeleted look very similar. Do we need both IsDeleted & IsCurrent?\n  SourcePCKey     INT NOT NULL,\n  RestrictionKey  INT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u04 Create DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "--Change of Columns used for SCD: Status\n\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Dim].[User]') AND type in (N'U'))\nDROP TABLE [Dim].[User];\n\nCREATE TABLE Dim.[User]\n  (  \n  ID              INT IDENTITY(1,1) NOT NULL,\n  FirstName       VARCHAR(255) NULL,\n  LastName        VARCHAR(255) NULL,\n  Phone           VARCHAR(100) NULL,\n  Email           VARCHAR(255) NULL,\n  Facebook        VARCHAR(255) NULL,\n  Twitter         VARCHAR(255) NULL,\n  AddressLine1    VARCHAR(255) NULL,\n  AddressLine2    VARCHAR(255) NULL,\n  City            VARCHAR(100) NULL,\n  Region          VARCHAR(100) NULL,\n  Postcode        VARCHAR(20) NULL,\n  Country         VARCHAR(100) NULL,\n  Gender          VARCHAR(16) NULL,\n  DateOfBirth     DATE NULL,\n  Channel         VARCHAR(100) NULL,\n  Organisation    VARCHAR(100) NOT NULL,\n  Client          VARCHAR(100) NOT NULL,\n  ExternalID      VARCHAR(255) NOT NULL,\n  UserCreateDate  DATETIME NULL,\n  UserUpdateDate  DATETIME NULL,\n  IsActive        BIT NOT NULL DEFAULT 1,\n  DeleteToken     VARCHAR(255) NULL,\n  EffFromDate     DATETIME NULL,\n  EffToDate       DATETIME NULL,\n  ProcessDate     DATETIME NULL,\n  IsStaff         BIT NULL,\n  IsTester        BIT NOT NULL,\n  IsCurrent       BIT NOT NULL,\n  SourceUserKey   INT NULL,\n  RestrictionID   INT NULL,\n  IsRTBF          BIT NULL\n  )  \nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u05 Create view vw_history_historicalpaymentcardaccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalpaymentcardaccount\nGO\n\nCREATE VIEW dbo.vw_history_historicalpaymentcardaccount\nAS\nSELECT\n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[user_id],\n    --ext.[body],\n    --ext.[change_details],\n    --ext.*,\n    js.[id],\n    js.[name_on_card],\n    js.[start_month],\n    js.[start_year],\n    js.[expiry_month],\n    js.[expiry_year],\n    js.[status],\n    js.[created],\n    js.[updated],\n    js.[issuer_id],\n    js.[payment_card_id],\n    js.[token],\n    js.[country],\n    js.[currency_code],\n    js.[pan_end],\n    js.[pan_start],\n    js.[is_deleted],\n    js.[fingerprint]\n FROM [dbo].[ext_history_historicalpaymentcardaccount] ext\nOUTER APPLY OPENJSON (JSON_QUERY(Body, '$'))\n   WITH (\n        [id] int '$.id',\n        [name_on_card] varchar(150) '$.name_on_card',\n        [start_month] int '$.start_month',\n        [start_year] int '$.start_year',\n        [expiry_month] int '$.expiry_month',\n        [expiry_year] int '$.expiry_year',\n        [status] int '$.status',\n        [order] int '$.order',\n        [created] varchar(32) '$.created',\n        [updated] varchar(32) '$.updated',\n        [issuer_id] int '$.issuer',\n        [payment_card_id] int '$.payment_card',\n        [token] varchar(255) '$.token',\n        [country] varchar(40) '$.country',\n        [currency_code] varchar(3) '$.currency_code',\n        [pan_end] varchar(4) '$.pan_end',\n        [pan_start] varchar(4) '$.pan_start',\n        [is_deleted] bit '$.is_deleted',\n        [fingerprint] varchar(100) '$.fingerprint',\n        [psp_token] varchar(255) '$.psp_token',\n        [consents] varchar(4000) '$.consents',\n        [hash] varchar(255) '$.hash'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u06 Create view vw_history_historicalcustomuser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "DROP VIEW IF EXISTS dbo.vw_history_historicalcustomuser\nGO\n\nCREATE VIEW dbo.vw_history_historicalcustomuser\nAS\nSELECT DISTINCT \n    --ext.[id],\n    --ext.[created],\n    --ext.[change_type],\n    --ext.[instance_id],\n    --ext.[channel],\n    --ext.[change_details],\n    --ext.[body],\n    --ext.[email],\n    --ext.external_id,\n    --ext.*\n   js.[id],\n   js.[email],\n   js.[client_id],\n   js.[twitter],\n   js.[facebook],\n   js.[is_staff],\n   js.[is_active],\n   js.[is_tester],\n   js.[date_joined],\n   js.[external_id],\n   js.[delete_token]\nFROM [dbo].[ext_history_historicalcustomuser] ext\nOUTER APPLY OPENJSON (JSON_QUERY(body, '$'))\n   WITH (\n        [id]            INT '$.id',\n        [email]         VARCHAR(255) '$.email',\n        [client_id]     VARCHAR(100) '$.client',\n        [twitter]       VARCHAR(100) '$.twitter',\n        [facebook]      VARCHAR(100) '$.facebook',\n        [is_staff]      bit '$.is_staff',\n        [is_active]     bit '$.is_active',\n        [is_tester]     bit '$.is_tester',\n        [date_joined]   VARCHAR(50) '$.date_joined',\n        [external_id]   VARCHAR(255) '$.external_id',\n        [delete_token]  VARCHAR(255) '$.delete_token'\n   ) AS js\n--WHERE ext.[created] >= dateadd(day,datediff(day,1,GETDATE()),0)\n--   AND ext.[created] < dateadd(day,datediff(day,0,GETDATE()),0)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u07 Update DimPaymentCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimPaymentCard', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimPaymentCard]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimPaymentCard] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent,\n  dim.ProcessDate = GETDATE()\n--SELECT *\nFROM Dim.PaymentCard dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EventID,\n    ValidTo,\n    Fingerprint,\n    CardCreateDate,\n    CardCreateDate AS EffFromDate,\n    LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(CardCreateDate)  OVER(PARTITION BY Fingerprint ORDER BY CardCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourcePCKey\n  FROM Dim.PaymentCard\n) updt\nON updt.ID = dim.ID\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u08 Update DimUser')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 User"
				},
				"content": {
					"query": "IF OBJECT_ID('usp_UpdateDimUser', 'P') IS NOT NULL\nDROP PROCEDURE [dbo].[usp_UpdateDimUser]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROC [dbo].[usp_UpdateDimUser] \nAS\n\nUPDATE dim\nSET\n  dim.EffFromDate = updt.EffFromDate,\n  dim.EffToDate = updt.EffToDate,\n  dim.IsCurrent = updt.IsCurrent,\n  dim.ProcessDate = GETDATE()\n--SELECT *\nFROM [Dim].[User] dim\nINNER JOIN \n(\n  SELECT\n    ID,\n    DENSE_RANK()  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EventID,\n    Email, \n    Client, \n    ExternalID,\n    IsActive,\n    UserCreateDate,\n    UserCreateDate AS EffFromDate,\n    LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) EffToDate,\n    GETDATE() AS ProcessDate,\n    CASE \n      WHEN LEAD(UserCreateDate)  OVER(PARTITION BY Email, Client, ExternalID ORDER BY UserCreateDate) IS NULL THEN 1\n      ELSE 0\n      END AS IsCurrent,\n    SourceUserKey\n  FROM [Dim].[User]\n) updt\nON updt.ID = dim.ID\nWHERE\n  ISNULL(dim.EffFromDate, GETDATE()) <> ISNULL(updt.EffFromDate, GETDATE()) OR\n  ISNULL(dim.EffToDate, GETDATE()) <> ISNULL(updt.EffToDate, GETDATE()) OR\n  dim.IsCurrent <> updt.IsCurrent",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		}
	]
}