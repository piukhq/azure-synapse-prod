{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "binkuksouthprodsynapse"
		},
		"DWHSQLPool_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWHSQLPool'"
		},
		"Harmonia_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Harmonia'"
		},
		"binkuksouthprodsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'binkuksouthprodsynapse-WorkspaceDefaultSqlServer'"
		},
		"DataLakeProd_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://binkuksouthproddwh.dfs.core.windows.net"
		},
		"KeyVaultProd_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://bink-uksouth-prod-inf.vault.azure.net/"
		},
		"binkuksouthprodsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://binkuksouthproddwh.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/harmonia_daily_dump_parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "HarmoniaDailyExport",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HarmoniaDailyDumpToParquet",
								"type": "DataFlowReference",
								"parameters": {
									"recordsBefore": {
										"value": "'20210127'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"HarmoniaImportTransaction": {},
									"HarmoniaImportTransactionExport": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "HarmoniaDailyImport",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "HarmoniaDailyExport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadDailyHarmoniaImportTransactionToDWH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ParquetImportTransaction": {},
									"ImportTransactionSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "DataLakeProd",
									"type": "LinkedServiceReference"
								},
								"folderPath": "binkuksouthprod-datalake/temp/synapse/harmoniaimport"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "Harmonia"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/HarmoniaDailyDumpToParquet')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/LoadDailyHarmoniaImportTransactionToDWH')]",
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HarmoniaDailyImportTransactionParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('temp/harmonia/import_transaction/date=', getPastTime(1, 'Day', 'yyyy-MM-dd'), '/')",
							"type": "Expression"
						},
						"fileSystem": "binkuksouthprod-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DataLakeProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/harmonia__import_transaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Harmonia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "transaction_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provider_slug",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "identified",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "source",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "data",
						"type": "json",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "match_group",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "import_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Harmonia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWHSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DWHSQLPool_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeProd')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLakeProd_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Harmonia')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Harmonia Azure Postgres Database",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('Harmonia_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultProd",
							"type": "LinkedServiceReference"
						},
						"secretName": "synapse-postgres-harmonia"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/KeyVaultProd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KeyVaultProd')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Azure KeyVault containing prod database credentials",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KeyVaultProd_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/binkuksouthprodsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('binkuksouthprodsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/binkuksouthprodsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('binkuksouthprodsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HarmoniaDailyDumpToParquet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "harmonia__import_transaction",
								"type": "DatasetReference"
							},
							"name": "HarmoniaImportTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HarmoniaDailyImportTransactionParquet",
								"type": "DatasetReference"
							},
							"name": "HarmoniaImportTransactionExport"
						}
					],
					"transformations": [],
					"script": "parameters{\n\trecordsBefore as string\n}\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\ttransaction_id as string,\n\t\tprovider_slug as string,\n\t\tidentified as boolean,\n\t\tsource as string,\n\t\tdata as string,\n\t\tmatch_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tbatchSize: 10000,\n\tisolationLevel: 'READ_COMMITTED',\n\tquery: (concat(\"SELECT * FROM import_transaction WHERE (created_at BETWEEN '\", toString(subDays(currentDate(), 1)), \"' AND '\", toString(currentDate()), \"') OR (updated_at IS NOT NULL AND updated_at BETWEEN '\", toString(subDays(currentDate(), 1)), \"' AND '\", toString(currentDate()), \"')\")),\n\tformat: 'query') ~> HarmoniaImportTransaction\nHarmoniaImportTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HarmoniaImportTransactionExport"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/harmonia__import_transaction')]",
				"[concat(variables('workspaceId'), '/datasets/HarmoniaDailyImportTransactionParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/harmonia_parquet_inspect')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- SELECT\n--     TOP 100 *\n-- FROM\n--     OPENROWSET(\n--         BULK 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthprod-datalake/temp/harmonia/oneoffexport/part-00000-931e9f73-f3b2-462a-a203-358cfd48c033-c000.snappy.parquet',\n--         FORMAT='PARQUET'\n--     ) AS [result]\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'test1234!atasergr'\n-- GO\n-- CREATE DATABASE SCOPED CREDENTIAL WorkspaceIdentity\n-- WITH IDENTITY = 'Managed Identity'\n-- CREATE EXTERNAL DATA SOURCE harmonia_test\n-- WITH (LOCATION = 'https://binkuksouthproddwh.dfs.core.windows.net/binkuksouthprod-datalake/temp/harmonia/oneoffexport/', CREDENTIAL = WorkspaceIdentity)\n\n-- SELECT TOP 10 * FROM OPENROWSET(BULK '*.parquet', DATA_SOURCE = 'harmonia_test', FORMAT='PARQUET') as rows;\n-- CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] WITH ( FORMAT_TYPE = PARQUET)\n-- CREATE EXTERNAL TABLE dbo.harmonia_import_transaction_test (\n--     [id] int, \n--     [created_at] datetime, \n--     [updated_at] datetime, \n--     [transaction_id] varchar(8000), \n--     [provider_slug] varchar(8000), \n--     [identified] bit, \n--     [source] varchar(8000), \n--     [data] varchar(8000), \n--     [match_group] VARCHAR(8000)\n-- ) WITH (LOCATION = '*.parquet', DATA_SOURCE = [harmonia_test], FILE_FORMAT = [SynapseParquetFormat]);\n\n-- SELECT count(1) FROM dbo.harmonia_import_transaction_test;\n-- SELECT TOP 10 * FROM dbo.harmonia_import_transaction_test WHERE updated_at IS NOT NULL;\n-- SELECT count(1) FROM dbo.harmonia_import_transaction_test WHERE updated_at IS NULL;\n\n-- CREATE EXTERNAL TABLE dbo.tharmonia_import_transaction_testout WITH (\n--     LOCATION = 'new_data/', DATA_SOURCE = [harmonia_test], FILE_FORMAT = [SynapseParquetFormat]\n-- ) AS SELECT id, JSON_VALUE(data, '$.TransactionCardFirst6') AS first6, data FROM dbo.harmonia_import_transaction_test WHERE id = 49094976;\n\n\n\n-- CREATE USER [binkuksouthprodsynapse] FROM EXTERNAL PROVIDER;\n-- ALTER ROLE db_owner ADD MEMBER [binkuksouthprodsynapse];\n-- GRANT CONTROL ON SCHEMA :: dbo TO binkuksouthprodsynapse;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "temp"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HarmoniaDailyDump')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Dump Harmonia daily",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "harmonia_daily_dump_parquet",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-02T01:00:00Z",
						"timeZone": "UTC",
						"schedule": {}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/harmonia_daily_dump_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dwhpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stagingpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Scratch')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "dwhpool",
						"databaseName": "dwhpool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadDailyHarmoniaImportTransactionToDWH')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HarmoniaDailyImportTransactionParquet",
								"type": "DatasetReference"
							},
							"name": "ParquetImportTransaction"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWHHarmoniaImportTransaction",
								"type": "DatasetReference"
							},
							"name": "ImportTransactionSink"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\ttransaction_id as string,\n\t\tprovider_slug as string,\n\t\tidentified as boolean,\n\t\tsource as string,\n\t\tdata as string,\n\t\tmatch_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> ParquetImportTransaction\nParquetImportTransaction alterRow(upsertIf(not(isNull(updated_at)))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tbatchSize: 2000,\n\tmapColumn(\n\t\tid,\n\t\tcreated_at,\n\t\tupdated_at,\n\t\ttransaction_id,\n\t\tprovider_slug,\n\t\tidentified,\n\t\tsource,\n\t\tdata,\n\t\tmatch_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ImportTransactionSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/HarmoniaDailyImportTransactionParquet')]",
				"[concat(variables('workspaceId'), '/datasets/DWHHarmoniaImportTransaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWHHarmoniaImportTransaction')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWHSQLPool",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "harmonia",
					"table": "import_transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWHSQLPool')]"
			]
		}
	]
}