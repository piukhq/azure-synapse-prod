{
	"name": "DELETE-df_LoadDimLCVoucher_FullLoad",
	"properties": {
		"description": "Data flow task to load (Full Load) LCVoucher Dimension",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_voucher",
						"type": "DatasetReference"
					},
					"name": "srcVwSchemeSchemeaccountVoucher"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_scheme_schemeaccount",
						"type": "DatasetReference"
					},
					"name": "srcSchemeAccount"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLCVoucher",
						"type": "DatasetReference"
					},
					"name": "srcDimLCVoucher"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLCVoucher",
						"type": "DatasetReference"
					},
					"name": "scrMaxDimLCVoucherID"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "srcDimLoyaltyCard"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLCVoucher",
						"type": "DatasetReference"
					},
					"name": "snkDimLCVoucher"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLCVoucher",
						"type": "DatasetReference"
					},
					"name": "snkDimLCVoucherEA"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLCVoucher",
						"type": "DatasetReference"
					},
					"name": "snkDimLCVoucherEI"
				}
			],
			"transformations": [
				{
					"name": "JoinMaxID"
				},
				{
					"name": "LookupExistingRecords"
				},
				{
					"name": "NewExistingSplit"
				},
				{
					"name": "IsCurrentNew"
				},
				{
					"name": "IsCurrentInsert"
				},
				{
					"name": "InCurrentUpdate"
				},
				{
					"name": "Filter"
				},
				{
					"name": "UpdateExistingRecords"
				},
				{
					"name": "AdditionalFields"
				},
				{
					"name": "SelectVC"
				},
				{
					"name": "SelectSA"
				},
				{
					"name": "SelectDimLCV"
				},
				{
					"name": "SelectDimLC"
				},
				{
					"name": "JoinVcSa"
				},
				{
					"name": "JoinVcSaDimLc"
				}
			],
			"script": "source(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as string,\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as string,\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as string,\n\t\tVoucherState as string,\n\t\tSubText as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as string,\n\t\tExpiryDate as string,\n\t\tBarcodeType as string,\n\t\tTCUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountVoucher\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLCVoucher\nsource(output(\n\t\tMaxDimLCVoucherID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCVoucherID FROM [Dim].[LCVoucher]',\n\tformat: 'query',\n\tstaged: false) ~> scrMaxDimLCVoucherID\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nJoinVcSaDimLc, scrMaxDimLCVoucherID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLCV lookup({vch.VoucherCode} == {dim.VoucherCode},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCVoucherID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCVoucherID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nsrcVwSchemeSchemeaccountVoucher select(mapColumn(\n\t\t{vch.SAID} = SAID,\n\t\t{vch.SACreated} = SACreated,\n\t\t{vch.SAUpdated} = SAUpdated,\n\t\t{vch.VoucherCode} = VoucherCode,\n\t\t{vch.BurnType} = BurnType,\n\t\t{vch.BurnValue} = BurnValue,\n\t\t{vch.BurnPrefix} = BurnPrefix,\n\t\t{vch.BurnSuffix} = BurnSuffix,\n\t\t{vch.BurnCurrency} = BurnCurrency,\n\t\t{vch.EarnType} = EarnType,\n\t\t{vch.EarnValue} = EarnValue,\n\t\t{vch.EarnPrefix} = EarnPrefix,\n\t\t{vch.EarnSuffix} = EarnSuffix,\n\t\t{vch.EarnCurrency} = EarnCurrency,\n\t\t{vch.EarnTargetValue} = EarnTargetValue,\n\t\t{vch.VoucherState} = VoucherState,\n\t\t{vch.SubText} = SubText,\n\t\t{vch.Headline} = Headline,\n\t\t{vch.BodyText} = BodyText,\n\t\t{vch.IssueDate} = IssueDate,\n\t\t{vch.ExpiryDate} = ExpiryDate,\n\t\t{vch.BarcodeType} = BarcodeType,\n\t\t{vch.TCUrl} = TCUrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVC\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.status} = status,\n\t\t{sa.order} = order,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.barcode} = barcode,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.main_answer} = main_answer,\n\t\t{sa.pll_links} = pll_links,\n\t\t{sa.formatted_images} = formatted_images\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimLCVoucher select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.LoyaltyCardID} = LoyaltyCardID,\n\t\t{dim.VoucherCode} = VoucherCode,\n\t\t{dim.BurnType} = BurnType,\n\t\t{dim.BurnValue} = BurnValue,\n\t\t{dim.BurnPrefix} = BurnPrefix,\n\t\t{dim.BurnSuffix} = BurnSuffix,\n\t\t{dim.BurnCurrency} = BurnCurrency,\n\t\t{dim.EarnType} = EarnType,\n\t\t{dim.EarnValue} = EarnValue,\n\t\t{dim.EarnPrefix} = EarnPrefix,\n\t\t{dim.EarnSuffix} = EarnSuffix,\n\t\t{dim.EarnCurrency} = EarnCurrency,\n\t\t{dim.EarnTargetValue} = EarnTargetValue,\n\t\t{dim.VoucherState} = VoucherState,\n\t\t{dim.Subtext} = Subtext,\n\t\t{dim.Headline} = Headline,\n\t\t{dim.BodyText} = BodyText,\n\t\t{dim.IssueDate} = IssueDate,\n\t\t{dim.ExpiryDate} = ExpiryDate,\n\t\t{dim.BarcodeType} = BarcodeType,\n\t\t{dim.TCUrl} = TCUrl,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLCV\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dimLC.ID} = ID,\n\t\t{dimLC.LCStatus} = LCStatus,\n\t\t{dimLC.AddDate} = AddDate,\n\t\t{dimLC.JoinDate} = JoinDate,\n\t\t{dimLC.EffFromDate} = EffFromDate,\n\t\t{dimLC.EffToDate} = EffToDate,\n\t\t{dimLC.ProcessDate} = ProcessDate,\n\t\t{dimLC.IsCurrent} = IsCurrent,\n\t\t{dimLC.SourceLCKey} = SourceLCKey,\n\t\t{dimLC.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nSelectVC, SelectSA join({vch.SAID} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSa\nJoinVcSa, SelectDimLC join({sa.id} == {dimLC.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVcSaDimLc\nIsCurrentNew sink(input(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimLCVoucher\nIsCurrentInsert sink(input(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tLoyaltyCardID = {dimLC.ID},\n\t\tEffFromDate = {vch.SACreated},\n\t\tProcessDate = {dimLC.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimLCVoucherEA\nUpdateExistingRecords sink(input(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tVoucherCode as string,\n\t\tBurnType as string,\n\t\tBurnValue as decimal(8,2),\n\t\tBurnPrefix as string,\n\t\tBurnSuffix as string,\n\t\tBurnCurrency as string,\n\t\tEarnType as string,\n\t\tEarnValue as decimal(8,2),\n\t\tEarnPrefix as string,\n\t\tEarnSuffix as string,\n\t\tEarnCurrency as string,\n\t\tEarnTargetValue as decimal(8,2),\n\t\tVoucherState as string,\n\t\tSubtext as string,\n\t\tHeadline as string,\n\t\tBodyText as string,\n\t\tIssueDate as timestamp,\n\t\tExpiryDate as timestamp,\n\t\tBarcodeType as string,\n\t\tTCUrl as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LCVoucher ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LCVoucher OFF;'],\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimLCVoucherEI"
		}
	}
}