{
	"name": "df_LoadPaymentCard",
	"properties": {
		"description": "Data flow task to load Payment Card Dimension",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_syn_dwhpool_vw_history_historicalpaymentcardaccount",
						"type": "DatasetReference"
					},
					"name": "srcPaymentCardAccount"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_paymentcard",
						"type": "DatasetReference"
					},
					"name": "srcPaymentCard"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_paymentcardissuer",
						"type": "DatasetReference"
					},
					"name": "scrPaymentCardIssuer"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_PaymentCardStatus",
						"type": "DatasetReference"
					},
					"name": "srcRefPaymentCardStatus"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_dimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "srcDimPaymentCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_dimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "MaxDimPCID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_dimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "snkDimPaymentCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_dimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "snkDimPaymentCardEI"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_dimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "snkDimPaymentCardEU"
				}
			],
			"transformations": [
				{
					"name": "JoinPCAPC"
				},
				{
					"name": "SelectPCA"
				},
				{
					"name": "SelectPC"
				},
				{
					"name": "SelectPCI"
				},
				{
					"name": "JoinPCAPCPCI"
				},
				{
					"name": "JoinPCAPCPCIRef"
				},
				{
					"name": "SelectRefPC"
				},
				{
					"name": "SelectDimPC"
				},
				{
					"name": "JoinMaxID"
				},
				{
					"name": "LookupExistingRecords"
				},
				{
					"name": "NewExistingSplit"
				},
				{
					"name": "IsCurrentNew"
				},
				{
					"name": "IsCurrentInsert"
				},
				{
					"name": "IsCurrentUpdate"
				},
				{
					"name": "Filter"
				},
				{
					"name": "UpdateExistingRecords"
				},
				{
					"name": "AdditionalFields"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\tcreated as string,\n\t\tupdated as string,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcPaymentCardAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tscan_message as string,\n\t\tinput_label as string,\n\t\tis_active as boolean,\n\t\tsystem as string,\n\t\ttype as string,\n\t\ttoken_method as integer,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCard\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\timage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrPaymentCardIssuer\nsource(output(\n\t\t{_col0_} as integer,\n\t\t{_col1_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> srcRefPaymentCardStatus\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPaymentCard\nsource(output(\n\t\tMaxDimPCID as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimPCID FROM [Dim].[PaymentCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimPCID\nSelectPCA, SelectPC join({pca.payment_card_id} == {pc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPC\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.name_on_card} = name_on_card,\n\t\t{pca.start_month} = start_month,\n\t\t{pca.start_year} = start_year,\n\t\t{pca.expiry_month} = expiry_month,\n\t\t{pca.expiry_year} = expiry_year,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.issuer_id} = issuer_id,\n\t\t{pca.payment_card_id} = payment_card_id,\n\t\t{pca.token} = token,\n\t\t{pca.country} = country,\n\t\t{pca.currency_code} = currency_code,\n\t\t{pca.pan_end} = pan_end,\n\t\t{pca.pan_start} = pan_start,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.fingerprint} = fingerprint\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCA\nsrcPaymentCard select(mapColumn(\n\t\t{pc.id} = id,\n\t\t{pc.name} = name,\n\t\t{pc.slug} = slug,\n\t\t{pc.is_active} = is_active,\n\t\t{pc.type} = type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nscrPaymentCardIssuer select(mapColumn(\n\t\t{pci.id} = id,\n\t\t{pci.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPCI\nJoinPCAPC, SelectPCI join({pca.issuer_id} == {pci.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCI\nJoinPCAPCPCI, SelectRefPC join({pca.status} == {ref.PCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPCAPCPCIRef\nsrcRefPaymentCardStatus select(mapColumn(\n\t\t{ref.PCCode} = {_col0_},\n\t\t{ref.PCStatus} = {_col1_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefPC\nsrcDimPaymentCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.NameOnCard} = NameOnCard,\n\t\t{dim.PANTruncation} = PANTruncation,\n\t\t{dim.ValidFrom} = ValidFrom,\n\t\t{dim.ValidTo} = ValidTo,\n\t\t{dim.Token} = Token,\n\t\t{dim.Fingerprint} = Fingerprint,\n\t\t{dim.Issuer} = Issuer,\n\t\t{dim.CardProvider} = CardProvider,\n\t\t{dim.Slug} = Slug,\n\t\t{dim.CardType} = CardType,\n\t\t{dim.CardStatus} = CardStatus,\n\t\t{dim.IsDeleted} = IsDeleted,\n\t\t{dim.Country} = Country,\n\t\t{dim.CCYCode} = CCYCode,\n\t\t{dim.CardCreateDate} = CardCreateDate,\n\t\t{dim.CardUpdateDate} = CardUpdateDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourcePCKey} = SourcePCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimPC\nJoinPCAPCPCIRef, MaxDimPCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimPC lookup({pca.fingerprint} == {dim.Fingerprint}\n\t&& {new.ValidTo} == {dim.ValidTo},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> IsCurrentUpdate\nIsCurrentUpdate filter({dim.ID}<=MaxDimPCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimPCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ValidFrom} = toDate(concat(right(concat('20',toString({pca.start_year})),4),'-',right(concat('0',toString({pca.start_month})),2),'-01')),\n\t\t{new.ValidTo} = lastDayOfMonth(toDate(concat(right(concat('20',toString({pca.expiry_year})),4),'-',right(concat('0',toString({pca.expiry_month})),2),'-01'))),\n\t\t{new.PANTruncation} = concat({pca.pan_start}, 'xxx', {pca.pan_end}),\n\t\t{new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nIsCurrentNew sink(input(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourcePCKey = {pca.id}\n\t),\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimPaymentCard\nIsCurrentInsert sink(input(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tNameOnCard = {pca.name_on_card},\n\t\tPANTruncation = {new.PANTruncation},\n\t\tValidFrom = {new.ValidFrom},\n\t\tValidTo = {new.ValidTo},\n\t\tToken = {pca.token},\n\t\tFingerprint = {pca.fingerprint},\n\t\tIssuer = {pci.name},\n\t\tCardProvider = {pc.name},\n\t\tSlug = {pc.slug},\n\t\tCardType = {pc.type},\n\t\tCardStatus = {ref.PCStatus},\n\t\tIsDeleted = {pca.is_deleted},\n\t\tCountry = {pca.country},\n\t\tCCYCode = {pca.currency_code},\n\t\tCardCreateDate = {pca.created},\n\t\tCardUpdateDate = {pca.updated},\n\t\tEffFromDate = {pca.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourcePCKey = {pca.id}\n\t),\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimPaymentCardEI\nUpdateExistingRecords sink(input(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.PaymentCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.PaymentCard OFF;'],\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tIsCurrent = {new.IsCurrentUpdate},\n\t\tProcessDate = {new.ProcessDate}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> snkDimPaymentCardEU"
		}
	}
}