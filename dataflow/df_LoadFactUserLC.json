{
	"name": "df_LoadFactUserLC",
	"properties": {
		"description": "Load fact.UserLC",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_history_historicalschemeaccountentry",
						"type": "DatasetReference"
					},
					"name": "srcHistoryHistoricalSchemeAccountEntry"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_scheme_schemeaccount",
						"type": "DatasetReference"
					},
					"name": "srcSchemeSchemeAccount"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimUser",
						"type": "DatasetReference"
					},
					"name": "srcDimUser"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "srcDimLC"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_FactUserLC",
						"type": "DatasetReference"
					},
					"name": "snkFactUserLC"
				}
			],
			"transformations": [
				{
					"name": "SelectUSA"
				},
				{
					"name": "SelectSA"
				},
				{
					"name": "SelectUSR"
				},
				{
					"name": "SelectLC"
				},
				{
					"name": "JoinUsaSa"
				},
				{
					"name": "JoinUsaSaUsr"
				},
				{
					"name": "JoinUsaSaUsrLc"
				},
				{
					"name": "GroupRecords"
				},
				{
					"name": "AdditionalFields"
				},
				{
					"name": "CurrentRecords"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tchange_details as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcHistoryHistoricalSchemeAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeSchemeAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLC\nsrcHistoryHistoricalSchemeAccountEntry select(mapColumn(\n\t\t{usa.id} = id,\n\t\t{usa.created} = created,\n\t\t{usa.change_type} = change_type,\n\t\t{usa.instance_id} = instance_id,\n\t\t{usa.channel} = channel,\n\t\t{usa.user_id} = user_id,\n\t\t{usa.scheme_account_id} = scheme_account_id,\n\t\t{usa.change_details} = change_details\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSA\nsrcSchemeSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcDimUser select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nsrcDimLC select(mapColumn(\n\t\t{lc.ID} = ID,\n\t\t{lc.LCStatus} = LCStatus,\n\t\t{lc.AddDate} = AddDate,\n\t\t{lc.JoinDate} = JoinDate,\n\t\t{lc.EffFromDate} = EffFromDate,\n\t\t{lc.EffToDate} = EffToDate,\n\t\t{lc.ProcessDate} = ProcessDate,\n\t\t{lc.IsCurrent} = IsCurrent,\n\t\t{lc.SourceLCKey} = SourceLCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nSelectUSA, SelectSA join({usa.scheme_account_id} == {sa.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSa\nJoinUsaSa, SelectUSR join({usa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsr\nJoinUsaSaUsr, SelectLC join({usa.scheme_account_id} == {lc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUsaSaUsrLc\nCurrentRecords aggregate(groupBy({usa.scheme_account_id},\n\t\t{lc.ID},\n\t\t{usa.user_id},\n\t\t{usr.ID},\n\t\t{sa.link_date},\n\t\t{sa.join_date},\n\t\t{usa.change_type},\n\t\t{usa.instance_id},\n\t\t{usa.created}),\n\tUserCount = count({usa.user_id})) ~> GroupRecords\nGroupRecords derive({new.IsCreated} = case({usa.change_type}=='create', 1, 0),\n\t\t{new.ProcessDate} = toUTC(currentUTC())) ~> AdditionalFields\nJoinUsaSaUsrLc filter(or({usr.IsCurrent}==toBoolean('true'),{lc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tLCJoinDate as timestamp,\n\t\tLCAddDate as timestamp,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tLoyaltyCardID = {lc.ID},\n\t\tLCJoinDate = {sa.join_date},\n\t\tLCAddDate = {sa.link_date},\n\t\tIsCreated = {new.IsCreated},\n\t\tCreateDate = {usa.created},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserLC"
		}
	}
}