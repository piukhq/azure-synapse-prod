{
	"name": "df_LoadDimLoyaltyCard_FullLoad",
	"properties": {
		"description": "Data flow task to load (Full Load) LoyaltyCard Dimension",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_scheme_schemeaccount",
						"type": "DatasetReference"
					},
					"name": "srcSchemeAccount"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_scheme_scheme",
						"type": "DatasetReference"
					},
					"name": "srcScheme"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_scheme_category",
						"type": "DatasetReference"
					},
					"name": "scrSchemeCategory"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_LoyaltyCardStatus",
						"type": "DatasetReference"
					},
					"name": "srcRefLoyaltyCardStatus"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "srcDimLoyaltyCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "MaxDimLCID"
				},
				{
					"dataset": {
						"referenceName": "ds_syn_dwhpool_vw_scheme_schemeaccount_balance",
						"type": "DatasetReference"
					},
					"name": "srcVwSchemeSchemeaccountBalance"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "snkDimLoyaltyCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "snkDimLoyaltyCardEI"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "snkDimLoyaltyCardEU"
				}
			],
			"transformations": [
				{
					"name": "JoinSABS"
				},
				{
					"name": "SelectSA"
				},
				{
					"name": "SelectSS"
				},
				{
					"name": "SelectSC"
				},
				{
					"name": "JoinSABSSC"
				},
				{
					"name": "JoinSABSSCRef"
				},
				{
					"name": "SelectRefLC"
				},
				{
					"name": "SelectDimLC"
				},
				{
					"name": "JoinMaxID"
				},
				{
					"name": "LookupExistingRecords"
				},
				{
					"name": "NewExistingSplit"
				},
				{
					"name": "IsCurrentNew"
				},
				{
					"name": "IsCurrentInsert"
				},
				{
					"name": "InCurrentUpdate"
				},
				{
					"name": "Filter"
				},
				{
					"name": "UpdateExistingRecords"
				},
				{
					"name": "AdditionalFields"
				},
				{
					"name": "SelectSB"
				},
				{
					"name": "JoinSAB"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tscheme_id as integer,\n\t\tis_deleted as boolean,\n\t\tlink_date as timestamp,\n\t\tjoin_date as timestamp,\n\t\tbalances as string,\n\t\tvouchers as string,\n\t\tbarcode as string,\n\t\tcard_number as string,\n\t\ttransactions as string,\n\t\tmain_answer as string,\n\t\tpll_links as string,\n\t\tformatted_images as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeAccount\nsource(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tslug as string,\n\t\turl as string,\n\t\tcompany as string,\n\t\tcompany_url as string,\n\t\ttier as integer,\n\t\tscan_message as string,\n\t\tpoint_name as string,\n\t\tcategory_id as integer,\n\t\tforgotten_password_url as string,\n\t\tidentifier as string,\n\t\thas_transactions as boolean,\n\t\thas_points as boolean,\n\t\tcolour as string,\n\t\tbarcode_regex as string,\n\t\tcard_number_regex as string,\n\t\tbarcode_prefix as string,\n\t\tcard_number_prefix as string,\n\t\tbarcode_type as integer,\n\t\tandroid_app_id as string,\n\t\tios_scheme as string,\n\t\titunes_url as string,\n\t\tplay_store_url as string,\n\t\tmax_points_value_length as integer,\n\t\tjoin_url as string,\n\t\tlink_account_text as string,\n\t\tjoin_t_and_c as string,\n\t\ttransaction_headers as string,\n\t\tauthorisation_required as boolean,\n\t\tdigital_only as boolean,\n\t\tenrol_incentive as string,\n\t\tplan_description as string,\n\t\tplan_name as string,\n\t\tplan_name_card as string,\n\t\tplan_summary as string,\n\t\tbarcode_redeem_instructions as string,\n\t\tplan_register_info as string,\n\t\tlinking_support as string,\n\t\tformatted_images as string,\n\t\tsecondary_colour as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcScheme\nsource(output(\n\t\tid as integer,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> scrSchemeCategory\nsource(output(\n\t\tCode as short,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> srcRefLoyaltyCardStatus\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tMaxDimLCID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxDimLCID FROM [Dim].[LoyaltyCard]',\n\tformat: 'query',\n\tstaged: false) ~> MaxDimLCID\nsource(output(\n\t\tSAID as integer,\n\t\tSACreated as timestamp,\n\t\tSAUpdated as timestamp,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUserSet as string,\n\t\tBalanceSchemeID as integer,\n\t\tBalanceUpdateDate as string,\n\t\tBalanceRewardTeir as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tBalanceSAID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcVwSchemeSchemeaccountBalance\nJoinSAB, SelectSS join({sa.scheme_id} == {ss.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABS\nsrcSchemeAccount select(mapColumn(\n\t\t{sa.id} = id,\n\t\t{sa.created} = created,\n\t\t{sa.updated} = updated,\n\t\t{sa.scheme_id} = scheme_id,\n\t\t{sa.is_deleted} = is_deleted,\n\t\t{sa.link_date} = link_date,\n\t\t{sa.join_date} = join_date,\n\t\t{sa.balances} = balances,\n\t\t{sa.vouchers} = vouchers,\n\t\t{sa.card_number} = card_number,\n\t\t{sa.transactions} = transactions,\n\t\t{sa.status} = status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSA\nsrcScheme select(mapColumn(\n\t\t{ss.id} = id,\n\t\t{ss.name} = name,\n\t\t{ss.company} = company,\n\t\t{ss.point_name} = point_name,\n\t\t{ss.plan_description} = plan_description,\n\t\t{ss.category_id} = category_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSS\nscrSchemeCategory select(mapColumn(\n\t\t{sc.id} = id,\n\t\t{sc.name} = name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSC\nJoinSABS, SelectSC join({ss.category_id} == {sc.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSC\nJoinSABSSC, SelectRefLC join({sa.status} == {ref.LCCode},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSABSSCRef\nsrcRefLoyaltyCardStatus select(mapColumn(\n\t\t{ref.LCCode} = Code,\n\t\t{ref.LCStatus} = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRefLC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dim.ID} = ID,\n\t\t{dim.CardNumber} = CardNumber,\n\t\t{dim.PlanName} = PlanName,\n\t\t{dim.PlanDescription} = PlanDescription,\n\t\t{dim.LCStatus} = LCStatus,\n\t\t{dim.Merchant} = Merchant,\n\t\t{dim.Category} = Category,\n\t\t{dim.BonusName} = BonusName,\n\t\t{dim.BalanceValue} = BalanceValue,\n\t\t{dim.BalancePoints} = BalancePoints,\n\t\t{dim.Balance} = Balance,\n\t\t{dim.BalanceIsStale} = BalanceIsStale,\n\t\t{dim.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{dim.BalanceRewardTier} = BalanceRewardTier,\n\t\t{dim.BalanceValueLabel} = BalanceValueLabel,\n\t\t{dim.BalancePointsLabel} = BalancePointsLabel,\n\t\t{dim.AddDate} = AddDate,\n\t\t{dim.JoinDate} = JoinDate,\n\t\t{dim.EffFromDate} = EffFromDate,\n\t\t{dim.EffToDate} = EffToDate,\n\t\t{dim.ProcessDate} = ProcessDate,\n\t\t{dim.IsCurrent} = IsCurrent,\n\t\t{dim.SourceLCKey} = SourceLCKey,\n\t\t{dim.RestrictionKey} = RestrictionKey,\n\t\t{dim.IsActive} = IsActive,\n\t\t{dim.LCCreateDate} = LCCreateDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLC\nJoinSABSSCRef, MaxDimLCID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nAdditionalFields, SelectDimLC lookup({sa.id} == {dim.SourceLCKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nLookupExistingRecords split(isNull({dim.ID}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@NewRecord derive({new.IsCurrent} = toBoolean('yes')) ~> IsCurrentNew\nNewExistingSplit@ExistingRecord derive({new.IsCurrentInsert} = toBoolean('yes')) ~> IsCurrentInsert\nNewExistingSplit@ExistingRecord derive({new.IsCurrentUpdate} = toBoolean('No')) ~> InCurrentUpdate\nInCurrentUpdate filter({dim.ID}<=MaxDimLCID) ~> Filter\nFilter alterRow(updateIf({dim.ID}<=MaxDimLCID)) ~> UpdateExistingRecords\nJoinMaxID derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalFields\nsrcVwSchemeSchemeaccountBalance select(mapColumn(\n\t\t{bal.SAID} = SAID,\n\t\t{bal.SACreated} = SACreated,\n\t\t{bal.SAUpdated} = SAUpdated,\n\t\t{bal.BalanceValue} = BalanceValue,\n\t\t{bal.BalancePoints} = BalancePoints,\n\t\t{bal.Balance} = Balance,\n\t\t{bal.BalanceIsStale} = BalanceIsStale,\n\t\t{bal.BalanceUserSet} = BalanceUserSet,\n\t\t{bal.BalanceSchemeID} = BalanceSchemeID,\n\t\t{bal.BalanceUpdateDate} = BalanceUpdateDate,\n\t\t{bal.BalanceRewardTeir} = BalanceRewardTeir,\n\t\t{bal.BalanceValueLabel} = BalanceValueLabel,\n\t\t{bal.BalancePointsLabel} = BalancePointsLabel,\n\t\t{bal.BalanceSAID} = BalanceSAID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSB\nSelectSA, SelectSB join({sa.id} == {bal.SAID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSAB\nIsCurrentNew sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBonusName = {dim.BonusName},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrent},\n\t\tSourceLCKey = {sa.id},\n\t\tRestrictionKey = {dim.RestrictionKey},\n\t\tIsActive = {sa.is_deleted},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCard\nIsCurrentInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCardNumber = {sa.card_number},\n\t\tPlanName = {ss.name},\n\t\tPlanDescription = {ss.plan_description},\n\t\tLCStatus = {ref.LCStatus},\n\t\tMerchant = {ss.company},\n\t\tCategory = {sc.name},\n\t\tBalanceValue = {bal.BalanceValue},\n\t\tBalancePoints = {bal.BalancePoints},\n\t\tBalance = {bal.Balance},\n\t\tBalanceIsStale = {bal.BalanceIsStale},\n\t\tBalanceUpdateDate = {dim.BalanceUpdateDate},\n\t\tBalanceRewardTier = {bal.BalanceRewardTeir},\n\t\tBalanceValueLabel = {bal.BalanceValueLabel},\n\t\tBalancePointsLabel = {bal.BalancePointsLabel},\n\t\tAddDate = {sa.link_date},\n\t\tJoinDate = {sa.join_date},\n\t\tEffFromDate = {sa.created},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentInsert},\n\t\tSourceLCKey = {sa.id},\n\t\tIsActive = {sa.is_deleted},\n\t\tLCCreateDate = {dim.LCCreateDate}\n\t)) ~> snkDimLoyaltyCardEI\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Dim.LoyaltyCard OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {dim.ID},\n\t\tProcessDate = {new.ProcessDate},\n\t\tIsCurrent = {new.IsCurrentUpdate}\n\t)) ~> snkDimLoyaltyCardEU"
		}
	}
}