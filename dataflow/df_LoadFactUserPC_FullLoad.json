{
	"name": "df_LoadFactUserPC_FullLoad",
	"properties": {
		"description": "Load fact.UserPC",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_ubiquity_paymentcardaccountentry",
						"type": "DatasetReference"
					},
					"name": "srcUbiquityPaymentCardAccountEntry"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_paymentcardaccount",
						"type": "DatasetReference"
					},
					"name": "srcPaymentCardAccount"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimUser",
						"type": "DatasetReference"
					},
					"name": "srcDimUser"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "srcDimPC"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_FactUserPC",
						"type": "DatasetReference"
					},
					"name": "snkFactUserPC"
				}
			],
			"transformations": [
				{
					"name": "SelectUPA"
				},
				{
					"name": "SelectPA"
				},
				{
					"name": "SelectUSR"
				},
				{
					"name": "SelectPC"
				},
				{
					"name": "JoinUpaPa"
				},
				{
					"name": "JoinUpaPaUsr"
				},
				{
					"name": "JoinUpaPaUsrPc"
				},
				{
					"name": "GroupRecords"
				},
				{
					"name": "AdditionalFields"
				},
				{
					"name": "CurrentRecords"
				},
				{
					"name": "FilterDimUsr"
				},
				{
					"name": "FilterDimPC"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tpayment_card_account_id as integer,\n\t\tuser_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUbiquityPaymentCardAccountEntry\nsource(output(\n\t\tid as integer,\n\t\tname_on_card as string,\n\t\tstart_month as integer,\n\t\tstart_year as integer,\n\t\texpiry_month as integer,\n\t\texpiry_year as integer,\n\t\tstatus as integer,\n\t\torder as integer,\n\t\tcreated as timestamp,\n\t\tupdated as timestamp,\n\t\tissuer_id as integer,\n\t\tpayment_card_id as integer,\n\t\ttoken as string,\n\t\tcountry as string,\n\t\tcurrency_code as string,\n\t\tpan_end as string,\n\t\tpan_start as string,\n\t\tis_deleted as boolean,\n\t\tfingerprint as string,\n\t\tpsp_token as string,\n\t\tconsents as string,\n\t\thash as string,\n\t\tformatted_images as string,\n\t\tpll_links as string,\n\t\tagent_data as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentCardAccount\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcUbiquityPaymentCardAccountEntry select(mapColumn(\n\t\t{upa.id} = id,\n\t\t{upa.payment_card_account_id} = payment_card_account_id,\n\t\t{upa.user_id} = user_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUPA\nsrcPaymentCardAccount select(mapColumn(\n\t\t{pca.id} = id,\n\t\t{pca.status} = status,\n\t\t{pca.created} = created,\n\t\t{pca.updated} = updated,\n\t\t{pca.is_deleted} = is_deleted,\n\t\t{pca.pll_links} = pll_links\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPA\nFilterDimUsr select(mapColumn(\n\t\t{usr.ID} = ID,\n\t\t{usr.IsActive} = IsActive,\n\t\t{usr.DeleteToken} = DeleteToken,\n\t\t{usr.EffFromDate} = EffFromDate,\n\t\t{usr.EffToDate} = EffToDate,\n\t\t{usr.IsCurrent} = IsCurrent,\n\t\t{usr.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUSR\nFilterDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectUPA, SelectPA join({upa.payment_card_account_id} == {pca.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPa\nJoinUpaPa, SelectUSR join({upa.user_id} == {usr.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsr\nJoinUpaPaUsr, SelectPC join({upa.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUpaPaUsrPc\nCurrentRecords aggregate(groupBy({upa.payment_card_account_id},\n\t\t{dpc.ID},\n\t\t{upa.user_id},\n\t\t{usr.ID}),\n\tUserCount = count({upa.user_id})) ~> GroupRecords\nGroupRecords derive({new.ProcessDate} = toUTC(currentUTC()),\n\t\t{new.IsCreated} = 1) ~> AdditionalFields\nJoinUpaPaUsrPc filter(or({usr.IsCurrent}==toBoolean('true'),{dpc.IsCurrent}==toBoolean('true'))) ~> CurrentRecords\nsrcDimUser filter(IsCurrent == toBoolean('true')) ~> FilterDimUsr\nsrcDimPC filter(IsCurrent == toBoolean('true')) ~> FilterDimPC\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tUserID as integer,\n\t\tPaymentCardID as long,\n\t\tIsCreated as boolean,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserID = {usr.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsCreated = {new.IsCreated},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkFactUserPC"
		}
	}
}