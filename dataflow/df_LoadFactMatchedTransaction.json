{
	"name": "df_LoadFactMatchedTransaction",
	"properties": {
		"description": "Data Pipeline to load fact.MatchedTransaction",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_harmonia_matched_transaction",
						"type": "DatasetReference"
					},
					"name": "srcMatchedTransaction"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_harmonia_payment_transaction",
						"type": "DatasetReference"
					},
					"name": "srcPaymentTransaction"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_harmonia_scheme_transaction",
						"type": "DatasetReference"
					},
					"name": "srcSchemeTransaction"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_harmonia_user_identity",
						"type": "DatasetReference"
					},
					"name": "srcUserIdentity"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimUser",
						"type": "DatasetReference"
					},
					"name": "srcDimUser"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "srcDimLoyaltyCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_FactMatchedTransaction",
						"type": "DatasetReference"
					},
					"name": "srcFactMatchedTransaction"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_FactMatchedTransaction",
						"type": "DatasetReference"
					},
					"name": "srcMaxID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_FactMatchedTransaction",
						"type": "DatasetReference"
					},
					"name": "snkMatchedTransaction"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_FactMatchedTransaction",
						"type": "DatasetReference"
					},
					"name": "snkMatchedTransactionE"
				}
			],
			"transformations": [
				{
					"name": "SelectMT"
				},
				{
					"name": "SelectPT"
				},
				{
					"name": "SelectST"
				},
				{
					"name": "SelectUI"
				},
				{
					"name": "JoinMtPt"
				},
				{
					"name": "JoinMtPtSt"
				},
				{
					"name": "JoinMtPtStUi"
				},
				{
					"name": "SelectDu"
				},
				{
					"name": "SelectDl"
				},
				{
					"name": "JoinMtPtStUiDu"
				},
				{
					"name": "JoinMtPtStUiDuDl"
				},
				{
					"name": "IsExportedColumn"
				},
				{
					"name": "SelectFmt"
				},
				{
					"name": "LookupExistingRecords"
				},
				{
					"name": "NewExistingSplit"
				},
				{
					"name": "IsExportedCol"
				},
				{
					"name": "AdditionalColumn"
				},
				{
					"name": "JoinMaxID"
				},
				{
					"name": "UpdateExistingRecords"
				},
				{
					"name": "FilterUnwantedRecords"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_id as integer,\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tmatching_type as string,\n\t\tstatus as string,\n\t\tpayment_transaction_id as integer,\n\t\tscheme_transaction_id as integer,\n\t\textra_fields as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcMatchedTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tstatus as string,\n\t\tuser_identity_id as integer,\n\t\textra_fields as string,\n\t\tsettlement_key as string,\n\t\tprovider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcPaymentTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tmerchant_identifier_ids as string[],\n\t\ttransaction_id as string,\n\t\ttransaction_date as timestamp,\n\t\tspend_amount as integer,\n\t\tspend_multiplier as integer,\n\t\tspend_currency as string,\n\t\tstatus as string,\n\t\textra_fields as string,\n\t\tprovider_slug as string,\n\t\tpayment_provider_slug as string,\n\t\tauth_code as string,\n\t\thas_time as boolean,\n\t\tmatch_group as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcSchemeTransaction\nsource(output(\n\t\tid as integer,\n\t\tcreated_at as timestamp,\n\t\tupdated_at as timestamp,\n\t\tloyalty_id as string,\n\t\tscheme_account_id as integer,\n\t\tuser_id as integer,\n\t\tcredentials as string,\n\t\tfirst_six as string,\n\t\tlast_four as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcUserIdentity\nsource(output(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tPhone as string,\n\t\tEmail as string,\n\t\tFacebook as string,\n\t\tTwitter as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tPostcode as string,\n\t\tCountry as string,\n\t\tGender as string,\n\t\tDateOfBirth as date,\n\t\tChannel as string,\n\t\tOrganisation as string,\n\t\tClient as string,\n\t\tExternalID as string,\n\t\tUserCreateDate as timestamp,\n\t\tUserUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDeleteToken as string,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsStaff as boolean,\n\t\tIsTester as boolean,\n\t\tIsCurrent as boolean,\n\t\tSourceUserKey as integer,\n\t\tRestrictionID as integer,\n\t\tIsRTBF as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimUser\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcFactMatchedTransaction\nsource(output(\n\t\tMaxFactMTID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT ISNULL(MAX(ID), 0) MaxFactMTID FROM Fact.MatchedTransaction',\n\tformat: 'query',\n\tstaged: false) ~> srcMaxID\nsrcMatchedTransaction select(mapColumn(\n\t\t{mt.id} = id,\n\t\t{mt.created_at} = created_at,\n\t\t{mt.updated_at} = updated_at,\n\t\t{mt.merchant_identifier_id} = merchant_identifier_id,\n\t\t{mt.transaction_id} = transaction_id,\n\t\t{mt.transaction_date} = transaction_date,\n\t\t{mt.spend_amount} = spend_amount,\n\t\t{mt.spend_multiplier} = spend_multiplier,\n\t\t{mt.spend_currency} = spend_currency,\n\t\t{mt.card_token} = card_token,\n\t\t{mt.matching_type} = matching_type,\n\t\t{mt.status} = status,\n\t\t{mt.payment_transaction_id} = payment_transaction_id,\n\t\t{mt.scheme_transaction_id} = scheme_transaction_id,\n\t\t{mt.extra_fields} = extra_fields\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectMT\nsrcPaymentTransaction select(mapColumn(\n\t\t{pt.id} = id,\n\t\t{pt.created_at} = created_at,\n\t\t{pt.updated_at} = updated_at,\n\t\t{pt.merchant_identifier_ids} = merchant_identifier_ids,\n\t\t{pt.transaction_id} = transaction_id,\n\t\t{pt.transaction_date} = transaction_date,\n\t\t{pt.spend_amount} = spend_amount,\n\t\t{pt.spend_multiplier} = spend_multiplier,\n\t\t{pt.spend_currency} = spend_currency,\n\t\t{pt.card_token} = card_token,\n\t\t{pt.status} = status,\n\t\t{pt.user_identity_id} = user_identity_id,\n\t\t{pt.extra_fields} = extra_fields,\n\t\t{pt.settlement_key} = settlement_key,\n\t\t{pt.provider_slug} = provider_slug,\n\t\t{pt.auth_code} = auth_code,\n\t\t{pt.has_time} = has_time,\n\t\t{pt.match_group} = match_group,\n\t\t{pt.first_six} = first_six,\n\t\t{pt.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPT\nsrcSchemeTransaction select(mapColumn(\n\t\t{st.id} = id,\n\t\t{st.created_at} = created_at,\n\t\t{st.updated_at} = updated_at,\n\t\t{st.merchant_identifier_ids} = merchant_identifier_ids,\n\t\t{st.transaction_id} = transaction_id,\n\t\t{st.transaction_date} = transaction_date,\n\t\t{st.spend_amount} = spend_amount,\n\t\t{st.spend_multiplier} = spend_multiplier,\n\t\t{st.spend_currency} = spend_currency,\n\t\t{st.status} = status,\n\t\t{st.extra_fields} = extra_fields,\n\t\t{st.provider_slug} = provider_slug,\n\t\t{st.payment_provider_slug} = payment_provider_slug,\n\t\t{st.auth_code} = auth_code,\n\t\t{st.has_time} = has_time,\n\t\t{st.match_group} = match_group,\n\t\t{st.first_six} = first_six,\n\t\t{st.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectST\nsrcUserIdentity select(mapColumn(\n\t\t{ui.id} = id,\n\t\t{ui.created_at} = created_at,\n\t\t{ui.updated_at} = updated_at,\n\t\t{ui.loyalty_id} = loyalty_id,\n\t\t{ui.scheme_account_id} = scheme_account_id,\n\t\t{ui.user_id} = user_id,\n\t\t{ui.credentials} = credentials,\n\t\t{ui.first_six} = first_six,\n\t\t{ui.last_four} = last_four\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUI\nSelectMT, SelectPT join({mt.payment_transaction_id} == {pt.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPt\nJoinMtPt, SelectST join({mt.scheme_transaction_id} == {st.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtSt\nJoinMtPtSt, SelectUI join({pt.user_identity_id} == {ui.id},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUi\nsrcDimUser select(mapColumn(\n\t\t{du.ID} = ID,\n\t\t{du.Channel} = Channel,\n\t\t{du.Organisation} = Organisation,\n\t\t{du.Client} = Client,\n\t\t{du.ExternalID} = ExternalID,\n\t\t{du.IsActive} = IsActive,\n\t\t{du.IsCurrent} = IsCurrent,\n\t\t{du.SourceUserKey} = SourceUserKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDu\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dl.ID} = ID,\n\t\t{dl.Merchant} = Merchant,\n\t\t{dl.Category} = Category,\n\t\t{dl.IsActive} = IsActive,\n\t\t{dl.IsCurrent} = IsCurrent,\n\t\t{dl.SourceLCKey} = SourceLCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDl\nJoinMtPtStUi, SelectDu join({ui.user_id} == {du.SourceUserKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUiDu\nJoinMtPtStUiDu, SelectDl join({ui.scheme_account_id} == {dl.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMtPtStUiDuDl\nNewExistingSplit@NewRecord derive({new.IsExported} = case({mt.status} == 'EXPORTED', 1, 0)) ~> IsExportedColumn\nsrcFactMatchedTransaction select(mapColumn(\n\t\t{fmt.ID} = ID,\n\t\t{fmt.SourceMTKey} = SourceMTKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFmt\nJoinMaxID, SelectFmt lookup({mt.id} == {fmt.SourceMTKey},\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExistingRecords\nAdditionalColumn split(isNull({fmt.SourceMTKey}),\n\tdisjoint: false) ~> NewExistingSplit@(NewRecord, ExistingRecord)\nNewExistingSplit@ExistingRecord derive({new.IsExported} = case({mt.status} == 'EXPORTED', 1, 0)) ~> IsExportedCol\nFilterUnwantedRecords derive({new.ProcessDate} = fromUTC(currentUTC())) ~> AdditionalColumn\nJoinMtPtStUiDuDl, srcMaxID join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxID\nIsExportedCol alterRow(updateIf({fmt.ID}<=MaxFactMTID)) ~> UpdateExistingRecords\nLookupExistingRecords filter(or({du.IsCurrent}==isBoolean('true'), {dl.IsCurrent}==isBoolean('true'))) ~> FilterUnwantedRecords\nIsExportedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tMerchantIdentifierID = {mt.merchant_identifier_id},\n\t\tTransactionID = {mt.transaction_id},\n\t\tPaymentTransactionID = {mt.payment_transaction_id},\n\t\tSchemeTransactionID = {mt.scheme_transaction_id},\n\t\tspend_amount = {mt.spend_amount},\n\t\tspend_multiplier = {mt.spend_multiplier},\n\t\tspend_currency = {mt.spend_currency},\n\t\tcard_token = {mt.card_token},\n\t\tMatchingType = {mt.matching_type},\n\t\tTransactionDate = {mt.transaction_date},\n\t\tCreateDate = {mt.created_at},\n\t\tExportDate = {mt.updated_at},\n\t\tIsMTExported = {new.IsExported},\n\t\tSourceMTKey = {mt.id},\n\t\tDimUserID = {du.ID},\n\t\tDimLoyaltyCardID = {dl.ID},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkMatchedTransaction\nUpdateExistingRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tMerchantIdentifierID as integer,\n\t\tTransactionID as string,\n\t\tPaymentTransactionID as integer,\n\t\tSchemeTransactionID as integer,\n\t\tspend_amount as decimal(18,4),\n\t\tspend_multiplier as decimal(18,4),\n\t\tspend_currency as string,\n\t\tcard_token as string,\n\t\tMatchingType as string,\n\t\tTransactionDate as timestamp,\n\t\tCreateDate as timestamp,\n\t\tExportDate as timestamp,\n\t\tIsMTExported as boolean,\n\t\tSourceMTKey as long,\n\t\tDimUserID as integer,\n\t\tDimLoyaltyCardID as integer,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['SET IDENTITY_INSERT Fact.MatchedTransaction ON;'],\n\tpostSQLs:['SET IDENTITY_INSERT Fact.MatchedTransaction OFF;'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID = {fmt.ID},\n\t\tExportDate = {mt.updated_at},\n\t\tProcessDate = {new.ProcessDate}\n\t)) ~> snkMatchedTransactionE"
		}
	}
}