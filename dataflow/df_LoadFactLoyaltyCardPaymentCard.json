{
	"name": "df_LoadFactLoyaltyCardPaymentCard",
	"properties": {
		"description": "Load fact.LoyaltyCardPaymentCard",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_hermes_history_historicalpaymentcardschemeentry",
						"type": "DatasetReference"
					},
					"name": "srcHistoryHistoricalPaymentCardSchemeEntry"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimLoyaltyCard",
						"type": "DatasetReference"
					},
					"name": "srcDimLoyaltyCard"
				},
				{
					"dataset": {
						"referenceName": "ds_Syn_DimPaymentCard",
						"type": "DatasetReference"
					},
					"name": "srcDimPC"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Syn_FactLoyaltyCardPaymentCard",
						"type": "DatasetReference"
					},
					"name": "snkFactUserPC"
				}
			],
			"transformations": [
				{
					"name": "SelectLC"
				},
				{
					"name": "SelectPC"
				},
				{
					"name": "JoinUplLc"
				},
				{
					"name": "JoinUplLcPc"
				},
				{
					"name": "AdditionalFields"
				},
				{
					"name": "SelectHPL"
				},
				{
					"name": "FilterExtraPCRecords"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tcreated as timestamp,\n\t\tchange_type as string,\n\t\tinstance_id as string,\n\t\tchannel as string,\n\t\tchange_details as string,\n\t\tuser_id as integer,\n\t\tscheme_account_id as integer,\n\t\tpayment_card_account_id as integer,\n\t\tactive_link as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srcHistoryHistoricalPaymentCardSchemeEntry\nsource(output(\n\t\tID as integer,\n\t\tCardNumber as string,\n\t\tPlanName as string,\n\t\tPlanDescription as string,\n\t\tLCStatus as string,\n\t\tMerchant as string,\n\t\tCategory as string,\n\t\tBonusName as string,\n\t\tBalanceValue as decimal(18,2),\n\t\tBalancePoints as decimal(18,2),\n\t\tBalance as decimal(18,2),\n\t\tBalanceIsStale as boolean,\n\t\tBalanceUpdateDate as timestamp,\n\t\tBalanceRewardTier as string,\n\t\tBalanceValueLabel as string,\n\t\tBalancePointsLabel as string,\n\t\tIsActive as boolean,\n\t\tLCCreateDate as timestamp,\n\t\tAddDate as timestamp,\n\t\tJoinDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourceLCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimLoyaltyCard\nsource(output(\n\t\tID as long,\n\t\tNameOnCard as string,\n\t\tPANTruncation as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tToken as string,\n\t\tFingerprint as string,\n\t\tIssuer as string,\n\t\tCardProvider as string,\n\t\tSlug as string,\n\t\tCardType as string,\n\t\tCardStatus as string,\n\t\tIsDeleted as boolean,\n\t\tCountry as string,\n\t\tCCYCode as string,\n\t\tCardCreateDate as timestamp,\n\t\tCardUpdateDate as timestamp,\n\t\tEffFromDate as timestamp,\n\t\tEffToDate as timestamp,\n\t\tProcessDate as timestamp,\n\t\tIsCurrent as boolean,\n\t\tSourcePCKey as integer,\n\t\tRestrictionKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcDimPC\nsrcDimLoyaltyCard select(mapColumn(\n\t\t{dlc.ID} = ID,\n\t\t{dlc.LCStatus} = LCStatus,\n\t\t{dlc.Merchant} = Merchant,\n\t\t{dlc.Category} = Category,\n\t\t{dlc.IsActive} = IsActive,\n\t\t{dlc.LCCreateDate} = LCCreateDate,\n\t\t{dlc.IsCurrent} = IsCurrent,\n\t\t{dlc.SourceLCKey} = SourceLCKey,\n\t\t{dlc.RestrictionKey} = RestrictionKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLC\nsrcDimPC select(mapColumn(\n\t\t{dpc.ID} = ID,\n\t\t{dpc.Token} = Token,\n\t\t{dpc.Fingerprint} = Fingerprint,\n\t\t{dpc.CardStatus} = CardStatus,\n\t\t{dpc.IsDeleted} = IsDeleted,\n\t\t{dpc.CardCreateDate} = CardCreateDate,\n\t\t{dpc.CardUpdateDate} = CardUpdateDate,\n\t\t{dpc.EffFromDate} = EffFromDate,\n\t\t{dpc.EffToDate} = EffToDate,\n\t\t{dpc.ProcessDate} = ProcessDate,\n\t\t{dpc.IsCurrent} = IsCurrent,\n\t\t{dpc.SourcePCKey} = SourcePCKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPC\nSelectHPL, SelectLC join({hpl.scheme_account_id} == {dlc.SourceLCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLc\nJoinUplLc, SelectPC join({hpl.payment_card_account_id} == {dpc.SourcePCKey},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUplLcPc\nFilterExtraPCRecords derive({new.ProcessDate} = toUTC(currentUTC())) ~> AdditionalFields\nsrcHistoryHistoricalPaymentCardSchemeEntry select(mapColumn(\n\t\t{hpl.id} = id,\n\t\t{hpl.created} = created,\n\t\t{hpl.change_type} = change_type,\n\t\t{hpl.instance_id} = instance_id,\n\t\t{hpl.channel} = channel,\n\t\t{hpl.change_details} = change_details,\n\t\t{hpl.user_id} = user_id,\n\t\t{hpl.scheme_account_id} = scheme_account_id,\n\t\t{hpl.payment_card_account_id} = payment_card_account_id,\n\t\t{hpl.active_link} = active_link\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHPL\nJoinUplLcPc filter(or(equals({dpc.IsCurrent},true()),equals({dlc.IsCurrent},true()))) ~> FilterExtraPCRecords\nAdditionalFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tLoyaltyCardID as integer,\n\t\tPaymentCardID as long,\n\t\tIsActiveLink as boolean,\n\t\tChange as string,\n\t\tCreateDate as timestamp,\n\t\tProcessDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLoyaltyCardID = {dlc.ID},\n\t\tPaymentCardID = {dpc.ID},\n\t\tIsActiveLink = {hpl.active_link},\n\t\tProcessDate = {new.ProcessDate},\n\t\tCreateDate = {hpl.created},\n\t\tChange = {hpl.change_type}\n\t)) ~> snkFactUserPC"
		}
	}
}